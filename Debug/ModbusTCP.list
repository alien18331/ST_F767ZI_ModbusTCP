
ModbusTCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001330c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002de8  0801350c  0801350c  0002350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162f4  080162f4  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  080162f4  080162f4  000262f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080162fc  080162fc  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080162fc  080162fc  000262fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016300  08016300  00026300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08016304  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f7c4  20000088  0801638c  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f84c  0801638c  0003f84c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fa93  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007cac  00000000  00000000  0006fb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f18  00000000  00000000  000777f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d20  00000000  00000000  00079710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003925e  00000000  00000000  0007b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c155  00000000  00000000  000b468e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011aab0  00000000  00000000  000e07e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083a0  00000000  00000000  001fb310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	080134f4 	.word	0x080134f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	080134f4 	.word	0x080134f4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <vApplicationGetIdleTaskMemory+0x2c>)
 8000608:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <vApplicationGetIdleTaskMemory+0x30>)
 800060e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000616:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	200000a4 	.word	0x200000a4
 8000628:	200000f8 	.word	0x200000f8

0800062c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_FREERTOS_Init+0x30>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fc80 	bl	8003f4e <osThreadCreate>
 800064e:	4602      	mov	r2, r0
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <MX_FREERTOS_Init+0x34>)
 8000652:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bdb0      	pop	{r4, r5, r7, pc}
 800065c:	08013518 	.word	0x08013518
 8000660:	20008f4c 	.word	0x20008f4c

08000664 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800066c:	f002 feae 	bl	80033cc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  eMBTCPInit(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f011 fa99 	bl	8011ba8 <eMBTCPInit>
  eMBEnable();
 8000676:	f011 fae9 	bl	8011c4c <eMBEnable>
  /* Infinite loop */
  for(;;)
  {
	eMBPoll();
 800067a:	f011 fb03 	bl	8011c84 <eMBPoll>
    osDelay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f003 fcb1 	bl	8003fe6 <osDelay>
    __NOP();
 8000684:	bf00      	nop
	eMBPoll();
 8000686:	e7f8      	b.n	800067a <StartDefaultTask+0x16>

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a29      	ldr	r2, [pc, #164]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a23      	ldr	r2, [pc, #140]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_GPIO_Init+0xc0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <MX_GPIO_Init+0xc0>)
 8000704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_GPIO_Init+0xc0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f244 0181 	movw	r1, #16513	; 0x4081
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_GPIO_Init+0xc4>)
 800071e:	f001 febd 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000722:	f244 0381 	movw	r3, #16513	; 0x4081
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xc4>)
 800073c:	f001 fd04 	bl	8002148 <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fa41 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f808 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f7ff ff94 	bl	8000688 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000760:	f7ff ff64 	bl	800062c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000764:	f003 fbdc 	bl	8003f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x18>
	...

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f011 ff46 	bl	801260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000790:	f001 feb8 	bl	8002504 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <SystemClock_Config+0xd4>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <SystemClock_Config+0xd4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a24      	ldr	r2, [pc, #144]	; (8000844 <SystemClock_Config+0xd8>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xd8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007dc:	23d8      	movs	r3, #216	; 0xd8
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fee9 	bl	80025c4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f8:	f000 f838 	bl	800086c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fc:	f001 fe92 	bl	8002524 <HAL_PWREx_EnableOverDrive>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000806:	f000 f831 	bl	800086c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2107      	movs	r1, #7
 8000828:	4618      	mov	r0, r3
 800082a:	f002 f979 	bl	8002b20 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000834:	f000 f81a 	bl	800086c <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 f9cb 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40001000 	.word	0x40001000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000872:	e7fe      	b.n	8000872 <Error_Handler+0x6>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fa99 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 fa85 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008de:	2036      	movs	r0, #54	; 0x36
 80008e0:	f000 fa9e 	bl	8000e20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_InitTick+0xa0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <HAL_InitTick+0xa0>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_InitTick+0xa0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fac8 	bl	8002e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800090c:	f002 fab2 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8000910:	4603      	mov	r3, r0
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_InitTick+0xa4>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	3b01      	subs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_InitTick+0xa8>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_InitTick+0xac>)
 8000928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_InitTick+0xa8>)
 800092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000930:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_InitTick+0xa8>)
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_InitTick+0xa8>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_InitTick+0xa8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_InitTick+0xa8>)
 8000946:	f002 fadb 	bl	8002f00 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_InitTick+0xa8>)
 8000952:	f002 fb0b 	bl	8002f6c <HAL_TIM_Base_Start_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	431bde83 	.word	0x431bde83
 800096c:	20008f50 	.word	0x20008f50
 8000970:	40001000 	.word	0x40001000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM6_DAC_IRQHandler+0x10>)
 80009a6:	f002 fb0b 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20008f50 	.word	0x20008f50

080009b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <ETH_IRQHandler+0x10>)
 80009ba:	f000 fe23 	bl	8001604 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000a8b8 	.word	0x2000a8b8

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <_kill+0x20>)
 80009e4:	2216      	movs	r2, #22
 80009e6:	601a      	str	r2, [r3, #0]
	return -1;
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	2000f824 	.word	0x2000f824

080009fc <_exit>:

void _exit (int status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe5 	bl	80009d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0e:	e7fe      	b.n	8000a0e <_exit+0x12>

08000a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
	}

return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e009      	b.n	8000a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf1      	blt.n	8000a5c <_write+0x12>
	}
	return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_close>:

int _close(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_isatty>:

int _isatty(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d205      	bcs.n	8000b28 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <_sbrk+0x6c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	371c      	adds	r7, #28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20080000 	.word	0x20080000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	200008f8 	.word	0x200008f8
 8000b54:	2000f850 	.word	0x2000f850
 8000b58:	2000f824 	.word	0x2000f824

08000b5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x28>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x28>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SystemInit+0x28>)
 8000b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd3 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f011 fceb 	bl	8012590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fdc9 	bl	8000750 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000bc4:	08016304 	.word	0x08016304
  ldr  r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bcc:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8000bd0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8000bd4:	2000f84c 	.word	0x2000f84c

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>

08000bda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f8f7 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fe6d 	bl	80008c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bea:	f7ff fe43 	bl	8000874 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20008f90 	.word	0x20008f90

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20008f90 	.word	0x20008f90

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_Delay+0x40>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0000 	.word	0x05fa0000

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000e4c:	4ba9      	ldr	r3, [pc, #676]	; (80010f4 <HAL_ETH_Init+0x2b8>)
 8000e4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e183      	b.n	800116a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f002 fc06 	bl	8003688 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7c:	4b9e      	ldr	r3, [pc, #632]	; (80010f8 <HAL_ETH_Init+0x2bc>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	4a9d      	ldr	r2, [pc, #628]	; (80010f8 <HAL_ETH_Init+0x2bc>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6453      	str	r3, [r2, #68]	; 0x44
 8000e88:	4b9b      	ldr	r3, [pc, #620]	; (80010f8 <HAL_ETH_Init+0x2bc>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e94:	4b99      	ldr	r3, [pc, #612]	; (80010fc <HAL_ETH_Init+0x2c0>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a98      	ldr	r2, [pc, #608]	; (80010fc <HAL_ETH_Init+0x2c0>)
 8000e9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e9e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ea0:	4b96      	ldr	r3, [pc, #600]	; (80010fc <HAL_ETH_Init+0x2c0>)
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4994      	ldr	r1, [pc, #592]	; (80010fc <HAL_ETH_Init+0x2c0>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0201 	orr.w	r2, r2, #1
 8000ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ec4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec6:	f7ff fea9 	bl	8000c1c <HAL_GetTick>
 8000eca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ecc:	e011      	b.n	8000ef2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000ece:	f7ff fea5 	bl	8000c1c <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000edc:	d909      	bls.n	8000ef2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e13b      	b.n	800116a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e4      	bne.n	8000ece <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f023 031c 	bic.w	r3, r3, #28
 8000f12:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f14:	f001 ffa2 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8000f18:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4a78      	ldr	r2, [pc, #480]	; (8001100 <HAL_ETH_Init+0x2c4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d908      	bls.n	8000f34 <HAL_ETH_Init+0xf8>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_ETH_Init+0x2c8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d804      	bhi.n	8000f34 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e027      	b.n	8000f84 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4a73      	ldr	r2, [pc, #460]	; (8001104 <HAL_ETH_Init+0x2c8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d908      	bls.n	8000f4e <HAL_ETH_Init+0x112>
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4a72      	ldr	r2, [pc, #456]	; (8001108 <HAL_ETH_Init+0x2cc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d804      	bhi.n	8000f4e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f043 030c 	orr.w	r3, r3, #12
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	e01a      	b.n	8000f84 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4a6d      	ldr	r2, [pc, #436]	; (8001108 <HAL_ETH_Init+0x2cc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d903      	bls.n	8000f5e <HAL_ETH_Init+0x122>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4a6c      	ldr	r2, [pc, #432]	; (800110c <HAL_ETH_Init+0x2d0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d911      	bls.n	8000f82 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	; (800110c <HAL_ETH_Init+0x2d0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d908      	bls.n	8000f78 <HAL_ETH_Init+0x13c>
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4a69      	ldr	r2, [pc, #420]	; (8001110 <HAL_ETH_Init+0x2d4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d804      	bhi.n	8000f78 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e005      	b.n	8000f84 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	e000      	b.n	8000f84 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f82:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fc19 	bl	80017ca <HAL_ETH_WritePHYRegister>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fdcf 	bl	8001b48 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0d9      	b.n	800116a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000fb6:	20ff      	movs	r0, #255	; 0xff
 8000fb8:	f7ff fe3c 	bl	8000c34 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a7 	beq.w	8001114 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000fc6:	f7ff fe29 	bl	8000c1c <HAL_GetTick>
 8000fca:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fb90 	bl	80016fa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000fda:	f7ff fe1f 	bl	8000c1c <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d90f      	bls.n	800100c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fda8 	bl	8001b48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0ae      	b.n	800116a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0da      	beq.n	8000fcc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fbd4 	bl	80017ca <HAL_ETH_WritePHYRegister>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fd8a 	bl	8001b48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800103c:	2301      	movs	r3, #1
 800103e:	e094      	b.n	800116a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001040:	f7ff fdec 	bl	8000c1c <HAL_GetTick>
 8001044:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	461a      	mov	r2, r3
 800104c:	2101      	movs	r1, #1
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 fb53 	bl	80016fa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001054:	f7ff fde2 	bl	8000c1c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4293      	cmp	r3, r2
 8001064:	d90f      	bls.n	8001086 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800106a:	6939      	ldr	r1, [r7, #16]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 fd6b 	bl	8001b48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e071      	b.n	800116a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0da      	beq.n	8001046 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	461a      	mov	r2, r3
 8001096:	211f      	movs	r1, #31
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fb2e 	bl	80016fa <HAL_ETH_ReadPHYRegister>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010a8:	6939      	ldr	r1, [r7, #16]
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fd4c 	bl	8001b48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010b8:	2301      	movs	r3, #1
 80010ba:	e056      	b.n	800116a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	e002      	b.n	80010d6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	e037      	b.n	8001158 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e032      	b.n	8001158 <HAL_ETH_Init+0x31c>
 80010f2:	bf00      	nop
 80010f4:	03938700 	.word	0x03938700
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	01312cff 	.word	0x01312cff
 8001104:	02160ebf 	.word	0x02160ebf
 8001108:	039386ff 	.word	0x039386ff
 800110c:	05f5e0ff 	.word	0x05f5e0ff
 8001110:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001124:	4313      	orrs	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fb4c 	bl	80017ca <HAL_ETH_WritePHYRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fd02 	bl	8001b48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00c      	b.n	800116a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001150:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001154:	f7ff fd6e 	bl	8000c34 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fcf4 	bl	8001b48 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_ETH_DMATxDescListInit+0x20>
 8001190:	2302      	movs	r3, #2
 8001192:	e052      	b.n	800123a <HAL_ETH_DMATxDescListInit+0xc6>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e030      	b.n	8001212 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d208      	bcs.n	8001206 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	015b      	lsls	r3, r3, #5
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	e002      	b.n	800120c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d3ca      	bcc.n	80011b0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f241 0310 	movw	r3, #4112	; 0x1010
 8001224:	440b      	add	r3, r1
 8001226:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_ETH_DMARxDescListInit+0x20>
 8001262:	2302      	movs	r3, #2
 8001264:	e056      	b.n	8001314 <HAL_ETH_DMARxDescListInit+0xce>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e034      	b.n	80012ec <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	015b      	lsls	r3, r3, #5
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800129a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	461a      	mov	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d208      	bcs.n	80012e0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	e002      	b.n	80012e6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3c6      	bcc.n	8001282 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	f241 030c 	movw	r3, #4108	; 0x100c
 80012fe:	440b      	add	r3, r1
 8001300:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ETH_TransmitFrame+0x24>
 8001340:	2302      	movs	r3, #2
 8001342:	e0cd      	b.n	80014e0 <HAL_ETH_TransmitFrame+0x1c0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800136a:	2301      	movs	r3, #1
 800136c:	e0b8      	b.n	80014e0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da09      	bge.n	800138c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2212      	movs	r2, #18
 800137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0a9      	b.n	80014e0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001392:	4293      	cmp	r3, r2
 8001394:	d915      	bls.n	80013c2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_ETH_TransmitFrame+0x1cc>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_ETH_TransmitFrame+0x1cc>)
 80013a6:	fba3 1302 	umull	r1, r3, r3, r2
 80013aa:	0a9b      	lsrs	r3, r3, #10
 80013ac:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e001      	b.n	80013c6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d11c      	bne.n	8001406 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80013da:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013e6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013f6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
 8001404:	e04b      	b.n	800149e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	e044      	b.n	8001496 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800141a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001430:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800143a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3b01      	subs	r3, #1
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	429a      	cmp	r2, r3
 8001444:	d116      	bne.n	8001474 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001454:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <HAL_ETH_TransmitFrame+0x1d0>)
 800145a:	fb02 f203 	mul.w	r2, r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001466:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001472:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001482:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3301      	adds	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3b6      	bcc.n	800140c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80014ba:	4413      	add	r3, r2
 80014bc:	2204      	movs	r2, #4
 80014be:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f241 0304 	movw	r3, #4100	; 0x1004
 80014c8:	4413      	add	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	ac02b00b 	.word	0xac02b00b
 80014f0:	fffffa0c 	.word	0xfffffa0c

080014f4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800150a:	2302      	movs	r3, #2
 800150c:	e074      	b.n	80015f8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800151e:	e05a      	b.n	80015d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d10d      	bne.n	8001552 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
 8001550:	e041      	b.n	80015d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
 8001576:	e02e      	b.n	80015d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	2b01      	cmp	r3, #1
 8001590:	d103      	bne.n	800159a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015a6:	1f1a      	subs	r2, r3, #4
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e010      	b.n	80015f8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db02      	blt.n	80015e6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d99c      	bls.n	8001520 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f241 0314 	movw	r3, #4116	; 0x1014
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b40      	cmp	r3, #64	; 0x40
 800161e:	d112      	bne.n	8001646 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f002 f8f1 	bl	8003808 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f241 0314 	movw	r3, #4116	; 0x1014
 800162e:	4413      	add	r3, r2
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001644:	e01b      	b.n	800167e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f241 0314 	movw	r3, #4116	; 0x1014
 800164e:	4413      	add	r3, r2
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d111      	bne.n	800167e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f839 	bl	80016d2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f241 0314 	movw	r3, #4116	; 0x1014
 8001668:	4413      	add	r3, r2
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f241 0314 	movw	r3, #4116	; 0x1014
 8001686:	4413      	add	r3, r2
 8001688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f241 0314 	movw	r3, #4116	; 0x1014
 8001696:	4413      	add	r3, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800169e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a2:	d112      	bne.n	80016ca <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f81e 	bl	80016e6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	f241 0314 	movw	r3, #4116	; 0x1014
 80016b2:	4413      	add	r3, r2
 80016b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	460b      	mov	r3, r1
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b82      	cmp	r3, #130	; 0x82
 800171a:	d101      	bne.n	8001720 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800171c:	2302      	movs	r3, #2
 800171e:	e050      	b.n	80017c2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2282      	movs	r2, #130	; 0x82
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 031c 	and.w	r3, r3, #28
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8a1b      	ldrh	r3, [r3, #16]
 800173c:	02db      	lsls	r3, r3, #11
 800173e:	b29b      	uxth	r3, r3
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f023 0302 	bic.w	r3, r3, #2
 800175a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800176c:	f7ff fa56 	bl	8000c1c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001772:	e015      	b.n	80017a0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001774:	f7ff fa52 	bl	8000c1c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d309      	bcc.n	8001798 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e014      	b.n	80017c2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e4      	bne.n	8001774 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	460b      	mov	r3, r1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b42      	cmp	r3, #66	; 0x42
 80017ea:	d101      	bne.n	80017f0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e04e      	b.n	800188e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2242      	movs	r2, #66	; 0x42
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8a1b      	ldrh	r3, [r3, #16]
 800180c:	02db      	lsls	r3, r3, #11
 800180e:	b29b      	uxth	r3, r3
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001816:	897b      	ldrh	r3, [r7, #10]
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001846:	f7ff f9e9 	bl	8000c1c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800184c:	e015      	b.n	800187a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800184e:	f7ff f9e5 	bl	8000c1c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d309      	bcc.n	8001872 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e00d      	b.n	800188e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e4      	bne.n	800184e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ETH_Start+0x16>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e01f      	b.n	80018ec <HAL_ETH_Start+0x56>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fb45 	bl	8001f4c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fb7c 	bl	8001fc0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fc13 	bl	80020f4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fbb0 	bl	8002034 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fbdd 	bl	8002094 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ETH_Stop+0x16>
 8001906:	2302      	movs	r3, #2
 8001908:	e01f      	b.n	800194a <HAL_ETH_Stop+0x56>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fba2 	bl	8002064 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fbcf 	bl	80020c4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb67 	bl	8001ffa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fbe1 	bl	80020f4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fb27 	bl	8001f86 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_ETH_ConfigMAC+0x1c>
 800196c:	2302      	movs	r3, #2
 800196e:	e0e4      	b.n	8001b3a <HAL_ETH_ConfigMAC+0x1e6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80b1 	beq.w	8001aea <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4b6c      	ldr	r3, [pc, #432]	; (8001b44 <HAL_ETH_ConfigMAC+0x1f0>)
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80019a0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80019a6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80019ac:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80019b2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80019b8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80019be:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80019c4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80019ca:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80019d0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80019d6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80019dc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80019e2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff f91a 	bl	8000c34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a10:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001a16:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001a1c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001a22:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001a28:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001a2e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a3a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a3c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff f8f4 	bl	8000c34 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a5c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a66:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a84:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a8a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a90:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001a96:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a9c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff f8bd 	bl	8000c34 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff f8aa 	bl	8000c34 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	61da      	str	r2, [r3, #28]
 8001ae8:	e01e      	b.n	8001b28 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001af8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff f88a 	bl	8000c34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	ff20810f 	.word	0xff20810f

08001b48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0b0      	sub	sp, #192	; 0xc0
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b64:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	663b      	str	r3, [r7, #96]	; 0x60
 8001b94:	e001      	b.n	8001b9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001bb4:	2340      	movs	r3, #64	; 0x40
 8001bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c20:	4bab      	ldr	r3, [pc, #684]	; (8001ed0 <ETH_MACDMAConfig+0x388>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c2c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001c30:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001c34:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c3a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c3e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c42:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c48:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c4c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c50:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c54:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c58:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7fe ffd9 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ca0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001ca6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001cac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001cb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001cb8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7fe ffb4 	bl	8000c34 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cd4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cde:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ce8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001cf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d06:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d0c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001d12:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001d18:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d1e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001d24:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d38:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe ff75 	bl	8000c34 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d52:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7fe ff60 	bl	8000c34 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d7c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d86:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d90:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001da2:	2304      	movs	r3, #4
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001dda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <ETH_MACDMAConfig+0x38c>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001de6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001de8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001dec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001dee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001df0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001df2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001df4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001df6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001df8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001dfa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001dfe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e02:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001e06:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e20:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7fe fefe 	bl	8000c34 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e40:	4413      	add	r3, r2
 8001e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e46:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e4c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e50:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e54:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e58:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e5e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e62:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7fe fed7 	bl	8000c34 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e92:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10d      	bne.n	8001eb8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f241 031c 	movw	r3, #4124	; 0x101c
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6811      	ldr	r1, [r2, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <ETH_MACDMAConfig+0x390>)
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	f241 031c 	movw	r3, #4124	; 0x101c
 8001eb4:	440b      	add	r3, r1
 8001eb6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f80b 	bl	8001edc <ETH_MACAddressConfig>
}
 8001ec6:	bf00      	nop
 8001ec8:	37c0      	adds	r7, #192	; 0xc0
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	ff20810f 	.word	0xff20810f
 8001ed4:	f8de3f23 	.word	0xf8de3f23
 8001ed8:	00010040 	.word	0x00010040

08001edc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3305      	adds	r3, #5
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	3204      	adds	r2, #4
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <ETH_MACAddressConfig+0x68>)
 8001efe:	4413      	add	r3, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	061a      	lsls	r2, r3, #24
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3302      	adds	r3, #2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	4313      	orrs	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <ETH_MACAddressConfig+0x6c>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	6013      	str	r3, [r2, #0]
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40028040 	.word	0x40028040
 8001f48:	40028044 	.word	0x40028044

08001f4c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0208 	orr.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7fe fe5f 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7fe fe42 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0204 	orr.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe fe25 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201e:	2001      	movs	r0, #1
 8002020:	f7fe fe08 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f241 0318 	movw	r3, #4120	; 0x1018
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6811      	ldr	r1, [r2, #0]
 800204c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002050:	f241 0318 	movw	r3, #4120	; 0x1018
 8002054:	440b      	add	r3, r1
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	f241 0318 	movw	r3, #4120	; 0x1018
 8002074:	4413      	add	r3, r2
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6811      	ldr	r1, [r2, #0]
 800207c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002080:	f241 0318 	movw	r3, #4120	; 0x1018
 8002084:	440b      	add	r3, r1
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020a4:	4413      	add	r3, r2
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6811      	ldr	r1, [r2, #0]
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020b4:	440b      	add	r3, r1
 80020b6:	601a      	str	r2, [r3, #0]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6811      	ldr	r1, [r2, #0]
 80020dc:	f023 0202 	bic.w	r2, r3, #2
 80020e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80020e4:	440b      	add	r3, r1
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f241 0318 	movw	r3, #4120	; 0x1018
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6811      	ldr	r1, [r2, #0]
 8002110:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002114:	f241 0318 	movw	r3, #4120	; 0x1018
 8002118:	440b      	add	r3, r1
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f241 0318 	movw	r3, #4120	; 0x1018
 8002124:	4413      	add	r3, r2
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe fd82 	bl	8000c34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	f241 0318 	movw	r3, #4120	; 0x1018
 800213a:	440b      	add	r3, r1
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e175      	b.n	8002454 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8164 	bne.w	800244e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d00b      	beq.n	80021a6 <HAL_GPIO_Init+0x5e>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219a:	2b11      	cmp	r3, #17
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x100>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b12      	cmp	r3, #18
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80be 	beq.w	800244e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_GPIO_Init+0x320>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_GPIO_Init+0x320>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_GPIO_Init+0x320>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ea:	4a60      	ldr	r2, [pc, #384]	; (800246c <HAL_GPIO_Init+0x324>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_GPIO_Init+0x328>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d037      	beq.n	8002386 <HAL_GPIO_Init+0x23e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x32c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d031      	beq.n	8002382 <HAL_GPIO_Init+0x23a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a55      	ldr	r2, [pc, #340]	; (8002478 <HAL_GPIO_Init+0x330>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02b      	beq.n	800237e <HAL_GPIO_Init+0x236>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_GPIO_Init+0x334>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d025      	beq.n	800237a <HAL_GPIO_Init+0x232>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a53      	ldr	r2, [pc, #332]	; (8002480 <HAL_GPIO_Init+0x338>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <HAL_GPIO_Init+0x22e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_GPIO_Init+0x33c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x22a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_GPIO_Init+0x340>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x226>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_GPIO_Init+0x344>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x222>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_GPIO_Init+0x348>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x21e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <HAL_GPIO_Init+0x34c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x21a>
 800235e:	2309      	movs	r3, #9
 8002360:	e012      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002362:	230a      	movs	r3, #10
 8002364:	e010      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002366:	2308      	movs	r3, #8
 8002368:	e00e      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800236a:	2307      	movs	r3, #7
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800236e:	2306      	movs	r3, #6
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002398:	4934      	ldr	r1, [pc, #208]	; (800246c <HAL_GPIO_Init+0x324>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <HAL_GPIO_Init+0x350>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ca:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_GPIO_Init+0x350>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_GPIO_Init+0x350>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f4:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_GPIO_Init+0x350>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_GPIO_Init+0x350>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <HAL_GPIO_Init+0x350>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <HAL_GPIO_Init+0x350>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_GPIO_Init+0x350>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f ae86 	bls.w	8002168 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	3724      	adds	r7, #36	; 0x24
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40022000 	.word	0x40022000
 8002494:	40022400 	.word	0x40022400
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_PWREx_EnableOverDrive+0x98>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002552:	f7fe fb63 	bl	8000c1c <HAL_GetTick>
 8002556:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002558:	e009      	b.n	800256e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800255a:	f7fe fb5f 	bl	8000c1c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002568:	d901      	bls.n	800256e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e022      	b.n	80025b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d1ee      	bne.n	800255a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002588:	f7fe fb48 	bl	8000c1c <HAL_GetTick>
 800258c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800258e:	e009      	b.n	80025a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002590:	f7fe fb44 	bl	8000c1c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800259e:	d901      	bls.n	80025a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e007      	b.n	80025b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d1ee      	bne.n	8002590 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e29b      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	4b96      	ldr	r3, [pc, #600]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d00c      	beq.n	800260e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f4:	4b93      	ldr	r3, [pc, #588]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d112      	bne.n	8002626 <HAL_RCC_OscConfig+0x62>
 8002600:	4b90      	ldr	r3, [pc, #576]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260e:	4b8d      	ldr	r3, [pc, #564]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d06c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x130>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d168      	bne.n	80026f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e275      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x7a>
 8002630:	4b84      	ldr	r3, [pc, #528]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a83      	ldr	r2, [pc, #524]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x9c>
 8002646:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7e      	ldr	r2, [pc, #504]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b7c      	ldr	r3, [pc, #496]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7b      	ldr	r2, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xc0>
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a75      	ldr	r2, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a72      	ldr	r2, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xd8>
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6b      	ldr	r2, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe faba 	bl	8000c1c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fab6 	bl	8000c1c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e229      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe faa6 	bl	8000c1c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe faa2 	bl	8000c1c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e215      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x110>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d069      	beq.n	80027d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002702:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x190>
 800271a:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x17a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1e9      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	493d      	ldr	r1, [pc, #244]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e040      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d023      	beq.n	80027a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fa58 	bl	8000c1c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe fa54 	bl	8000c1c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1c7      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4929      	ldr	r1, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
 80027a2:	e018      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fa34 	bl	8000c1c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe fa30 	bl	8000c1c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1a3      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d038      	beq.n	8002854 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d019      	beq.n	800281e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fa11 	bl	8000c1c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fe:	f7fe fa0d 	bl	8000c1c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e180      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x23a>
 800281c:	e01a      	b.n	8002854 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_RCC_OscConfig+0x280>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe f9f7 	bl	8000c1c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002832:	f7fe f9f3 	bl	8000c1c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d903      	bls.n	8002848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e166      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
 8002844:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a4 	beq.w	80029aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a88      	ldr	r2, [pc, #544]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288a:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <HAL_RCC_OscConfig+0x4d4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d118      	bne.n	80028c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <HAL_RCC_OscConfig+0x4d4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7f      	ldr	r2, [pc, #508]	; (8002a98 <HAL_RCC_OscConfig+0x4d4>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7fe f9bb 	bl	8000c1c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7fe f9b7 	bl	8000c1c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	; 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e12a      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x4d4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x31a>
 80028d0:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a6f      	ldr	r2, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	e02d      	b.n	800293a <HAL_RCC_OscConfig+0x376>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x33c>
 80028e6:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	e01c      	b.n	800293a <HAL_RCC_OscConfig+0x376>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x35e>
 8002908:	4b62      	ldr	r3, [pc, #392]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a61      	ldr	r2, [pc, #388]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a5e      	ldr	r2, [pc, #376]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x376>
 8002922:	4b5c      	ldr	r3, [pc, #368]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	4a5b      	ldr	r2, [pc, #364]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6713      	str	r3, [r2, #112]	; 0x70
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d015      	beq.n	800296e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe f96b 	bl	8000c1c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe f967 	bl	8000c1c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0d8      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ee      	beq.n	800294a <HAL_RCC_OscConfig+0x386>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe f955 	bl	8000c1c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe f951 	bl	8000c1c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0c2      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80ae 	beq.w	8002b10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d06d      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d14b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a31      	ldr	r2, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe f922 	bl	8000c1c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe f91e 	bl	8000c1c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e091      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	491b      	ldr	r1, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe f8f0 	bl	8000c1c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe f8ec 	bl	8000c1c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e05f      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x47c>
 8002a5e:	e057      	b.n	8002b10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f8d6 	bl	8000c1c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe f8d2 	bl	8000c1c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e045      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4b0>
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x54c>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_OscConfig+0x558>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d030      	beq.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d129      	bne.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d122      	bne.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d119      	bne.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10f      	bne.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d0      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	4965      	ldr	r1, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d040      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e073      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4936      	ldr	r1, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe f802 	bl	8000c1c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fd fffe 	bl	8000c1c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e053      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d210      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 020f 	bic.w	r2, r3, #15
 8002c5a:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1d4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fdf6 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	080160c4 	.word	0x080160c4
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d007      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x32>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d008      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x38>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 808d 	bne.w	8002e3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d26:	60bb      	str	r3, [r7, #8]
      break;
 8002d28:	e08c      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d2c:	60bb      	str	r3, [r7, #8]
      break;
 8002d2e:	e089      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	ea03 0501 	and.w	r5, r3, r1
 8002d5c:	ea04 0602 	and.w	r6, r4, r2
 8002d60:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d62:	fb02 f106 	mul.w	r1, r2, r6
 8002d66:	2200      	movs	r2, #0
 8002d68:	fb02 f205 	mul.w	r2, r2, r5
 8002d6c:	440a      	add	r2, r1
 8002d6e:	493a      	ldr	r1, [pc, #232]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d70:	fba5 0101 	umull	r0, r1, r5, r1
 8002d74:	1853      	adds	r3, r2, r1
 8002d76:	4619      	mov	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	f7fd faad 	bl	80002e0 <__aeabi_uldivmod>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e049      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	f04f 0400 	mov.w	r4, #0
 8002d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	ea03 0501 	and.w	r5, r3, r1
 8002da4:	ea04 0602 	and.w	r6, r4, r2
 8002da8:	4629      	mov	r1, r5
 8002daa:	4632      	mov	r2, r6
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	0154      	lsls	r4, r2, #5
 8002db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dba:	014b      	lsls	r3, r1, #5
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	1b49      	subs	r1, r1, r5
 8002dc2:	eb62 0206 	sbc.w	r2, r2, r6
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f04f 0400 	mov.w	r4, #0
 8002dce:	0194      	lsls	r4, r2, #6
 8002dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dd4:	018b      	lsls	r3, r1, #6
 8002dd6:	1a5b      	subs	r3, r3, r1
 8002dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	00e2      	lsls	r2, r4, #3
 8002de6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dea:	00d9      	lsls	r1, r3, #3
 8002dec:	460b      	mov	r3, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	195b      	adds	r3, r3, r5
 8002df2:	eb44 0406 	adc.w	r4, r4, r6
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	02a2      	lsls	r2, r4, #10
 8002e00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e04:	0299      	lsls	r1, r3, #10
 8002e06:	460b      	mov	r3, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7fd fa62 	bl	80002e0 <__aeabi_uldivmod>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	60bb      	str	r3, [r7, #8]
      break;
 8002e3c:	e002      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e40:	60bb      	str	r3, [r7, #8]
      break;
 8002e42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e44:	68bb      	ldr	r3, [r7, #8]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	017d7840 	.word	0x017d7840

08002e5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0a9b      	lsrs	r3, r3, #10
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	080160d4 	.word	0x080160d4

08002e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCC_GetClockConfig+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01d      	b.n	8002f4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f815 	bl	8002f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 f986 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_TIM_Base_Start_IT+0x50>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d00b      	beq.n	8002fae <HAL_TIM_Base_Start_IT+0x42>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d007      	beq.n	8002fae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	00010007 	.word	0x00010007

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0202 	mvn.w	r2, #2
 8002fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f905 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8f7 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f908 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8db 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8cd 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8de 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0208 	mvn.w	r2, #8
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8b1 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8a3 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8b4 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0210 	mvn.w	r2, #16
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2208      	movs	r2, #8
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f887 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f879 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f88a 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0201 	mvn.w	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fb82 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f91a 	bl	80033a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317e:	d10e      	bne.n	800319e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d107      	bne.n	800319e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f90d 	bl	80033b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d10e      	bne.n	80031ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f838 	bl	800323a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d10e      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d107      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0220 	mvn.w	r2, #32
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8cd 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <TIM_Base_SetConfig+0x114>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <TIM_Base_SetConfig+0x118>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3c      	ldr	r2, [pc, #240]	; (800336c <TIM_Base_SetConfig+0x11c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <TIM_Base_SetConfig+0x120>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <TIM_Base_SetConfig+0x124>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <TIM_Base_SetConfig+0x114>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d027      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <TIM_Base_SetConfig+0x118>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d023      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	; (800336c <TIM_Base_SetConfig+0x11c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	; (8003370 <TIM_Base_SetConfig+0x120>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a29      	ldr	r2, [pc, #164]	; (8003374 <TIM_Base_SetConfig+0x124>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d017      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <TIM_Base_SetConfig+0x128>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <TIM_Base_SetConfig+0x12c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <TIM_Base_SetConfig+0x130>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <TIM_Base_SetConfig+0x134>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a24      	ldr	r2, [pc, #144]	; (8003388 <TIM_Base_SetConfig+0x138>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a23      	ldr	r2, [pc, #140]	; (800338c <TIM_Base_SetConfig+0x13c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <TIM_Base_SetConfig+0x114>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <TIM_Base_SetConfig+0x124>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40010400 	.word	0x40010400
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800
 8003384:	40001800 	.word	0x40001800
 8003388:	40001c00 	.word	0x40001c00
 800338c:	40002000 	.word	0x40002000

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80033d2:	4ba0      	ldr	r3, [pc, #640]	; (8003654 <MX_LWIP_Init+0x288>)
 80033d4:	22c0      	movs	r2, #192	; 0xc0
 80033d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80033d8:	4b9e      	ldr	r3, [pc, #632]	; (8003654 <MX_LWIP_Init+0x288>)
 80033da:	22a8      	movs	r2, #168	; 0xa8
 80033dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80033de:	4b9d      	ldr	r3, [pc, #628]	; (8003654 <MX_LWIP_Init+0x288>)
 80033e0:	2202      	movs	r2, #2
 80033e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80033e4:	4b9b      	ldr	r3, [pc, #620]	; (8003654 <MX_LWIP_Init+0x288>)
 80033e6:	220a      	movs	r2, #10
 80033e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80033ea:	4b9b      	ldr	r3, [pc, #620]	; (8003658 <MX_LWIP_Init+0x28c>)
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80033f0:	4b99      	ldr	r3, [pc, #612]	; (8003658 <MX_LWIP_Init+0x28c>)
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80033f6:	4b98      	ldr	r3, [pc, #608]	; (8003658 <MX_LWIP_Init+0x28c>)
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80033fc:	4b96      	ldr	r3, [pc, #600]	; (8003658 <MX_LWIP_Init+0x28c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003402:	4b96      	ldr	r3, [pc, #600]	; (800365c <MX_LWIP_Init+0x290>)
 8003404:	22c0      	movs	r2, #192	; 0xc0
 8003406:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003408:	4b94      	ldr	r3, [pc, #592]	; (800365c <MX_LWIP_Init+0x290>)
 800340a:	22a8      	movs	r2, #168	; 0xa8
 800340c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800340e:	4b93      	ldr	r3, [pc, #588]	; (800365c <MX_LWIP_Init+0x290>)
 8003410:	2202      	movs	r2, #2
 8003412:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 255;
 8003414:	4b91      	ldr	r3, [pc, #580]	; (800365c <MX_LWIP_Init+0x290>)
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800341a:	2100      	movs	r1, #0
 800341c:	2000      	movs	r0, #0
 800341e:	f003 fe01 	bl	8007024 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003422:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <MX_LWIP_Init+0x288>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	061a      	lsls	r2, r3, #24
 8003428:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <MX_LWIP_Init+0x288>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	4b88      	ldr	r3, [pc, #544]	; (8003654 <MX_LWIP_Init+0x288>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4313      	orrs	r3, r2
 8003438:	4a86      	ldr	r2, [pc, #536]	; (8003654 <MX_LWIP_Init+0x288>)
 800343a:	78d2      	ldrb	r2, [r2, #3]
 800343c:	4313      	orrs	r3, r2
 800343e:	061a      	lsls	r2, r3, #24
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <MX_LWIP_Init+0x288>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	0619      	lsls	r1, r3, #24
 8003446:	4b83      	ldr	r3, [pc, #524]	; (8003654 <MX_LWIP_Init+0x288>)
 8003448:	785b      	ldrb	r3, [r3, #1]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	4319      	orrs	r1, r3
 800344e:	4b81      	ldr	r3, [pc, #516]	; (8003654 <MX_LWIP_Init+0x288>)
 8003450:	789b      	ldrb	r3, [r3, #2]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	430b      	orrs	r3, r1
 8003456:	497f      	ldr	r1, [pc, #508]	; (8003654 <MX_LWIP_Init+0x288>)
 8003458:	78c9      	ldrb	r1, [r1, #3]
 800345a:	430b      	orrs	r3, r1
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003462:	431a      	orrs	r2, r3
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <MX_LWIP_Init+0x288>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	0619      	lsls	r1, r3, #24
 800346a:	4b7a      	ldr	r3, [pc, #488]	; (8003654 <MX_LWIP_Init+0x288>)
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	4319      	orrs	r1, r3
 8003472:	4b78      	ldr	r3, [pc, #480]	; (8003654 <MX_LWIP_Init+0x288>)
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	430b      	orrs	r3, r1
 800347a:	4976      	ldr	r1, [pc, #472]	; (8003654 <MX_LWIP_Init+0x288>)
 800347c:	78c9      	ldrb	r1, [r1, #3]
 800347e:	430b      	orrs	r3, r1
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003486:	431a      	orrs	r2, r3
 8003488:	4b72      	ldr	r3, [pc, #456]	; (8003654 <MX_LWIP_Init+0x288>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	0619      	lsls	r1, r3, #24
 800348e:	4b71      	ldr	r3, [pc, #452]	; (8003654 <MX_LWIP_Init+0x288>)
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	4319      	orrs	r1, r3
 8003496:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <MX_LWIP_Init+0x288>)
 8003498:	789b      	ldrb	r3, [r3, #2]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	430b      	orrs	r3, r1
 800349e:	496d      	ldr	r1, [pc, #436]	; (8003654 <MX_LWIP_Init+0x288>)
 80034a0:	78c9      	ldrb	r1, [r1, #3]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <MX_LWIP_Init+0x294>)
 80034aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	061a      	lsls	r2, r3, #24
 80034b2:	4b69      	ldr	r3, [pc, #420]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	431a      	orrs	r2, r3
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034bc:	789b      	ldrb	r3, [r3, #2]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	4313      	orrs	r3, r2
 80034c2:	4a65      	ldr	r2, [pc, #404]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034c4:	78d2      	ldrb	r2, [r2, #3]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	061a      	lsls	r2, r3, #24
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	0619      	lsls	r1, r3, #24
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	4319      	orrs	r1, r3
 80034d8:	4b5f      	ldr	r3, [pc, #380]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034da:	789b      	ldrb	r3, [r3, #2]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	430b      	orrs	r3, r1
 80034e0:	495d      	ldr	r1, [pc, #372]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034e2:	78c9      	ldrb	r1, [r1, #3]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034ec:	431a      	orrs	r2, r3
 80034ee:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	0619      	lsls	r1, r3, #24
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	4319      	orrs	r1, r3
 80034fc:	4b56      	ldr	r3, [pc, #344]	; (8003658 <MX_LWIP_Init+0x28c>)
 80034fe:	789b      	ldrb	r3, [r3, #2]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	430b      	orrs	r3, r1
 8003504:	4954      	ldr	r1, [pc, #336]	; (8003658 <MX_LWIP_Init+0x28c>)
 8003506:	78c9      	ldrb	r1, [r1, #3]
 8003508:	430b      	orrs	r3, r1
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003510:	431a      	orrs	r2, r3
 8003512:	4b51      	ldr	r3, [pc, #324]	; (8003658 <MX_LWIP_Init+0x28c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0619      	lsls	r1, r3, #24
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <MX_LWIP_Init+0x28c>)
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	4319      	orrs	r1, r3
 8003520:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <MX_LWIP_Init+0x28c>)
 8003522:	789b      	ldrb	r3, [r3, #2]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	430b      	orrs	r3, r1
 8003528:	494b      	ldr	r1, [pc, #300]	; (8003658 <MX_LWIP_Init+0x28c>)
 800352a:	78c9      	ldrb	r1, [r1, #3]
 800352c:	430b      	orrs	r3, r1
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	4313      	orrs	r3, r2
 8003532:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <MX_LWIP_Init+0x298>)
 8003534:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003536:	4b49      	ldr	r3, [pc, #292]	; (800365c <MX_LWIP_Init+0x290>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	061a      	lsls	r2, r3, #24
 800353c:	4b47      	ldr	r3, [pc, #284]	; (800365c <MX_LWIP_Init+0x290>)
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <MX_LWIP_Init+0x290>)
 8003546:	789b      	ldrb	r3, [r3, #2]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	4313      	orrs	r3, r2
 800354c:	4a43      	ldr	r2, [pc, #268]	; (800365c <MX_LWIP_Init+0x290>)
 800354e:	78d2      	ldrb	r2, [r2, #3]
 8003550:	4313      	orrs	r3, r2
 8003552:	061a      	lsls	r2, r3, #24
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <MX_LWIP_Init+0x290>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	0619      	lsls	r1, r3, #24
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <MX_LWIP_Init+0x290>)
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	4319      	orrs	r1, r3
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <MX_LWIP_Init+0x290>)
 8003564:	789b      	ldrb	r3, [r3, #2]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	430b      	orrs	r3, r1
 800356a:	493c      	ldr	r1, [pc, #240]	; (800365c <MX_LWIP_Init+0x290>)
 800356c:	78c9      	ldrb	r1, [r1, #3]
 800356e:	430b      	orrs	r3, r1
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003576:	431a      	orrs	r2, r3
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <MX_LWIP_Init+0x290>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	0619      	lsls	r1, r3, #24
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <MX_LWIP_Init+0x290>)
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	4319      	orrs	r1, r3
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <MX_LWIP_Init+0x290>)
 8003588:	789b      	ldrb	r3, [r3, #2]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	430b      	orrs	r3, r1
 800358e:	4933      	ldr	r1, [pc, #204]	; (800365c <MX_LWIP_Init+0x290>)
 8003590:	78c9      	ldrb	r1, [r1, #3]
 8003592:	430b      	orrs	r3, r1
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800359a:	431a      	orrs	r2, r3
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <MX_LWIP_Init+0x290>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	0619      	lsls	r1, r3, #24
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <MX_LWIP_Init+0x290>)
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	4319      	orrs	r1, r3
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <MX_LWIP_Init+0x290>)
 80035ac:	789b      	ldrb	r3, [r3, #2]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	430b      	orrs	r3, r1
 80035b2:	492a      	ldr	r1, [pc, #168]	; (800365c <MX_LWIP_Init+0x290>)
 80035b4:	78c9      	ldrb	r1, [r1, #3]
 80035b6:	430b      	orrs	r3, r1
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	4313      	orrs	r3, r2
 80035bc:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <MX_LWIP_Init+0x29c>)
 80035be:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <MX_LWIP_Init+0x2a0>)
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <MX_LWIP_Init+0x2a4>)
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <MX_LWIP_Init+0x29c>)
 80035ce:	4a25      	ldr	r2, [pc, #148]	; (8003664 <MX_LWIP_Init+0x298>)
 80035d0:	4923      	ldr	r1, [pc, #140]	; (8003660 <MX_LWIP_Init+0x294>)
 80035d2:	4828      	ldr	r0, [pc, #160]	; (8003674 <MX_LWIP_Init+0x2a8>)
 80035d4:	f004 faaa 	bl	8007b2c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80035d8:	4826      	ldr	r0, [pc, #152]	; (8003674 <MX_LWIP_Init+0x2a8>)
 80035da:	f004 fc59 	bl	8007e90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80035de:	4b25      	ldr	r3, [pc, #148]	; (8003674 <MX_LWIP_Init+0x2a8>)
 80035e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80035f0:	4820      	ldr	r0, [pc, #128]	; (8003674 <MX_LWIP_Init+0x2a8>)
 80035f2:	f004 fc5d 	bl	8007eb0 <netif_set_up>
 80035f6:	e002      	b.n	80035fe <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80035f8:	481e      	ldr	r0, [pc, #120]	; (8003674 <MX_LWIP_Init+0x2a8>)
 80035fa:	f004 fcc5 	bl	8007f88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80035fe:	491e      	ldr	r1, [pc, #120]	; (8003678 <MX_LWIP_Init+0x2ac>)
 8003600:	481c      	ldr	r0, [pc, #112]	; (8003674 <MX_LWIP_Init+0x2a8>)
 8003602:	f004 fd57 	bl	80080b4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800360e:	f107 0320 	add.w	r3, r7, #32
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fd97 	bl	8004148 <osSemaphoreCreate>
 800361a:	4602      	mov	r2, r0
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_LWIP_Init+0x2b0>)
 800361e:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_LWIP_Init+0x2b4>)
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <MX_LWIP_Init+0x2a8>)
 8003624:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <MX_LWIP_Init+0x2b0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a15      	ldr	r2, [pc, #84]	; (8003680 <MX_LWIP_Init+0x2b4>)
 800362c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <MX_LWIP_Init+0x2b8>)
 8003630:	1d3c      	adds	r4, r7, #4
 8003632:	461d      	mov	r5, r3
 8003634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800363c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	490f      	ldr	r1, [pc, #60]	; (8003680 <MX_LWIP_Init+0x2b4>)
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fc82 	bl	8003f4e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	; 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bdb0      	pop	{r4, r5, r7, pc}
 8003652:	bf00      	nop
 8003654:	20008fdc 	.word	0x20008fdc
 8003658:	20008fd8 	.word	0x20008fd8
 800365c:	20008f9c 	.word	0x20008f9c
 8003660:	20008fd4 	.word	0x20008fd4
 8003664:	20008fe0 	.word	0x20008fe0
 8003668:	20008fe4 	.word	0x20008fe4
 800366c:	08006f61 	.word	0x08006f61
 8003670:	08003cdd 	.word	0x08003cdd
 8003674:	20008fa0 	.word	0x20008fa0
 8003678:	08003dc1 	.word	0x08003dc1
 800367c:	200008fc 	.word	0x200008fc
 8003680:	20008f94 	.word	0x20008f94
 8003684:	0801353c 	.word	0x0801353c

08003688 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	; 0x38
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_ETH_MspInit+0x168>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 809e 	bne.w	80037e8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036ac:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a50      	ldr	r2, [pc, #320]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b6:	6313      	str	r3, [r2, #48]	; 0x30
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036ce:	6313      	str	r3, [r2, #48]	; 0x30
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a44      	ldr	r2, [pc, #272]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a3e      	ldr	r2, [pc, #248]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6313      	str	r3, [r2, #48]	; 0x30
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	4a32      	ldr	r2, [pc, #200]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	6313      	str	r3, [r2, #48]	; 0x30
 8003730:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 8003742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003746:	6313      	str	r3, [r2, #48]	; 0x30
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_ETH_MspInit+0x16c>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003754:	2332      	movs	r3, #50	; 0x32
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003764:	230b      	movs	r3, #11
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	4822      	ldr	r0, [pc, #136]	; (80037f8 <HAL_ETH_MspInit+0x170>)
 8003770:	f7fe fcea 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003774:	2386      	movs	r3, #134	; 0x86
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003784:	230b      	movs	r3, #11
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378c:	4619      	mov	r1, r3
 800378e:	481b      	ldr	r0, [pc, #108]	; (80037fc <HAL_ETH_MspInit+0x174>)
 8003790:	f7fe fcda 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	2303      	movs	r3, #3
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037a6:	230b      	movs	r3, #11
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	4813      	ldr	r0, [pc, #76]	; (8003800 <HAL_ETH_MspInit+0x178>)
 80037b2:	f7fe fcc9 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80037b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037c8:	230b      	movs	r3, #11
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	480c      	ldr	r0, [pc, #48]	; (8003804 <HAL_ETH_MspInit+0x17c>)
 80037d4:	f7fe fcb8 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2105      	movs	r1, #5
 80037dc:	203d      	movs	r0, #61	; 0x3d
 80037de:	f7fd fb03 	bl	8000de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80037e2:	203d      	movs	r0, #61	; 0x3d
 80037e4:	f7fd fb1c 	bl	8000e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80037e8:	bf00      	nop
 80037ea:	3738      	adds	r7, #56	; 0x38
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40028000 	.word	0x40028000
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40021800 	.word	0x40021800

08003808 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <HAL_ETH_RxCpltCallback+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fd19 	bl	800424c <osSemaphoreRelease>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000900 	.word	0x20000900

08003828 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003828:	b5b0      	push	{r4, r5, r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003834:	4b60      	ldr	r3, [pc, #384]	; (80039b8 <low_level_init+0x190>)
 8003836:	4a61      	ldr	r2, [pc, #388]	; (80039bc <low_level_init+0x194>)
 8003838:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800383a:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <low_level_init+0x190>)
 800383c:	2201      	movs	r2, #1
 800383e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003840:	4b5d      	ldr	r3, [pc, #372]	; (80039b8 <low_level_init+0x190>)
 8003842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003846:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <low_level_init+0x190>)
 800384a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <low_level_init+0x190>)
 8003852:	2200      	movs	r2, #0
 8003854:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003862:	23e1      	movs	r3, #225	; 0xe1
 8003864:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800387a:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <low_level_init+0x190>)
 800387c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003880:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003882:	4b4d      	ldr	r3, [pc, #308]	; (80039b8 <low_level_init+0x190>)
 8003884:	2201      	movs	r2, #1
 8003886:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <low_level_init+0x190>)
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800388e:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <low_level_init+0x190>)
 8003890:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003894:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003896:	4848      	ldr	r0, [pc, #288]	; (80039b8 <low_level_init+0x190>)
 8003898:	f7fd fad0 	bl	8000e3c <HAL_ETH_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80038a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80038bc:	2304      	movs	r3, #4
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <low_level_init+0x198>)
 80038c0:	4940      	ldr	r1, [pc, #256]	; (80039c4 <low_level_init+0x19c>)
 80038c2:	483d      	ldr	r0, [pc, #244]	; (80039b8 <low_level_init+0x190>)
 80038c4:	f7fd fc56 	bl	8001174 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80038c8:	2304      	movs	r3, #4
 80038ca:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <low_level_init+0x1a0>)
 80038cc:	493f      	ldr	r1, [pc, #252]	; (80039cc <low_level_init+0x1a4>)
 80038ce:	483a      	ldr	r0, [pc, #232]	; (80039b8 <low_level_init+0x190>)
 80038d0:	f7fd fcb9 	bl	8001246 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2206      	movs	r2, #6
 80038d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <low_level_init+0x190>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <low_level_init+0x190>)
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	785a      	ldrb	r2, [r3, #1]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80038f4:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <low_level_init+0x190>)
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	789a      	ldrb	r2, [r3, #2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <low_level_init+0x190>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	78da      	ldrb	r2, [r3, #3]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800390c:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <low_level_init+0x190>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	791a      	ldrb	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <low_level_init+0x190>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	795a      	ldrb	r2, [r3, #5]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800392a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003932:	f043 030a 	orr.w	r3, r3, #10
 8003936:	b2da      	uxtb	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800393e:	2300      	movs	r3, #0
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fbfb 	bl	8004148 <osSemaphoreCreate>
 8003952:	4602      	mov	r2, r0
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <low_level_init+0x1a8>)
 8003956:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <low_level_init+0x1ac>)
 800395a:	f107 040c 	add.w	r4, r7, #12
 800395e:	461d      	mov	r5, r3
 8003960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 faeb 	bl	8003f4e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003978:	480f      	ldr	r0, [pc, #60]	; (80039b8 <low_level_init+0x190>)
 800397a:	f7fd ff8c 	bl	8001896 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800397e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003982:	461a      	mov	r2, r3
 8003984:	211d      	movs	r1, #29
 8003986:	480c      	ldr	r0, [pc, #48]	; (80039b8 <low_level_init+0x190>)
 8003988:	f7fd feb7 	bl	80016fa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	f043 030b 	orr.w	r3, r3, #11
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	461a      	mov	r2, r3
 8003998:	211d      	movs	r1, #29
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <low_level_init+0x190>)
 800399c:	f7fd ff15 	bl	80017ca <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80039a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039a4:	461a      	mov	r2, r3
 80039a6:	211d      	movs	r1, #29
 80039a8:	4803      	ldr	r0, [pc, #12]	; (80039b8 <low_level_init+0x190>)
 80039aa:	f7fd fea6 	bl	80016fa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80039ae:	bf00      	nop
 80039b0:	3740      	adds	r7, #64	; 0x40
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bdb0      	pop	{r4, r5, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	2000a8b8 	.word	0x2000a8b8
 80039bc:	40028000 	.word	0x40028000
 80039c0:	2000a900 	.word	0x2000a900
 80039c4:	20008fe8 	.word	0x20008fe8
 80039c8:	20009068 	.word	0x20009068
 80039cc:	2000a838 	.word	0x2000a838
 80039d0:	20000900 	.word	0x20000900
 80039d4:	08013560 	.word	0x08013560

080039d8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80039e2:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <low_level_output+0x138>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <low_level_output+0x138>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	e05a      	b.n	8003ac0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da03      	bge.n	8003a1a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a12:	23f8      	movs	r3, #248	; 0xf8
 8003a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a18:	e05c      	b.n	8003ad4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	895b      	ldrh	r3, [r3, #10]
 8003a1e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a24:	e02f      	b.n	8003a86 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	18d0      	adds	r0, r2, r3
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	18d1      	adds	r1, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f00e fdda 	bl	80125f6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da03      	bge.n	8003a58 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a50:	23f8      	movs	r3, #248	; 0xf8
 8003a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a56:	e03d      	b.n	8003ad4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a68:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a74:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a80:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d8c8      	bhi.n	8003a26 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	18d0      	adds	r0, r2, r3
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f00e fda6 	bl	80125f6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1a1      	bne.n	8003a0a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	4811      	ldr	r0, [pc, #68]	; (8003b10 <low_level_output+0x138>)
 8003aca:	f7fd fc29 	bl	8001320 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <low_level_output+0x138>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	f241 0314 	movw	r3, #4116	; 0x1014
 8003adc:	4413      	add	r3, r2
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <low_level_output+0x138>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	f241 0314 	movw	r3, #4116	; 0x1014
 8003af0:	4413      	add	r3, r2
 8003af2:	2220      	movs	r2, #32
 8003af4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <low_level_output+0x138>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f241 0304 	movw	r3, #4100	; 0x1004
 8003afe:	4413      	add	r3, r2
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000a8b8 	.word	0x2000a8b8

08003b14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003b38:	484f      	ldr	r0, [pc, #316]	; (8003c78 <low_level_input+0x164>)
 8003b3a:	f7fd fcdb 	bl	80014f4 <HAL_ETH_GetReceivedFrame_IT>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <low_level_input+0x34>

    return NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e092      	b.n	8003c6e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <low_level_input+0x164>)
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	; (8003c78 <low_level_input+0x164>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b5a:	89fb      	ldrh	r3, [r7, #14]
 8003b5c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003b60:	4619      	mov	r1, r3
 8003b62:	2000      	movs	r0, #0
 8003b64:	f004 fb70 	bl	8008248 <pbuf_alloc>
 8003b68:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d04b      	beq.n	8003c08 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b70:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <low_level_input+0x164>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7e:	e040      	b.n	8003c02 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	895b      	ldrh	r3, [r3, #10]
 8003b84:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b8a:	e021      	b.n	8003bd0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	18d0      	adds	r0, r2, r3
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	18d1      	adds	r1, r2, r3
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f00e fd27 	bl	80125f6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003bbe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bca:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d8d6      	bhi.n	8003b8c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	18d0      	adds	r0, r2, r3
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f00e fd01 	bl	80125f6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1bb      	bne.n	8003b80 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <low_level_input+0x164>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e00b      	b.n	8003c2c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <low_level_input+0x164>)
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3ee      	bcc.n	8003c14 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <low_level_input+0x164>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <low_level_input+0x164>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c44:	4413      	add	r3, r2
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <low_level_input+0x164>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c58:	4413      	add	r3, r2
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <low_level_input+0x164>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f241 0308 	movw	r3, #4104	; 0x1008
 8003c66:	4413      	add	r3, r2
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3730      	adds	r7, #48	; 0x30
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	2000a8b8 	.word	0x2000a8b8

08003c7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <ethernetif_input+0x58>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fa8d 	bl	80041b0 <osSemaphoreWait>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f5      	bne.n	8003c88 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003c9c:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <ethernetif_input+0x5c>)
 8003c9e:	f00d fed5 	bl	8011a4c <sys_mutex_lock>
        p = low_level_input( netif );
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff ff36 	bl	8003b14 <low_level_input>
 8003ca8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	68b8      	ldr	r0, [r7, #8]
 8003cb8:	4798      	blx	r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003cc0:	68b8      	ldr	r0, [r7, #8]
 8003cc2:	f004 fda1 	bl	8008808 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003cc6:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <ethernetif_input+0x5c>)
 8003cc8:	f00d fecf 	bl	8011a6a <sys_mutex_unlock>
      } while(p!=NULL);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e4      	bne.n	8003c9c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003cd2:	e7d9      	b.n	8003c88 <ethernetif_input+0xc>
 8003cd4:	20000900 	.word	0x20000900
 8003cd8:	2000c0d0 	.word	0x2000c0d0

08003cdc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <ethernetif_init+0x1c>
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <ethernetif_init+0x48>)
 8003cec:	f240 2235 	movw	r2, #565	; 0x235
 8003cf0:	490d      	ldr	r1, [pc, #52]	; (8003d28 <ethernetif_init+0x4c>)
 8003cf2:	480e      	ldr	r0, [pc, #56]	; (8003d2c <ethernetif_init+0x50>)
 8003cf4:	f00e ff5a 	bl	8012bac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2273      	movs	r2, #115	; 0x73
 8003cfc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2274      	movs	r2, #116	; 0x74
 8003d04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <ethernetif_init+0x54>)
 8003d0c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <ethernetif_init+0x58>)
 8003d12:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fd87 	bl	8003828 <low_level_init>

  return ERR_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	0801357c 	.word	0x0801357c
 8003d28:	08013598 	.word	0x08013598
 8003d2c:	080135a8 	.word	0x080135a8
 8003d30:	0800fc05 	.word	0x0800fc05
 8003d34:	080039d9 	.word	0x080039d9

08003d38 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d3c:	f7fc ff6e 	bl	8000c1c <HAL_GetTick>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4816      	ldr	r0, [pc, #88]	; (8003dbc <ethernetif_set_link+0x74>)
 8003d62:	f7fd fcca 	bl	80016fa <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d108      	bne.n	8003d90 <ethernetif_set_link+0x48>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 f92f 	bl	8007fec <netif_set_link_up>
 8003d8e:	e011      	b.n	8003db4 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <ethernetif_set_link+0x6c>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 f950 	bl	8008054 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003db4:	20c8      	movs	r0, #200	; 0xc8
 8003db6:	f000 f916 	bl	8003fe6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003dba:	e7cd      	b.n	8003d58 <ethernetif_set_link+0x10>
 8003dbc:	2000a8b8 	.word	0x2000a8b8

08003dc0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d05d      	beq.n	8003e9e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d03f      	beq.n	8003e6a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dee:	2100      	movs	r1, #0
 8003df0:	4830      	ldr	r0, [pc, #192]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003df2:	f7fd fcea 	bl	80017ca <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fc ff11 	bl	8000c1c <HAL_GetTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	461a      	mov	r2, r3
 8003e04:	2101      	movs	r1, #1
 8003e06:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e08:	f7fd fc77 	bl	80016fa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003e0c:	f7fc ff06 	bl	8000c1c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1a:	d828      	bhi.n	8003e6e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0eb      	beq.n	8003dfe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	211f      	movs	r1, #31
 8003e2e:	4821      	ldr	r0, [pc, #132]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e30:	f7fd fc63 	bl	80016fa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e002      	b.n	8003e4e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e016      	b.n	8003e8e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	e011      	b.n	8003e8e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <ethernetif_update_config+0xb0>
          goto error;
 8003e6e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	480a      	ldr	r0, [pc, #40]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e8a:	f7fd fc9e 	bl	80017ca <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e92:	f7fd fd5f 	bl	8001954 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003e96:	4807      	ldr	r0, [pc, #28]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003e98:	f7fd fcfd 	bl	8001896 <HAL_ETH_Start>
 8003e9c:	e002      	b.n	8003ea4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003e9e:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <ethernetif_update_config+0xf4>)
 8003ea0:	f7fd fd28 	bl	80018f4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f807 	bl	8003eb8 <ethernetif_notify_conn_changed>
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000a8b8 	.word	0x2000a8b8

08003eb8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ede:	2b84      	cmp	r3, #132	; 0x84
 8003ee0:	d005      	beq.n	8003eee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3303      	adds	r3, #3
 8003eec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f02:	f3ef 8305 	mrs	r3, IPSR
 8003f06:	607b      	str	r3, [r7, #4]
  return(result);
 8003f08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f24:	f001 fc90 	bl	8005848 <vTaskStartScheduler>
  
  return osOK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003f32:	f7ff ffe3 	bl	8003efc <inHandlerMode>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003f3c:	f001 fda2 	bl	8005a84 <xTaskGetTickCountFromISR>
 8003f40:	4603      	mov	r3, r0
 8003f42:	e002      	b.n	8003f4a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003f44:	f001 fd8e 	bl	8005a64 <xTaskGetTickCount>
 8003f48:	4603      	mov	r3, r0
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f50:	b089      	sub	sp, #36	; 0x24
 8003f52:	af04      	add	r7, sp, #16
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <osThreadCreate+0x54>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01c      	beq.n	8003fa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685c      	ldr	r4, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681d      	ldr	r5, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691e      	ldr	r6, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ffa6 	bl	8003ecc <makeFreeRtosPriority>
 8003f80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	9100      	str	r1, [sp, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4632      	mov	r2, r6
 8003f94:	4629      	mov	r1, r5
 8003f96:	4620      	mov	r0, r4
 8003f98:	f001 fa81 	bl	800549e <xTaskCreateStatic>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e01c      	b.n	8003fdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685c      	ldr	r4, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fae:	b29e      	uxth	r6, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff88 	bl	8003ecc <makeFreeRtosPriority>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	9200      	str	r2, [sp, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	4632      	mov	r2, r6
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f001 fac6 	bl	800555e <xTaskCreate>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fe6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <osDelay+0x16>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	e000      	b.n	8003ffe <osDelay+0x18>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 fbec 	bl	80057dc <vTaskDelay>
  
  return osOK;
 8004004:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	2001      	movs	r0, #1
 8004026:	f000 fc52 	bl	80048ce <xQueueCreateMutexStatic>
 800402a:	4603      	mov	r3, r0
 800402c:	e003      	b.n	8004036 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800402e:	2001      	movs	r0, #1
 8004030:	f000 fc35 	bl	800489e <xQueueCreateMutex>
 8004034:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <osMutexWait+0x18>
    return osErrorParameter;
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	e03a      	b.n	80040ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d103      	bne.n	800406c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e009      	b.n	8004080 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <osMutexWait+0x40>
      ticks = 1;
 800407c:	2301      	movs	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004080:	f7ff ff3c 	bl	8003efc <inHandlerMode>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	461a      	mov	r2, r3
 8004090:	2100      	movs	r1, #0
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 f858 	bl	8005148 <xQueueReceiveFromISR>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <osMutexWait+0x62>
      return osErrorOS;
 800409e:	23ff      	movs	r3, #255	; 0xff
 80040a0:	e015      	b.n	80040ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d011      	beq.n	80040cc <osMutexWait+0x8c>
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <osMutexWait+0x98>)
 80040aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	e008      	b.n	80040cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 ff33 	bl	8004f28 <xQueueSemaphoreTake>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d001      	beq.n	80040cc <osMutexWait+0x8c>
    return osErrorOS;
 80040c8:	23ff      	movs	r3, #255	; 0xff
 80040ca:	e000      	b.n	80040ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80040ec:	f7ff ff06 	bl	8003efc <inHandlerMode>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fd9f 	bl	8004c40 <xQueueGiveFromISR>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <osMutexRelease+0x30>
      return osErrorOS;
 8004108:	23ff      	movs	r3, #255	; 0xff
 800410a:	e017      	b.n	800413c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d013      	beq.n	800413a <osMutexRelease+0x5e>
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <osMutexRelease+0x68>)
 8004114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	e00a      	b.n	800413a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004124:	2300      	movs	r3, #0
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fbea 	bl	8004904 <xQueueGenericSend>
 8004130:	4603      	mov	r3, r0
 8004132:	2b01      	cmp	r3, #1
 8004134:	d001      	beq.n	800413a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004136:	23ff      	movs	r3, #255	; 0xff
 8004138:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10b      	bne.n	8004178 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2303      	movs	r3, #3
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	2001      	movs	r0, #1
 8004170:	f000 fa9e 	bl	80046b0 <xQueueGenericCreateStatic>
 8004174:	4603      	mov	r3, r0
 8004176:	e016      	b.n	80041a6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	e014      	b.n	80041a6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d110      	bne.n	80041a4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004182:	2203      	movs	r2, #3
 8004184:	2100      	movs	r1, #0
 8004186:	2001      	movs	r0, #1
 8004188:	f000 fb0f 	bl	80047aa <xQueueGenericCreate>
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <osSemaphoreCreate+0x58>
 8004194:	2300      	movs	r3, #0
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fbb2 	bl	8004904 <xQueueGenericSend>
      return sema;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	e000      	b.n	80041a6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80041a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	e03a      	b.n	800423e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d103      	bne.n	80041dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e009      	b.n	80041f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80041f0:	f7ff fe84 	bl	8003efc <inHandlerMode>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d017      	beq.n	800422a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	461a      	mov	r2, r3
 8004200:	2100      	movs	r1, #0
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 ffa0 	bl	8005148 <xQueueReceiveFromISR>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <osSemaphoreWait+0x62>
      return osErrorOS;
 800420e:	23ff      	movs	r3, #255	; 0xff
 8004210:	e015      	b.n	800423e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <osSemaphoreWait+0x8c>
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <osSemaphoreWait+0x98>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	e008      	b.n	800423c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fe7b 	bl	8004f28 <xQueueSemaphoreTake>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004238:	23ff      	movs	r3, #255	; 0xff
 800423a:	e000      	b.n	800423e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800425c:	f7ff fe4e 	bl	8003efc <inHandlerMode>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fce7 	bl	8004c40 <xQueueGiveFromISR>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004278:	23ff      	movs	r3, #255	; 0xff
 800427a:	e017      	b.n	80042ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d013      	beq.n	80042aa <osSemaphoreRelease+0x5e>
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <osSemaphoreRelease+0x68>)
 8004284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	e00a      	b.n	80042aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004294:	2300      	movs	r3, #0
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fb32 	bl	8004904 <xQueueGenericSend>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80042a6:	23ff      	movs	r3, #255	; 0xff
 80042a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <osMessageCreate+0x38>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68dc      	ldr	r4, [r3, #12]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4623      	mov	r3, r4
 80042e8:	f000 f9e2 	bl	80046b0 <xQueueGenericCreateStatic>
 80042ec:	4603      	mov	r3, r0
 80042ee:	e008      	b.n	8004302 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	4619      	mov	r1, r3
 80042fc:	f000 fa55 	bl	80047aa <xQueueGenericCreate>
 8004300:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bd90      	pop	{r4, r7, pc}
	...

0800430c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <osMessagePut+0x1e>
    ticks = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800432a:	f7ff fde7 	bl	8003efc <inHandlerMode>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d018      	beq.n	8004366 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004334:	f107 0210 	add.w	r2, r7, #16
 8004338:	f107 0108 	add.w	r1, r7, #8
 800433c:	2300      	movs	r3, #0
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fbe2 	bl	8004b08 <xQueueGenericSendFromISR>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <osMessagePut+0x42>
      return osErrorOS;
 800434a:	23ff      	movs	r3, #255	; 0xff
 800434c:	e018      	b.n	8004380 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d014      	beq.n	800437e <osMessagePut+0x72>
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <osMessagePut+0x7c>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	e00b      	b.n	800437e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004366:	f107 0108 	add.w	r1, r7, #8
 800436a:	2300      	movs	r3, #0
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fac8 	bl	8004904 <xQueueGenericSend>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <osMessagePut+0x72>
      return osErrorOS;
 800437a:	23ff      	movs	r3, #255	; 0xff
 800437c:	e000      	b.n	8004380 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b08b      	sub	sp, #44	; 0x2c
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	617b      	str	r3, [r7, #20]
    return event;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	461c      	mov	r4, r3
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ba:	e054      	b.n	8004466 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d103      	bne.n	80043d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e009      	b.n	80043e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <osMessageGet+0x5c>
      ticks = 1;
 80043e4:	2301      	movs	r3, #1
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80043e8:	f7ff fd88 	bl	8003efc <inHandlerMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01c      	beq.n	800442c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80043f2:	f107 0220 	add.w	r2, r7, #32
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	68b8      	ldr	r0, [r7, #8]
 8004400:	f000 fea2 	bl	8005148 <xQueueReceiveFromISR>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800440a:	2310      	movs	r3, #16
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e001      	b.n	8004414 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01d      	beq.n	8004456 <osMessageGet+0xca>
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <osMessageGet+0xe4>)
 800441c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	e014      	b.n	8004456 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	3304      	adds	r3, #4
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4619      	mov	r1, r3
 8004436:	68b8      	ldr	r0, [r7, #8]
 8004438:	f000 fc94 	bl	8004d64 <xQueueReceive>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004442:	2310      	movs	r3, #16
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e006      	b.n	8004456 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <osMessageGet+0xc6>
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <osMessageGet+0xc8>
 8004452:	2340      	movs	r3, #64	; 0x40
 8004454:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	461c      	mov	r4, r3
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	372c      	adds	r7, #44	; 0x2c
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
 800446e:	bf00      	nop
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0208 	add.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f103 0208 	add.w	r2, r3, #8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f103 0208 	add.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d103      	bne.n	8004536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00c      	b.n	8004550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3308      	adds	r3, #8
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e002      	b.n	8004544 <vListInsert+0x2e>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	429a      	cmp	r2, r3
 800454e:	d2f6      	bcs.n	800453e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6852      	ldr	r2, [r2, #4]
 80045a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d103      	bne.n	80045bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	1e5a      	subs	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	b672      	cpsid	i
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	b662      	cpsie	i
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	e7fe      	b.n	8004606 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004608:	f002 f8b6 	bl	8006778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	3b01      	subs	r3, #1
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	441a      	add	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	22ff      	movs	r2, #255	; 0xff
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	22ff      	movs	r2, #255	; 0xff
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d114      	bne.n	8004688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01a      	beq.n	800469c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3310      	adds	r3, #16
 800466a:	4618      	mov	r0, r3
 800466c:	f001 fb7e 	bl	8005d6c <xTaskRemoveFromEventList>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d012      	beq.n	800469c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <xQueueGenericReset+0xd0>)
 8004678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	e009      	b.n	800469c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3310      	adds	r3, #16
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fef1 	bl	8004474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3324      	adds	r3, #36	; 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff feec 	bl	8004474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800469c:	f002 f89e 	bl	80067dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046a0:	2301      	movs	r3, #1
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	; 0x38
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <xQueueGenericCreateStatic+0x2c>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	b672      	cpsid	i
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	b662      	cpsie	i
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046da:	e7fe      	b.n	80046da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <xQueueGenericCreateStatic+0x4a>
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	b672      	cpsid	i
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	b662      	cpsie	i
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <xQueueGenericCreateStatic+0x56>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <xQueueGenericCreateStatic+0x5a>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <xQueueGenericCreateStatic+0x5c>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <xQueueGenericCreateStatic+0x78>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	b672      	cpsid	i
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	b662      	cpsie	i
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	e7fe      	b.n	8004726 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <xQueueGenericCreateStatic+0x84>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <xQueueGenericCreateStatic+0x88>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <xQueueGenericCreateStatic+0x8a>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <xQueueGenericCreateStatic+0xa6>
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	b672      	cpsid	i
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	b662      	cpsie	i
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e7fe      	b.n	8004754 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004756:	2348      	movs	r3, #72	; 0x48
 8004758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b48      	cmp	r3, #72	; 0x48
 800475e:	d00b      	beq.n	8004778 <xQueueGenericCreateStatic+0xc8>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	b672      	cpsid	i
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	b662      	cpsie	i
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e7fe      	b.n	8004776 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800478c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f846 	bl	800482c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3730      	adds	r7, #48	; 0x30
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08a      	sub	sp, #40	; 0x28
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <xQueueGenericCreate+0x2c>
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	b672      	cpsid	i
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	b662      	cpsie	i
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e7fe      	b.n	80047d4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	e004      	b.n	80047ec <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3348      	adds	r3, #72	; 0x48
 80047f0:	4618      	mov	r0, r3
 80047f2:	f002 f8e3 	bl	80069bc <pvPortMalloc>
 80047f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3348      	adds	r3, #72	; 0x48
 8004806:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004810:	79fa      	ldrb	r2, [r7, #7]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f805 	bl	800482c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004822:	69bb      	ldr	r3, [r7, #24]
	}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d103      	bne.n	8004848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e002      	b.n	800484e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800485a:	2101      	movs	r1, #1
 800485c:	69b8      	ldr	r0, [r7, #24]
 800485e:	f7ff febd 	bl	80045dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800488a:	2300      	movs	r3, #0
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f837 	bl	8004904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80048a8:	2301      	movs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6939      	ldr	r1, [r7, #16]
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff77 	bl	80047aa <xQueueGenericCreate>
 80048bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff ffd3 	bl	800486a <prvInitialiseMutex>

		return xNewQueue;
 80048c4:	68fb      	ldr	r3, [r7, #12]
	}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b088      	sub	sp, #32
 80048d2:	af02      	add	r7, sp, #8
 80048d4:	4603      	mov	r3, r0
 80048d6:	6039      	str	r1, [r7, #0]
 80048d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	6939      	ldr	r1, [r7, #16]
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f7ff fedf 	bl	80046b0 <xQueueGenericCreateStatic>
 80048f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff ffb8 	bl	800486a <prvInitialiseMutex>

		return xNewQueue;
 80048fa:	68fb      	ldr	r3, [r7, #12]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004912:	2300      	movs	r3, #0
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <xQueueGenericSend+0x34>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	b672      	cpsid	i
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	b662      	cpsie	i
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
 8004936:	e7fe      	b.n	8004936 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <xQueueGenericSend+0x42>
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xQueueGenericSend+0x46>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xQueueGenericSend+0x48>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xQueueGenericSend+0x64>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	b672      	cpsid	i
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	b662      	cpsie	i
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	e7fe      	b.n	8004966 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d103      	bne.n	8004976 <xQueueGenericSend+0x72>
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <xQueueGenericSend+0x76>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueGenericSend+0x78>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <xQueueGenericSend+0x94>
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	b672      	cpsid	i
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	b662      	cpsie	i
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004998:	f001 fba6 	bl	80060e8 <xTaskGetSchedulerState>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <xQueueGenericSend+0xa4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <xQueueGenericSend+0xa8>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <xQueueGenericSend+0xaa>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10b      	bne.n	80049ca <xQueueGenericSend+0xc6>
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	b672      	cpsid	i
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	b662      	cpsie	i
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e7fe      	b.n	80049c8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ca:	f001 fed5 	bl	8006778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <xQueueGenericSend+0xdc>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d129      	bne.n	8004a34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 fc4a 	bl	800527e <prvCopyDataToQueue>
 80049ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	3324      	adds	r3, #36	; 0x24
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f9b7 	bl	8005d6c <xTaskRemoveFromEventList>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a04:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <xQueueGenericSend+0x200>)
 8004a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	e00a      	b.n	8004a2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <xQueueGenericSend+0x200>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a2c:	f001 fed6 	bl	80067dc <vPortExitCritical>
				return pdPASS;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e063      	b.n	8004afc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a3a:	f001 fecf 	bl	80067dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e05c      	b.n	8004afc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 f9f1 	bl	8005e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a56:	f001 fec1 	bl	80067dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a5a:	f000 ff57 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a5e:	f001 fe8b 	bl	8006778 <vPortEnterCritical>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d103      	bne.n	8004a78 <xQueueGenericSend+0x174>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d103      	bne.n	8004a8e <xQueueGenericSend+0x18a>
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8e:	f001 fea5 	bl	80067dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a92:	1d3a      	adds	r2, r7, #4
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f9e0 	bl	8005e60 <xTaskCheckForTimeOut>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d124      	bne.n	8004af0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa8:	f000 fce1 	bl	800546e <prvIsQueueFull>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 f930 	bl	8005d20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac2:	f000 fc6c 	bl	800539e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ac6:	f000 ff2f 	bl	8005928 <xTaskResumeAll>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af7c 	bne.w	80049ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <xQueueGenericSend+0x200>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	e772      	b.n	80049ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae6:	f000 fc5a 	bl	800539e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aea:	f000 ff1d 	bl	8005928 <xTaskResumeAll>
 8004aee:	e76c      	b.n	80049ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 fc54 	bl	800539e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004af6:	f000 ff17 	bl	8005928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004afa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3738      	adds	r7, #56	; 0x38
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	e000ed04 	.word	0xe000ed04

08004b08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <xQueueGenericSendFromISR+0x30>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	b672      	cpsid	i
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	b662      	cpsie	i
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <xQueueGenericSendFromISR+0x3e>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <xQueueGenericSendFromISR+0x42>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <xQueueGenericSendFromISR+0x44>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <xQueueGenericSendFromISR+0x60>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	b672      	cpsid	i
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	b662      	cpsie	i
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	e7fe      	b.n	8004b66 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d103      	bne.n	8004b76 <xQueueGenericSendFromISR+0x6e>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <xQueueGenericSendFromISR+0x72>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericSendFromISR+0x74>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xQueueGenericSendFromISR+0x90>
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e7fe      	b.n	8004b96 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b98:	f001 fece 	bl	8006938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b9c:	f3ef 8211 	mrs	r2, BASEPRI
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	b672      	cpsid	i
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	b662      	cpsie	i
 8004bb4:	61ba      	str	r2, [r7, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <xQueueGenericSendFromISR+0xc6>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d12c      	bne.n	8004c28 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bde:	f000 fb4e 	bl	800527e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004be2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d112      	bne.n	8004c12 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d016      	beq.n	8004c22 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	3324      	adds	r3, #36	; 0x24
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f8b7 	bl	8005d6c <xTaskRemoveFromEventList>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e007      	b.n	8004c22 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	b25a      	sxtb	r2, r3
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c22:	2301      	movs	r3, #1
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c26:	e001      	b.n	8004c2c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	; 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	b672      	cpsid	i
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	b662      	cpsie	i
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	e7fe      	b.n	8004c6a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <xQueueGiveFromISR+0x4c>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueGiveFromISR+0x5c>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueGiveFromISR+0x60>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueGiveFromISR+0x62>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xQueueGiveFromISR+0x7e>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	b672      	cpsid	i
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	b662      	cpsie	i
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cbe:	f001 fe3b 	bl	8006938 <vPortValidateInterruptPriority>
	__asm volatile
 8004cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	b672      	cpsid	i
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	b662      	cpsie	i
 8004cda:	617a      	str	r2, [r7, #20]
 8004cdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004cde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d22b      	bcs.n	8004d4a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d112      	bne.n	8004d34 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	3324      	adds	r3, #36	; 0x24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f826 	bl	8005d6c <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00e      	beq.n	8004d44 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e007      	b.n	8004d44 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d38:	3301      	adds	r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	b25a      	sxtb	r2, r3
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d44:	2301      	movs	r3, #1
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
 8004d48:	e001      	b.n	8004d4e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3738      	adds	r7, #56	; 0x38
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <xQueueReceive+0x32>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	b672      	cpsid	i
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	b662      	cpsie	i
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	e7fe      	b.n	8004d94 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <xQueueReceive+0x40>
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <xQueueReceive+0x44>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <xQueueReceive+0x46>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <xQueueReceive+0x62>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	b672      	cpsid	i
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	b662      	cpsie	i
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc6:	f001 f98f 	bl	80060e8 <xTaskGetSchedulerState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <xQueueReceive+0x72>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xQueueReceive+0x76>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueReceive+0x78>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xQueueReceive+0x94>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	b672      	cpsid	i
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	b662      	cpsie	i
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e7fe      	b.n	8004df6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df8:	f001 fcbe 	bl	8006778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0c:	f000 faa1 	bl	8005352 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1e5a      	subs	r2, r3, #1
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00f      	beq.n	8004e40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	3310      	adds	r3, #16
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 ffa1 	bl	8005d6c <xTaskRemoveFromEventList>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e30:	4b3c      	ldr	r3, [pc, #240]	; (8004f24 <xQueueReceive+0x1c0>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e40:	f001 fccc 	bl	80067dc <vPortExitCritical>
				return pdPASS;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e069      	b.n	8004f1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e4e:	f001 fcc5 	bl	80067dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e062      	b.n	8004f1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ffe7 	bl	8005e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e6a:	f001 fcb7 	bl	80067dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e6e:	f000 fd4d 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e72:	f001 fc81 	bl	8006778 <vPortEnterCritical>
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d103      	bne.n	8004e8c <xQueueReceive+0x128>
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d103      	bne.n	8004ea2 <xQueueReceive+0x13e>
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea2:	f001 fc9b 	bl	80067dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea6:	1d3a      	adds	r2, r7, #4
 8004ea8:	f107 0310 	add.w	r3, r7, #16
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 ffd6 	bl	8005e60 <xTaskCheckForTimeOut>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d123      	bne.n	8004f02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ebc:	f000 fac1 	bl	8005442 <prvIsQueueEmpty>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	3324      	adds	r3, #36	; 0x24
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 ff26 	bl	8005d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed6:	f000 fa62 	bl	800539e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eda:	f000 fd25 	bl	8005928 <xTaskResumeAll>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d189      	bne.n	8004df8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <xQueueReceive+0x1c0>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	e780      	b.n	8004df8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef8:	f000 fa51 	bl	800539e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004efc:	f000 fd14 	bl	8005928 <xTaskResumeAll>
 8004f00:	e77a      	b.n	8004df8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f04:	f000 fa4b 	bl	800539e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f08:	f000 fd0e 	bl	8005928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0e:	f000 fa98 	bl	8005442 <prvIsQueueEmpty>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f43f af6f 	beq.w	8004df8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueSemaphoreTake+0x34>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	b672      	cpsid	i
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	b662      	cpsie	i
 8004f58:	623b      	str	r3, [r7, #32]
 8004f5a:	e7fe      	b.n	8004f5a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <xQueueSemaphoreTake+0x54>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e7fe      	b.n	8004f7a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7c:	f001 f8b4 	bl	80060e8 <xTaskGetSchedulerState>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <xQueueSemaphoreTake+0x64>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <xQueueSemaphoreTake+0x68>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <xQueueSemaphoreTake+0x6a>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xQueueSemaphoreTake+0x86>
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	b672      	cpsid	i
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	b662      	cpsie	i
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e7fe      	b.n	8004fac <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fae:	f001 fbe3 	bl	8006778 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d024      	beq.n	8005008 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fce:	f001 fa4d 	bl	800646c <pvTaskIncrementMutexHeldCount>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00f      	beq.n	8005000 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	3310      	adds	r3, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fec1 	bl	8005d6c <xTaskRemoveFromEventList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ff0:	4b54      	ldr	r3, [pc, #336]	; (8005144 <xQueueSemaphoreTake+0x21c>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005000:	f001 fbec 	bl	80067dc <vPortExitCritical>
				return pdPASS;
 8005004:	2301      	movs	r3, #1
 8005006:	e098      	b.n	800513a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d112      	bne.n	8005034 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <xQueueSemaphoreTake+0x104>
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e7fe      	b.n	800502a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800502c:	f001 fbd6 	bl	80067dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005030:	2300      	movs	r3, #0
 8005032:	e082      	b.n	800513a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800503a:	f107 030c 	add.w	r3, r7, #12
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fef8 	bl	8005e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005048:	f001 fbc8 	bl	80067dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800504c:	f000 fc5e 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005050:	f001 fb92 	bl	8006778 <vPortEnterCritical>
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800505a:	b25b      	sxtb	r3, r3
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d103      	bne.n	800506a <xQueueSemaphoreTake+0x142>
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005070:	b25b      	sxtb	r3, r3
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d103      	bne.n	8005080 <xQueueSemaphoreTake+0x158>
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005080:	f001 fbac 	bl	80067dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005084:	463a      	mov	r2, r7
 8005086:	f107 030c 	add.w	r3, r7, #12
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fee7 	bl	8005e60 <xTaskCheckForTimeOut>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d132      	bne.n	80050fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800509a:	f000 f9d2 	bl	8005442 <prvIsQueueEmpty>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d026      	beq.n	80050f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80050ac:	f001 fb64 	bl	8006778 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 f835 	bl	8006124 <xTaskPriorityInherit>
 80050ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80050bc:	f001 fb8e 	bl	80067dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fe29 	bl	8005d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050d0:	f000 f965 	bl	800539e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050d4:	f000 fc28 	bl	8005928 <xTaskResumeAll>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f47f af67 	bne.w	8004fae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80050e0:	4b18      	ldr	r3, [pc, #96]	; (8005144 <xQueueSemaphoreTake+0x21c>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e75d      	b.n	8004fae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80050f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050f4:	f000 f953 	bl	800539e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f8:	f000 fc16 	bl	8005928 <xTaskResumeAll>
 80050fc:	e757      	b.n	8004fae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005100:	f000 f94d 	bl	800539e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005104:	f000 fc10 	bl	8005928 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800510a:	f000 f99a 	bl	8005442 <prvIsQueueEmpty>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f43f af4c 	beq.w	8004fae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800511c:	f001 fb2c 	bl	8006778 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005122:	f000 f894 	bl	800524e <prvGetDisinheritPriorityAfterTimeout>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512e:	4618      	mov	r0, r3
 8005130:	f001 f900 	bl	8006334 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005134:	f001 fb52 	bl	80067dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800513a:	4618      	mov	r0, r3
 800513c:	3738      	adds	r7, #56	; 0x38
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <xQueueReceiveFromISR+0x2e>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	b672      	cpsid	i
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	b662      	cpsie	i
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	e7fe      	b.n	8005174 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d103      	bne.n	8005184 <xQueueReceiveFromISR+0x3c>
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <xQueueReceiveFromISR+0x40>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <xQueueReceiveFromISR+0x42>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <xQueueReceiveFromISR+0x5e>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e7fe      	b.n	80051a4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051a6:	f001 fbc7 	bl	8006938 <vPortValidateInterruptPriority>
	__asm volatile
 80051aa:	f3ef 8211 	mrs	r2, BASEPRI
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	61ba      	str	r2, [r7, #24]
 80051c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02f      	beq.n	8005236 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051e4:	f000 f8b5 	bl	8005352 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	1e5a      	subs	r2, r3, #1
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d112      	bne.n	8005220 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	3310      	adds	r3, #16
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fdb0 	bl	8005d6c <xTaskRemoveFromEventList>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005224:	3301      	adds	r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	b25a      	sxtb	r2, r3
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
 8005234:	e001      	b.n	800523a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005246:	4618      	mov	r0, r3
 8005248:	3738      	adds	r7, #56	; 0x38
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d006      	beq.n	800526c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1c3 0307 	rsb	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e001      	b.n	8005270 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005270:	68fb      	ldr	r3, [r7, #12]
	}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d14d      	bne.n	8005340 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 ffbb 	bl	8006224 <xTaskPriorityDisinherit>
 80052ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
 80052b6:	e043      	b.n	8005340 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d119      	bne.n	80052f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6858      	ldr	r0, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	461a      	mov	r2, r3
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	f00d f994 	bl	80125f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d32b      	bcc.n	8005340 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	e026      	b.n	8005340 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68d8      	ldr	r0, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	461a      	mov	r2, r3
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	f00d f97a 	bl	80125f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	425b      	negs	r3, r3
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d207      	bcs.n	800532e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	425b      	negs	r3, r3
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d105      	bne.n	8005340 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3b01      	subs	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005348:	697b      	ldr	r3, [r7, #20]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d018      	beq.n	8005396 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	441a      	add	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d303      	bcc.n	8005386 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	461a      	mov	r2, r3
 8005390:	6838      	ldr	r0, [r7, #0]
 8005392:	f00d f930 	bl	80125f6 <memcpy>
	}
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053a6:	f001 f9e7 	bl	8006778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053b2:	e011      	b.n	80053d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d012      	beq.n	80053e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fcd3 	bl	8005d6c <xTaskRemoveFromEventList>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053cc:	f000 fdac 	bl	8005f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dce9      	bgt.n	80053b4 <prvUnlockQueue+0x16>
 80053e0:	e000      	b.n	80053e4 <prvUnlockQueue+0x46>
					break;
 80053e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	22ff      	movs	r2, #255	; 0xff
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053ec:	f001 f9f6 	bl	80067dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053f0:	f001 f9c2 	bl	8006778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053fc:	e011      	b.n	8005422 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3310      	adds	r3, #16
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fcae 	bl	8005d6c <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005416:	f000 fd87 	bl	8005f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	3b01      	subs	r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	dce9      	bgt.n	80053fe <prvUnlockQueue+0x60>
 800542a:	e000      	b.n	800542e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800542c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005436:	f001 f9d1 	bl	80067dc <vPortExitCritical>
}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800544a:	f001 f995 	bl	8006778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005456:	2301      	movs	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e001      	b.n	8005460 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005460:	f001 f9bc 	bl	80067dc <vPortExitCritical>

	return xReturn;
 8005464:	68fb      	ldr	r3, [r7, #12]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005476:	f001 f97f 	bl	8006778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	429a      	cmp	r2, r3
 8005484:	d102      	bne.n	800548c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e001      	b.n	8005490 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005490:	f001 f9a4 	bl	80067dc <vPortExitCritical>

	return xReturn;
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b08e      	sub	sp, #56	; 0x38
 80054a2:	af04      	add	r7, sp, #16
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <xTaskCreateStatic+0x2c>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	b672      	cpsid	i
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	b662      	cpsie	i
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	e7fe      	b.n	80054c8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xTaskCreateStatic+0x4a>
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e7fe      	b.n	80054e6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054e8:	2354      	movs	r3, #84	; 0x54
 80054ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b54      	cmp	r3, #84	; 0x54
 80054f0:	d00b      	beq.n	800550a <xTaskCreateStatic+0x6c>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	b672      	cpsid	i
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	b662      	cpsie	i
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e7fe      	b.n	8005508 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800550a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01e      	beq.n	8005550 <xTaskCreateStatic+0xb2>
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005520:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	2202      	movs	r2, #2
 8005526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800552a:	2300      	movs	r3, #0
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	f107 0314 	add.w	r3, r7, #20
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f850 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800554a:	f000 f8dd 	bl	8005708 <prvAddNewTaskToReadyList>
 800554e:	e001      	b.n	8005554 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005554:	697b      	ldr	r3, [r7, #20]
	}
 8005556:	4618      	mov	r0, r3
 8005558:	3728      	adds	r7, #40	; 0x28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08c      	sub	sp, #48	; 0x30
 8005562:	af04      	add	r7, sp, #16
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fa22 	bl	80069bc <pvPortMalloc>
 8005578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005580:	2054      	movs	r0, #84	; 0x54
 8005582:	f001 fa1b 	bl	80069bc <pvPortMalloc>
 8005586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
 8005594:	e005      	b.n	80055a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f001 fad8 	bl	8006b4c <vPortFree>
 800559c:	e001      	b.n	80055a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9303      	str	r3, [sp, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	9302      	str	r3, [sp, #8]
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f80e 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055cc:	69f8      	ldr	r0, [r7, #28]
 80055ce:	f000 f89b 	bl	8005708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e002      	b.n	80055de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
 80055dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055de:	69bb      	ldr	r3, [r7, #24]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	461a      	mov	r2, r3
 8005600:	21a5      	movs	r1, #165	; 0xa5
 8005602:	f00d f803 	bl	801260c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005610:	440b      	add	r3, r1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <prvInitialiseNewTask+0x5a>
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	b672      	cpsid	i
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	b662      	cpsie	i
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e7fe      	b.n	8005640 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01f      	beq.n	8005688 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e012      	b.n	8005674 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	7819      	ldrb	r1, [r3, #0]
 8005656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	3334      	adds	r3, #52	; 0x34
 800565e:	460a      	mov	r2, r1
 8005660:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d006      	beq.n	800567c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d9e9      	bls.n	800564e <prvInitialiseNewTask+0x66>
 800567a:	e000      	b.n	800567e <prvInitialiseNewTask+0x96>
			{
				break;
 800567c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005686:	e003      	b.n	8005690 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b06      	cmp	r3, #6
 8005694:	d901      	bls.n	800569a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005696:	2306      	movs	r3, #6
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	3304      	adds	r3, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe feff 	bl	80044b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	3318      	adds	r3, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fefa 	bl	80044b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	f1c3 0207 	rsb	r2, r3, #7
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	69b8      	ldr	r0, [r7, #24]
 80056ea:	f000 ff39 	bl	8006560 <pxPortInitialiseStack>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005700:	bf00      	nop
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005710:	f001 f832 	bl	8006778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <prvAddNewTaskToReadyList+0xb8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <prvAddNewTaskToReadyList+0xb8>)
 800571c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800571e:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <prvAddNewTaskToReadyList+0xbc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005726:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <prvAddNewTaskToReadyList+0xbc>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <prvAddNewTaskToReadyList+0xb8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d110      	bne.n	8005756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005734:	f000 fc1c 	bl	8005f70 <prvInitialiseTaskLists>
 8005738:	e00d      	b.n	8005756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <prvAddNewTaskToReadyList+0xc0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <prvAddNewTaskToReadyList+0xbc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	429a      	cmp	r2, r3
 800574e:	d802      	bhi.n	8005756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <prvAddNewTaskToReadyList+0xbc>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <prvAddNewTaskToReadyList+0xc4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3301      	adds	r3, #1
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <prvAddNewTaskToReadyList+0xc4>)
 800575e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	2201      	movs	r2, #1
 8005766:	409a      	lsls	r2, r3
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <prvAddNewTaskToReadyList+0xc8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4313      	orrs	r3, r2
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <prvAddNewTaskToReadyList+0xc8>)
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <prvAddNewTaskToReadyList+0xcc>)
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fe fea0 	bl	80044ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800578e:	f001 f825 	bl	80067dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <prvAddNewTaskToReadyList+0xc0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00e      	beq.n	80057b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvAddNewTaskToReadyList+0xbc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d207      	bcs.n	80057b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <prvAddNewTaskToReadyList+0xd0>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000a04 	.word	0x20000a04
 80057c4:	20000904 	.word	0x20000904
 80057c8:	20000a10 	.word	0x20000a10
 80057cc:	20000a20 	.word	0x20000a20
 80057d0:	20000a0c 	.word	0x20000a0c
 80057d4:	20000908 	.word	0x20000908
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d018      	beq.n	8005820 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <vTaskDelay+0x64>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <vTaskDelay+0x32>
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	b672      	cpsid	i
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	b662      	cpsie	i
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	e7fe      	b.n	800580c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800580e:	f000 f87d 	bl	800590c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005812:	2100      	movs	r1, #0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fe3d 	bl	8006494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800581a:	f000 f885 	bl	8005928 <xTaskResumeAll>
 800581e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <vTaskDelay+0x68>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000a2c 	.word	0x20000a2c
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005856:	463a      	mov	r2, r7
 8005858:	1d39      	adds	r1, r7, #4
 800585a:	f107 0308 	add.w	r3, r7, #8
 800585e:	4618      	mov	r0, r3
 8005860:	f7fa feca 	bl	80005f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	9202      	str	r2, [sp, #8]
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	2300      	movs	r3, #0
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	460a      	mov	r2, r1
 8005876:	491f      	ldr	r1, [pc, #124]	; (80058f4 <vTaskStartScheduler+0xac>)
 8005878:	481f      	ldr	r0, [pc, #124]	; (80058f8 <vTaskStartScheduler+0xb0>)
 800587a:	f7ff fe10 	bl	800549e <xTaskCreateStatic>
 800587e:	4602      	mov	r2, r0
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <vTaskStartScheduler+0xb4>)
 8005882:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <vTaskStartScheduler+0xb4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800588c:	2301      	movs	r3, #1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e001      	b.n	8005896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d117      	bne.n	80058cc <vTaskStartScheduler+0x84>
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <vTaskStartScheduler+0xb8>)
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058ba:	4b12      	ldr	r3, [pc, #72]	; (8005904 <vTaskStartScheduler+0xbc>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <vTaskStartScheduler+0xc0>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058c6:	f000 fedb 	bl	8006680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ca:	e00f      	b.n	80058ec <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d10b      	bne.n	80058ec <vTaskStartScheduler+0xa4>
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	b672      	cpsid	i
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	b662      	cpsie	i
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e7fe      	b.n	80058ea <vTaskStartScheduler+0xa2>
}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	080135d0 	.word	0x080135d0
 80058f8:	08005f41 	.word	0x08005f41
 80058fc:	20000a28 	.word	0x20000a28
 8005900:	20000a24 	.word	0x20000a24
 8005904:	20000a10 	.word	0x20000a10
 8005908:	20000a08 	.word	0x20000a08

0800590c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <vTaskSuspendAll+0x18>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a03      	ldr	r2, [pc, #12]	; (8005924 <vTaskSuspendAll+0x18>)
 8005918:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800591a:	bf00      	nop
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000a2c 	.word	0x20000a2c

08005928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005936:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <xTaskResumeAll+0x118>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <xTaskResumeAll+0x2e>
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	b672      	cpsid	i
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	b662      	cpsie	i
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	e7fe      	b.n	8005954 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005956:	f000 ff0f 	bl	8006778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800595a:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <xTaskResumeAll+0x118>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a37      	ldr	r2, [pc, #220]	; (8005a40 <xTaskResumeAll+0x118>)
 8005962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005964:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <xTaskResumeAll+0x118>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d161      	bne.n	8005a30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800596c:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <xTaskResumeAll+0x11c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05d      	beq.n	8005a30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005974:	e02e      	b.n	80059d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005976:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <xTaskResumeAll+0x120>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3318      	adds	r3, #24
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fe00 	bl	8004588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fdfb 	bl	8004588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	2201      	movs	r2, #1
 8005998:	409a      	lsls	r2, r3
 800599a:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <xTaskResumeAll+0x124>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <xTaskResumeAll+0x124>)
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <xTaskResumeAll+0x128>)
 80059b2:	441a      	add	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fe fd87 	bl	80044ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <xTaskResumeAll+0x12c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059ce:	4b22      	ldr	r3, [pc, #136]	; (8005a58 <xTaskResumeAll+0x130>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <xTaskResumeAll+0x120>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1cc      	bne.n	8005976 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059e2:	f000 fb61 	bl	80060a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <xTaskResumeAll+0x134>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f000 f859 	bl	8005aa8 <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <xTaskResumeAll+0x130>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f1      	bne.n	80059f2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <xTaskResumeAll+0x134>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <xTaskResumeAll+0x130>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d009      	beq.n	8005a30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <xTaskResumeAll+0x138>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a30:	f000 fed4 	bl	80067dc <vPortExitCritical>

	return xAlreadyYielded;
 8005a34:	68bb      	ldr	r3, [r7, #8]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000a2c 	.word	0x20000a2c
 8005a44:	20000a04 	.word	0x20000a04
 8005a48:	200009c4 	.word	0x200009c4
 8005a4c:	20000a0c 	.word	0x20000a0c
 8005a50:	20000908 	.word	0x20000908
 8005a54:	20000904 	.word	0x20000904
 8005a58:	20000a18 	.word	0x20000a18
 8005a5c:	20000a14 	.word	0x20000a14
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <xTaskGetTickCount+0x1c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a70:	687b      	ldr	r3, [r7, #4]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000a08 	.word	0x20000a08

08005a84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a8a:	f000 ff55 	bl	8006938 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <xTaskGetTickCountFromISR+0x20>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a98:	683b      	ldr	r3, [r7, #0]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000a08 	.word	0x20000a08

08005aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	4b4f      	ldr	r3, [pc, #316]	; (8005bf0 <xTaskIncrementTick+0x148>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8089 	bne.w	8005bce <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005abc:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac4:	4a4b      	ldr	r2, [pc, #300]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d121      	bne.n	8005b14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ad0:	4b49      	ldr	r3, [pc, #292]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <xTaskIncrementTick+0x4a>
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	b672      	cpsid	i
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	b662      	cpsie	i
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	e7fe      	b.n	8005af0 <xTaskIncrementTick+0x48>
 8005af2:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a3e      	ldr	r2, [pc, #248]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4a3e      	ldr	r2, [pc, #248]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	4a3c      	ldr	r2, [pc, #240]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	f000 faca 	bl	80060a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b14:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d348      	bcc.n	8005bb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1e:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b28:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	601a      	str	r2, [r3, #0]
					break;
 8005b30:	e03e      	b.n	8005bb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d203      	bcs.n	8005b52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b4a:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b50:	e02e      	b.n	8005bb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fd16 	bl	8004588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3318      	adds	r3, #24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fd0d 	bl	8004588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005b8e:	441a      	add	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fc99 	bl	80044ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <xTaskIncrementTick+0x168>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3b9      	bcc.n	8005b1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bae:	e7b6      	b.n	8005b1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <xTaskIncrementTick+0x168>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	4915      	ldr	r1, [pc, #84]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d907      	bls.n	8005bd8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e004      	b.n	8005bd8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005bd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <xTaskIncrementTick+0x170>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000a2c 	.word	0x20000a2c
 8005bf4:	20000a08 	.word	0x20000a08
 8005bf8:	200009bc 	.word	0x200009bc
 8005bfc:	200009c0 	.word	0x200009c0
 8005c00:	20000a1c 	.word	0x20000a1c
 8005c04:	20000a24 	.word	0x20000a24
 8005c08:	20000a0c 	.word	0x20000a0c
 8005c0c:	20000908 	.word	0x20000908
 8005c10:	20000904 	.word	0x20000904
 8005c14:	20000a14 	.word	0x20000a14
 8005c18:	20000a18 	.word	0x20000a18

08005c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c22:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <vTaskSwitchContext+0xf0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c2a:	4b39      	ldr	r3, [pc, #228]	; (8005d10 <vTaskSwitchContext+0xf4>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c30:	e067      	b.n	8005d02 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8005c32:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <vTaskSwitchContext+0xf4>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <vTaskSwitchContext+0xf8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d111      	bne.n	8005c74 <vTaskSwitchContext+0x58>
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3304      	adds	r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d10b      	bne.n	8005c74 <vTaskSwitchContext+0x58>
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d105      	bne.n	8005c74 <vTaskSwitchContext+0x58>
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d008      	beq.n	8005c86 <vTaskSwitchContext+0x6a>
 8005c74:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <vTaskSwitchContext+0xf8>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <vTaskSwitchContext+0xf8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3334      	adds	r3, #52	; 0x34
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7fa fcad 	bl	80005e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <vTaskSwitchContext+0xfc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	fab3 f383 	clz	r3, r3
 8005c92:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	f1c3 031f 	rsb	r3, r3, #31
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	491f      	ldr	r1, [pc, #124]	; (8005d1c <vTaskSwitchContext+0x100>)
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <vTaskSwitchContext+0xac>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	b672      	cpsid	i
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	b662      	cpsie	i
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	e7fe      	b.n	8005cc6 <vTaskSwitchContext+0xaa>
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <vTaskSwitchContext+0x100>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d104      	bne.n	8005cf8 <vTaskSwitchContext+0xdc>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	4a05      	ldr	r2, [pc, #20]	; (8005d14 <vTaskSwitchContext+0xf8>)
 8005d00:	6013      	str	r3, [r2, #0]
}
 8005d02:	bf00      	nop
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000a2c 	.word	0x20000a2c
 8005d10:	20000a18 	.word	0x20000a18
 8005d14:	20000904 	.word	0x20000904
 8005d18:	20000a0c 	.word	0x20000a0c
 8005d1c:	20000908 	.word	0x20000908

08005d20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <vTaskPlaceOnEventList+0x28>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	b672      	cpsid	i
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	b662      	cpsie	i
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e7fe      	b.n	8005d46 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <vTaskPlaceOnEventList+0x48>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fe fbe0 	bl	8004516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d56:	2101      	movs	r1, #1
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f000 fb9b 	bl	8006494 <prvAddCurrentTaskToDelayedList>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000904 	.word	0x20000904

08005d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <xTaskRemoveFromEventList+0x2e>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	b672      	cpsid	i
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	b662      	cpsie	i
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e7fe      	b.n	8005d98 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fbf2 	bl	8004588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <xTaskRemoveFromEventList+0xb0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11c      	bne.n	8005de6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fbe9 	bl	8004588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	2201      	movs	r2, #1
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <xTaskRemoveFromEventList+0xb4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <xTaskRemoveFromEventList+0xb4>)
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <xTaskRemoveFromEventList+0xb8>)
 8005dd6:	441a      	add	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7fe fb75 	bl	80044ce <vListInsertEnd>
 8005de4:	e005      	b.n	8005df2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3318      	adds	r3, #24
 8005dea:	4619      	mov	r1, r3
 8005dec:	480e      	ldr	r0, [pc, #56]	; (8005e28 <xTaskRemoveFromEventList+0xbc>)
 8005dee:	f7fe fb6e 	bl	80044ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <xTaskRemoveFromEventList+0xc0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d905      	bls.n	8005e0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <xTaskRemoveFromEventList+0xc4>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e001      	b.n	8005e10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e10:	697b      	ldr	r3, [r7, #20]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000a2c 	.word	0x20000a2c
 8005e20:	20000a0c 	.word	0x20000a0c
 8005e24:	20000908 	.word	0x20000908
 8005e28:	200009c4 	.word	0x200009c4
 8005e2c:	20000904 	.word	0x20000904
 8005e30:	20000a18 	.word	0x20000a18

08005e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <vTaskInternalSetTimeOutState+0x24>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <vTaskInternalSetTimeOutState+0x28>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	605a      	str	r2, [r3, #4]
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000a1c 	.word	0x20000a1c
 8005e5c:	20000a08 	.word	0x20000a08

08005e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <xTaskCheckForTimeOut+0x28>
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	b672      	cpsid	i
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	b662      	cpsie	i
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e7fe      	b.n	8005e86 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <xTaskCheckForTimeOut+0x46>
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005ea6:	f000 fc67 	bl	8006778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <xTaskCheckForTimeOut+0xc0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d102      	bne.n	8005eca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e023      	b.n	8005f12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <xTaskCheckForTimeOut+0xc4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d007      	beq.n	8005ee6 <xTaskCheckForTimeOut+0x86>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e015      	b.n	8005f12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d20b      	bcs.n	8005f08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff99 	bl	8005e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e004      	b.n	8005f12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f000 fc63 	bl	80067dc <vPortExitCritical>

	return xReturn;
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000a08 	.word	0x20000a08
 8005f24:	20000a1c 	.word	0x20000a1c

08005f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <vTaskMissedYield+0x14>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000a18 	.word	0x20000a18

08005f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f48:	f000 f852 	bl	8005ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <prvIdleTask+0x28>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d9f9      	bls.n	8005f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <prvIdleTask+0x2c>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f64:	e7f0      	b.n	8005f48 <prvIdleTask+0x8>
 8005f66:	bf00      	nop
 8005f68:	20000908 	.word	0x20000908
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e00c      	b.n	8005f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <prvInitialiseTaskLists+0x60>)
 8005f88:	4413      	add	r3, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fa72 	bl	8004474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3301      	adds	r3, #1
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d9ef      	bls.n	8005f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f9c:	480d      	ldr	r0, [pc, #52]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005f9e:	f7fe fa69 	bl	8004474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fa2:	480d      	ldr	r0, [pc, #52]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fa4:	f7fe fa66 	bl	8004474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <prvInitialiseTaskLists+0x6c>)
 8005faa:	f7fe fa63 	bl	8004474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fae:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <prvInitialiseTaskLists+0x70>)
 8005fb0:	f7fe fa60 	bl	8004474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fb4:	480b      	ldr	r0, [pc, #44]	; (8005fe4 <prvInitialiseTaskLists+0x74>)
 8005fb6:	f7fe fa5d 	bl	8004474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <prvInitialiseTaskLists+0x78>)
 8005fbc:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <prvInitialiseTaskLists+0x7c>)
 8005fc2:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000908 	.word	0x20000908
 8005fd4:	20000994 	.word	0x20000994
 8005fd8:	200009a8 	.word	0x200009a8
 8005fdc:	200009c4 	.word	0x200009c4
 8005fe0:	200009d8 	.word	0x200009d8
 8005fe4:	200009f0 	.word	0x200009f0
 8005fe8:	200009bc 	.word	0x200009bc
 8005fec:	200009c0 	.word	0x200009c0

08005ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff6:	e019      	b.n	800602c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ff8:	f000 fbbe 	bl	8006778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <prvCheckTasksWaitingTermination+0x4c>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe fabd 	bl	8004588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <prvCheckTasksWaitingTermination+0x50>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <prvCheckTasksWaitingTermination+0x50>)
 8006016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 8006020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006022:	f000 fbdb 	bl	80067dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f80e 	bl	8006048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e1      	bne.n	8005ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	200009d8 	.word	0x200009d8
 8006040:	20000a04 	.word	0x20000a04
 8006044:	200009ec 	.word	0x200009ec

08006048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fd74 	bl	8006b4c <vPortFree>
				vPortFree( pxTCB );
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fd71 	bl	8006b4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800606a:	e019      	b.n	80060a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006072:	2b01      	cmp	r3, #1
 8006074:	d103      	bne.n	800607e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fd68 	bl	8006b4c <vPortFree>
	}
 800607c:	e010      	b.n	80060a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006084:	2b02      	cmp	r3, #2
 8006086:	d00b      	beq.n	80060a0 <prvDeleteTCB+0x58>
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	b672      	cpsid	i
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	b662      	cpsie	i
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e7fe      	b.n	800609e <prvDeleteTCB+0x56>
	}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ae:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <prvResetNextTaskUnblockTime+0x38>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b8:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <prvResetNextTaskUnblockTime+0x3c>)
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060c0:	e008      	b.n	80060d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <prvResetNextTaskUnblockTime+0x38>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <prvResetNextTaskUnblockTime+0x3c>)
 80060d2:	6013      	str	r3, [r2, #0]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	200009bc 	.word	0x200009bc
 80060e4:	20000a24 	.word	0x20000a24

080060e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <xTaskGetSchedulerState+0x34>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060f6:	2301      	movs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	e008      	b.n	800610e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <xTaskGetSchedulerState+0x38>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006104:	2302      	movs	r3, #2
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e001      	b.n	800610e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800610e:	687b      	ldr	r3, [r7, #4]
	}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000a10 	.word	0x20000a10
 8006120:	20000a2c 	.word	0x20000a2c

08006124 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d069      	beq.n	800620e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <xTaskPriorityInherit+0xf4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	429a      	cmp	r2, r3
 8006146:	d259      	bcs.n	80061fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	db06      	blt.n	800615e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006150:	4b31      	ldr	r3, [pc, #196]	; (8006218 <xTaskPriorityInherit+0xf4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f1c3 0207 	rsb	r2, r3, #7
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <xTaskPriorityInherit+0xf8>)
 8006170:	4413      	add	r3, r2
 8006172:	4299      	cmp	r1, r3
 8006174:	d13a      	bne.n	80061ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3304      	adds	r3, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fa04 	bl	8004588 <uxListRemove>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d115      	bne.n	80061b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	4924      	ldr	r1, [pc, #144]	; (800621c <xTaskPriorityInherit+0xf8>)
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <xTaskPriorityInherit+0x8e>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43da      	mvns	r2, r3
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <xTaskPriorityInherit+0xfc>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4013      	ands	r3, r2
 80061ae:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <xTaskPriorityInherit+0xfc>)
 80061b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061b2:	4b19      	ldr	r3, [pc, #100]	; (8006218 <xTaskPriorityInherit+0xf4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	2201      	movs	r2, #1
 80061c2:	409a      	lsls	r2, r3
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <xTaskPriorityInherit+0xfc>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <xTaskPriorityInherit+0xfc>)
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4a10      	ldr	r2, [pc, #64]	; (800621c <xTaskPriorityInherit+0xf8>)
 80061dc:	441a      	add	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f7fe f972 	bl	80044ce <vListInsertEnd>
 80061ea:	e004      	b.n	80061f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <xTaskPriorityInherit+0xf4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e008      	b.n	800620e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <xTaskPriorityInherit+0xf4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	429a      	cmp	r2, r3
 8006208:	d201      	bcs.n	800620e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000904 	.word	0x20000904
 800621c:	20000908 	.word	0x20000908
 8006220:	20000a0c 	.word	0x20000a0c

08006224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d070      	beq.n	800631c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <xTaskPriorityDisinherit+0x104>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d00b      	beq.n	800625c <xTaskPriorityDisinherit+0x38>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	b672      	cpsid	i
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	b662      	cpsie	i
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e7fe      	b.n	800625a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <xTaskPriorityDisinherit+0x58>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	b672      	cpsid	i
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	b662      	cpsie	i
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	e7fe      	b.n	800627a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	1e5a      	subs	r2, r3, #1
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	429a      	cmp	r2, r3
 8006290:	d044      	beq.n	800631c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	d140      	bne.n	800631c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe f972 	bl	8004588 <uxListRemove>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d115      	bne.n	80062d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	491f      	ldr	r1, [pc, #124]	; (800632c <xTaskPriorityDisinherit+0x108>)
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xTaskPriorityDisinherit+0xb2>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	2201      	movs	r2, #1
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43da      	mvns	r2, r3
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <xTaskPriorityDisinherit+0x10c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4013      	ands	r3, r2
 80062d2:	4a17      	ldr	r2, [pc, #92]	; (8006330 <xTaskPriorityDisinherit+0x10c>)
 80062d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	f1c3 0207 	rsb	r2, r3, #7
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	2201      	movs	r2, #1
 80062f0:	409a      	lsls	r2, r3
 80062f2:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <xTaskPriorityDisinherit+0x10c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <xTaskPriorityDisinherit+0x10c>)
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <xTaskPriorityDisinherit+0x108>)
 800630a:	441a      	add	r2, r3
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f7fe f8db 	bl	80044ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800631c:	697b      	ldr	r3, [r7, #20]
	}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000904 	.word	0x20000904
 800632c:	20000908 	.word	0x20000908
 8006330:	20000a0c 	.word	0x20000a0c

08006334 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8085 	beq.w	8006458 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e7fe      	b.n	800636c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d902      	bls.n	800637e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e002      	b.n	8006384 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d064      	beq.n	8006458 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	429a      	cmp	r2, r3
 8006396:	d15f      	bne.n	8006458 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006398:	4b31      	ldr	r3, [pc, #196]	; (8006460 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d10b      	bne.n	80063ba <vTaskPriorityDisinheritAfterTimeout+0x86>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	e7fe      	b.n	80063b8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db04      	blt.n	80063d8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f1c3 0207 	rsb	r2, r3, #7
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	6959      	ldr	r1, [r3, #20]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80063e8:	4413      	add	r3, r2
 80063ea:	4299      	cmp	r1, r3
 80063ec:	d134      	bne.n	8006458 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe f8c8 	bl	8004588 <uxListRemove>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d115      	bne.n	800642a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	4918      	ldr	r1, [pc, #96]	; (8006464 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	2201      	movs	r2, #1
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4013      	ands	r3, r2
 8006426:	4a10      	ldr	r2, [pc, #64]	; (8006468 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006428:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	2201      	movs	r2, #1
 8006430:	409a      	lsls	r2, r3
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4313      	orrs	r3, r2
 8006438:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4a06      	ldr	r2, [pc, #24]	; (8006464 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800644a:	441a      	add	r2, r3
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7fe f83b 	bl	80044ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006458:	bf00      	nop
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000904 	.word	0x20000904
 8006464:	20000908 	.word	0x20000908
 8006468:	20000a0c 	.word	0x20000a0c

0800646c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <pvTaskIncrementMutexHeldCount+0x24>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <pvTaskIncrementMutexHeldCount+0x24>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800647e:	3201      	adds	r2, #1
 8006480:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006482:	4b03      	ldr	r3, [pc, #12]	; (8006490 <pvTaskIncrementMutexHeldCount+0x24>)
 8006484:	681b      	ldr	r3, [r3, #0]
	}
 8006486:	4618      	mov	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000904 	.word	0x20000904

08006494 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800649e:	4b29      	ldr	r3, [pc, #164]	; (8006544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a4:	4b28      	ldr	r3, [pc, #160]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe f86c 	bl	8004588 <uxListRemove>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	2201      	movs	r2, #1
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43da      	mvns	r2, r3
 80064c4:	4b21      	ldr	r3, [pc, #132]	; (800654c <prvAddCurrentTaskToDelayedList+0xb8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4013      	ands	r3, r2
 80064ca:	4a20      	ldr	r2, [pc, #128]	; (800654c <prvAddCurrentTaskToDelayedList+0xb8>)
 80064cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d10a      	bne.n	80064ec <prvAddCurrentTaskToDelayedList+0x58>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	481a      	ldr	r0, [pc, #104]	; (8006550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064e6:	f7fd fff2 	bl	80044ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ea:	e026      	b.n	800653a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f4:	4b14      	ldr	r3, [pc, #80]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	429a      	cmp	r2, r3
 8006502:	d209      	bcs.n	8006518 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006504:	4b13      	ldr	r3, [pc, #76]	; (8006554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f800 	bl	8004516 <vListInsert>
}
 8006516:	e010      	b.n	800653a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fd fff6 	bl	8004516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <prvAddCurrentTaskToDelayedList+0xc8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d202      	bcs.n	800653a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6013      	str	r3, [r2, #0]
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000a08 	.word	0x20000a08
 8006548:	20000904 	.word	0x20000904
 800654c:	20000a0c 	.word	0x20000a0c
 8006550:	200009f0 	.word	0x200009f0
 8006554:	200009c0 	.word	0x200009c0
 8006558:	200009bc 	.word	0x200009bc
 800655c:	20000a24 	.word	0x20000a24

08006560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3b04      	subs	r3, #4
 8006570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b04      	subs	r3, #4
 800657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b04      	subs	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <pxPortInitialiseStack+0x64>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3b14      	subs	r3, #20
 800659a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3b04      	subs	r3, #4
 80065a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f06f 0202 	mvn.w	r2, #2
 80065ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b20      	subs	r3, #32
 80065b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	080065c9 	.word	0x080065c9

080065c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <prvTaskExitError+0x58>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d00b      	beq.n	80065f4 <prvTaskExitError+0x2c>
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	b672      	cpsid	i
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	b662      	cpsie	i
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e7fe      	b.n	80065f2 <prvTaskExitError+0x2a>
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	b672      	cpsid	i
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	b662      	cpsie	i
 8006608:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800660a:	bf00      	nop
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0fc      	beq.n	800660c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	2000000c 	.word	0x2000000c
	...

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	4770      	bx	lr
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst2>:
 8006650:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006658:	4808      	ldr	r0, [pc, #32]	; (800667c <prvPortStartFirstTask+0x24>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8814 	msr	CONTROL, r0
 800666a:	b662      	cpsie	i
 800666c:	b661      	cpsie	f
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	df00      	svc	0
 8006678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667a:	bf00      	nop
 800667c:	e000ed08 	.word	0xe000ed08

08006680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <xPortStartScheduler+0xe0>)
 8006688:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <xPortStartScheduler+0xe4>)
 80066ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ae:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <xPortStartScheduler+0xe8>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b4:	e009      	b.n	80066ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <xPortStartScheduler+0xe8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <xPortStartScheduler+0xe8>)
 80066be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d0ef      	beq.n	80066b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <xPortStartScheduler+0xe8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00b      	beq.n	80066fa <xPortStartScheduler+0x7a>
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	e7fe      	b.n	80066f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <xPortStartScheduler+0xe8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	4a19      	ldr	r2, [pc, #100]	; (8006768 <xPortStartScheduler+0xe8>)
 8006702:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006704:	4b18      	ldr	r3, [pc, #96]	; (8006768 <xPortStartScheduler+0xe8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800670c:	4a16      	ldr	r2, [pc, #88]	; (8006768 <xPortStartScheduler+0xe8>)
 800670e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006718:	4b14      	ldr	r3, [pc, #80]	; (800676c <xPortStartScheduler+0xec>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	; (800676c <xPortStartScheduler+0xec>)
 800671e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006722:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <xPortStartScheduler+0xec>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a10      	ldr	r2, [pc, #64]	; (800676c <xPortStartScheduler+0xec>)
 800672a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800672e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006730:	f000 f8d4 	bl	80068dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <xPortStartScheduler+0xf0>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800673a:	f000 f8f3 	bl	8006924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <xPortStartScheduler+0xf4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <xPortStartScheduler+0xf4>)
 8006744:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006748:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800674a:	f7ff ff85 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800674e:	f7ff fa65 	bl	8005c1c <vTaskSwitchContext>
	prvTaskExitError();
 8006752:	f7ff ff39 	bl	80065c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	e000e400 	.word	0xe000e400
 8006764:	20000a30 	.word	0x20000a30
 8006768:	20000a34 	.word	0x20000a34
 800676c:	e000ed20 	.word	0xe000ed20
 8006770:	2000000c 	.word	0x2000000c
 8006774:	e000ef34 	.word	0xe000ef34

08006778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	b672      	cpsid	i
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	b662      	cpsie	i
 8006792:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <vPortEnterCritical+0x5c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <vPortEnterCritical+0x5c>)
 800679c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <vPortEnterCritical+0x5c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d110      	bne.n	80067c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <vPortEnterCritical+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <vPortEnterCritical+0x50>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	b672      	cpsid	i
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	b662      	cpsie	i
 80067c4:	603b      	str	r3, [r7, #0]
 80067c6:	e7fe      	b.n	80067c6 <vPortEnterCritical+0x4e>
	}
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	2000000c 	.word	0x2000000c
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <vPortExitCritical+0x26>
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	b672      	cpsid	i
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	b662      	cpsie	i
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	e7fe      	b.n	8006800 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <vPortExitCritical+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3b01      	subs	r3, #1
 8006808:	4a08      	ldr	r2, [pc, #32]	; (800682c <vPortExitCritical+0x50>)
 800680a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <vPortExitCritical+0x50>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <vPortExitCritical+0x42>
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	2000000c 	.word	0x2000000c

08006830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006830:	f3ef 8009 	mrs	r0, PSP
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <pxCurrentTCBConst>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f01e 0f10 	tst.w	lr, #16
 8006840:	bf08      	it	eq
 8006842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006854:	b672      	cpsid	i
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	b662      	cpsie	i
 8006864:	f7ff f9da 	bl	8005c1c <vTaskSwitchContext>
 8006868:	f04f 0000 	mov.w	r0, #0
 800686c:	f380 8811 	msr	BASEPRI, r0
 8006870:	bc09      	pop	{r0, r3}
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f01e 0f10 	tst.w	lr, #16
 800687e:	bf08      	it	eq
 8006880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006884:	f380 8809 	msr	PSP, r0
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <pxCurrentTCBConst>:
 8006890:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	b672      	cpsid	i
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	b662      	cpsie	i
 80068b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068b4:	f7ff f8f8 	bl	8005aa8 <xTaskIncrementTick>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <SysTick_Handler+0x40>)
 80068c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	2300      	movs	r3, #0
 80068c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortSetupTimerInterrupt+0x34>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <vPortSetupTimerInterrupt+0x38>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <vPortSetupTimerInterrupt+0x3c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <vPortSetupTimerInterrupt+0x40>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	099b      	lsrs	r3, r3, #6
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <vPortSetupTimerInterrupt+0x44>)
 80068fa:	3b01      	subs	r3, #1
 80068fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <vPortSetupTimerInterrupt+0x34>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010
 8006914:	e000e018 	.word	0xe000e018
 8006918:	20000000 	.word	0x20000000
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	e000e014 	.word	0xe000e014

08006924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006934 <vPortEnableVFP+0x10>
 8006928:	6801      	ldr	r1, [r0, #0]
 800692a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692e:	6001      	str	r1, [r0, #0]
 8006930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006932:	bf00      	nop
 8006934:	e000ed88 	.word	0xe000ed88

08006938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800693e:	f3ef 8305 	mrs	r3, IPSR
 8006942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d915      	bls.n	8006976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800694a:	4a18      	ldr	r2, [pc, #96]	; (80069ac <vPortValidateInterruptPriority+0x74>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <vPortValidateInterruptPriority+0x78>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	7afa      	ldrb	r2, [r7, #11]
 800695a:	429a      	cmp	r2, r3
 800695c:	d20b      	bcs.n	8006976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	b672      	cpsid	i
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	b662      	cpsie	i
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	e7fe      	b.n	8006974 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006976:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <vPortValidateInterruptPriority+0x7c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <vPortValidateInterruptPriority+0x80>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d90b      	bls.n	800699e <vPortValidateInterruptPriority+0x66>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	b672      	cpsid	i
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	b662      	cpsie	i
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	e7fe      	b.n	800699c <vPortValidateInterruptPriority+0x64>
	}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	e000e3f0 	.word	0xe000e3f0
 80069b0:	20000a30 	.word	0x20000a30
 80069b4:	e000ed0c 	.word	0xe000ed0c
 80069b8:	20000a34 	.word	0x20000a34

080069bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069c8:	f7fe ffa0 	bl	800590c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069cc:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <pvPortMalloc+0x17c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069d4:	f000 f916 	bl	8006c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069d8:	4b58      	ldr	r3, [pc, #352]	; (8006b3c <pvPortMalloc+0x180>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4013      	ands	r3, r2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 8090 	bne.w	8006b06 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01e      	beq.n	8006a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069ec:	2208      	movs	r2, #8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4413      	add	r3, r2
 80069f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d015      	beq.n	8006a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f023 0307 	bic.w	r3, r3, #7
 8006a04:	3308      	adds	r3, #8
 8006a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <pvPortMalloc+0x6e>
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	b672      	cpsid	i
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	b662      	cpsie	i
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e7fe      	b.n	8006a28 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d06a      	beq.n	8006b06 <pvPortMalloc+0x14a>
 8006a30:	4b43      	ldr	r3, [pc, #268]	; (8006b40 <pvPortMalloc+0x184>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d865      	bhi.n	8006b06 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a3a:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <pvPortMalloc+0x188>)
 8006a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a3e:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <pvPortMalloc+0x188>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a44:	e004      	b.n	8006a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d903      	bls.n	8006a62 <pvPortMalloc+0xa6>
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f1      	bne.n	8006a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a62:	4b35      	ldr	r3, [pc, #212]	; (8006b38 <pvPortMalloc+0x17c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d04c      	beq.n	8006b06 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2208      	movs	r2, #8
 8006a72:	4413      	add	r3, r2
 8006a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	2308      	movs	r3, #8
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d920      	bls.n	8006ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <pvPortMalloc+0xfc>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	b672      	cpsid	i
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	b662      	cpsie	i
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e7fe      	b.n	8006ab6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aca:	69b8      	ldr	r0, [r7, #24]
 8006acc:	f000 f8fc 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <pvPortMalloc+0x184>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <pvPortMalloc+0x184>)
 8006adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ade:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <pvPortMalloc+0x184>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <pvPortMalloc+0x18c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d203      	bcs.n	8006af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pvPortMalloc+0x184>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <pvPortMalloc+0x18c>)
 8006af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <pvPortMalloc+0x180>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b06:	f7fe ff0f 	bl	8005928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <pvPortMalloc+0x170>
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	b672      	cpsid	i
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	b662      	cpsie	i
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e7fe      	b.n	8006b2a <pvPortMalloc+0x16e>
	return pvReturn;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20008a40 	.word	0x20008a40
 8006b3c:	20008a4c 	.word	0x20008a4c
 8006b40:	20008a44 	.word	0x20008a44
 8006b44:	20008a38 	.word	0x20008a38
 8006b48:	20008a48 	.word	0x20008a48

08006b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04a      	beq.n	8006bf4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	425b      	negs	r3, r3
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b22      	ldr	r3, [pc, #136]	; (8006bfc <vPortFree+0xb0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <vPortFree+0x46>
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	b672      	cpsid	i
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	b662      	cpsie	i
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e7fe      	b.n	8006b90 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <vPortFree+0x66>
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	b672      	cpsid	i
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	b662      	cpsie	i
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	e7fe      	b.n	8006bb0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <vPortFree+0xb0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d115      	bne.n	8006bf4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <vPortFree+0xb0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bd8:	f7fe fe98 	bl	800590c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <vPortFree+0xb4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <vPortFree+0xb4>)
 8006be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f000 f86c 	bl	8006cc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bf0:	f7fe fe9a 	bl	8005928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20008a4c 	.word	0x20008a4c
 8006c00:	20008a44 	.word	0x20008a44

08006c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <prvHeapInit+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvHeapInit+0xac>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <prvHeapInit+0xb8>)
 8006c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <prvHeapInit+0xbc>)
 8006c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <prvHeapInit+0xc0>)
 8006c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000a38 	.word	0x20000a38
 8006cb4:	20008a38 	.word	0x20008a38
 8006cb8:	20008a40 	.word	0x20008a40
 8006cbc:	20008a48 	.word	0x20008a48
 8006cc0:	20008a44 	.word	0x20008a44
 8006cc4:	20008a4c 	.word	0x20008a4c

08006cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <prvInsertBlockIntoFreeList+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x14>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8f7      	bhi.n	8006cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d118      	bne.n	8006d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e008      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20008a38 	.word	0x20008a38
 8006d78:	20008a40 	.word	0x20008a40

08006d7c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006d86:	f008 f8ff 	bl	800ef88 <sys_timeouts_sleeptime>
 8006d8a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d10b      	bne.n	8006dac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006d94:	4813      	ldr	r0, [pc, #76]	; (8006de4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006d96:	f00a fe68 	bl	8011a6a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f00a fdda 	bl	8011958 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006da4:	480f      	ldr	r0, [pc, #60]	; (8006de4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006da6:	f00a fe51 	bl	8011a4c <sys_mutex_lock>
    return;
 8006daa:	e018      	b.n	8006dde <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8006db2:	f008 f8af 	bl	800ef14 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006db6:	e7e6      	b.n	8006d86 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8006db8:	480a      	ldr	r0, [pc, #40]	; (8006de4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006dba:	f00a fe56 	bl	8011a6a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f00a fdc8 	bl	8011958 <sys_arch_mbox_fetch>
 8006dc8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8006dca:	4806      	ldr	r0, [pc, #24]	; (8006de4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006dcc:	f00a fe3e 	bl	8011a4c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d102      	bne.n	8006dde <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006dd8:	f008 f89c 	bl	800ef14 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006ddc:	e7d3      	b.n	8006d86 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	2000c0d0 	.word	0x2000c0d0

08006de8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006df0:	4810      	ldr	r0, [pc, #64]	; (8006e34 <tcpip_thread+0x4c>)
 8006df2:	f00a fe2b 	bl	8011a4c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <tcpip_thread+0x50>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <tcpip_thread+0x50>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <tcpip_thread+0x54>)
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	4610      	mov	r0, r2
 8006e08:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4619      	mov	r1, r3
 8006e10:	480b      	ldr	r0, [pc, #44]	; (8006e40 <tcpip_thread+0x58>)
 8006e12:	f7ff ffb3 	bl	8006d7c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <tcpip_thread+0x5c>)
 8006e1e:	2291      	movs	r2, #145	; 0x91
 8006e20:	4909      	ldr	r1, [pc, #36]	; (8006e48 <tcpip_thread+0x60>)
 8006e22:	480a      	ldr	r0, [pc, #40]	; (8006e4c <tcpip_thread+0x64>)
 8006e24:	f00b fec2 	bl	8012bac <iprintf>
      continue;
 8006e28:	e003      	b.n	8006e32 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f80f 	bl	8006e50 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006e32:	e7ea      	b.n	8006e0a <tcpip_thread+0x22>
 8006e34:	2000c0d0 	.word	0x2000c0d0
 8006e38:	20008a50 	.word	0x20008a50
 8006e3c:	20008a54 	.word	0x20008a54
 8006e40:	20008a58 	.word	0x20008a58
 8006e44:	080135d8 	.word	0x080135d8
 8006e48:	08013608 	.word	0x08013608
 8006e4c:	08013628 	.word	0x08013628

08006e50 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d018      	beq.n	8006e92 <tcpip_thread_handle_msg+0x42>
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d021      	beq.n	8006ea8 <tcpip_thread_handle_msg+0x58>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d126      	bne.n	8006eb6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6850      	ldr	r0, [r2, #4]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6892      	ldr	r2, [r2, #8]
 8006e74:	4611      	mov	r1, r2
 8006e76:	4798      	blx	r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fcc0 	bl	8008808 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	2009      	movs	r0, #9
 8006e8c:	f000 fe1c 	bl	8007ac8 <memp_free>
      break;
 8006e90:	e018      	b.n	8006ec4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	2008      	movs	r0, #8
 8006ea2:	f000 fe11 	bl	8007ac8 <memp_free>
      break;
 8006ea6:	e00d      	b.n	8006ec4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
      break;
 8006eb4:	e006      	b.n	8006ec4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <tcpip_thread_handle_msg+0x7c>)
 8006eb8:	22cf      	movs	r2, #207	; 0xcf
 8006eba:	4905      	ldr	r1, [pc, #20]	; (8006ed0 <tcpip_thread_handle_msg+0x80>)
 8006ebc:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <tcpip_thread_handle_msg+0x84>)
 8006ebe:	f00b fe75 	bl	8012bac <iprintf>
      break;
 8006ec2:	bf00      	nop
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	080135d8 	.word	0x080135d8
 8006ed0:	08013608 	.word	0x08013608
 8006ed4:	08013628 	.word	0x08013628

08006ed8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006ee4:	481a      	ldr	r0, [pc, #104]	; (8006f50 <tcpip_inpkt+0x78>)
 8006ee6:	f00a fd76 	bl	80119d6 <sys_mbox_valid>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <tcpip_inpkt+0x24>
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <tcpip_inpkt+0x7c>)
 8006ef2:	22fc      	movs	r2, #252	; 0xfc
 8006ef4:	4918      	ldr	r1, [pc, #96]	; (8006f58 <tcpip_inpkt+0x80>)
 8006ef6:	4819      	ldr	r0, [pc, #100]	; (8006f5c <tcpip_inpkt+0x84>)
 8006ef8:	f00b fe58 	bl	8012bac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006efc:	2009      	movs	r0, #9
 8006efe:	f000 fd91 	bl	8007a24 <memp_malloc>
 8006f02:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	e01a      	b.n	8006f46 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	4809      	ldr	r0, [pc, #36]	; (8006f50 <tcpip_inpkt+0x78>)
 8006f2c:	f00a fcfa 	bl	8011924 <sys_mbox_trypost>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d006      	beq.n	8006f44 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006f36:	6979      	ldr	r1, [r7, #20]
 8006f38:	2009      	movs	r0, #9
 8006f3a:	f000 fdc5 	bl	8007ac8 <memp_free>
    return ERR_MEM;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	e000      	b.n	8006f46 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006f44:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20008a58 	.word	0x20008a58
 8006f54:	080135d8 	.word	0x080135d8
 8006f58:	08013650 	.word	0x08013650
 8006f5c:	08013628 	.word	0x08013628

08006f60 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f70:	f003 0318 	and.w	r3, r3, #24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <tcpip_input+0x3c>)
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ffab 	bl	8006ed8 <tcpip_inpkt>
 8006f82:	4603      	mov	r3, r0
 8006f84:	e005      	b.n	8006f92 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006f86:	4a06      	ldr	r2, [pc, #24]	; (8006fa0 <tcpip_input+0x40>)
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff ffa4 	bl	8006ed8 <tcpip_inpkt>
 8006f90:	4603      	mov	r3, r0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	08011735 	.word	0x08011735
 8006fa0:	08010655 	.word	0x08010655

08006fa4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006fae:	4819      	ldr	r0, [pc, #100]	; (8007014 <tcpip_try_callback+0x70>)
 8006fb0:	f00a fd11 	bl	80119d6 <sys_mbox_valid>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <tcpip_try_callback+0x24>
 8006fba:	4b17      	ldr	r3, [pc, #92]	; (8007018 <tcpip_try_callback+0x74>)
 8006fbc:	f240 125d 	movw	r2, #349	; 0x15d
 8006fc0:	4916      	ldr	r1, [pc, #88]	; (800701c <tcpip_try_callback+0x78>)
 8006fc2:	4817      	ldr	r0, [pc, #92]	; (8007020 <tcpip_try_callback+0x7c>)
 8006fc4:	f00b fdf2 	bl	8012bac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006fc8:	2008      	movs	r0, #8
 8006fca:	f000 fd2b 	bl	8007a24 <memp_malloc>
 8006fce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <tcpip_try_callback+0x38>
    return ERR_MEM;
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fda:	e017      	b.n	800700c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	4808      	ldr	r0, [pc, #32]	; (8007014 <tcpip_try_callback+0x70>)
 8006ff2:	f00a fc97 	bl	8011924 <sys_mbox_trypost>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	2008      	movs	r0, #8
 8007000:	f000 fd62 	bl	8007ac8 <memp_free>
    return ERR_MEM;
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
 8007008:	e000      	b.n	800700c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20008a58 	.word	0x20008a58
 8007018:	080135d8 	.word	0x080135d8
 800701c:	08013650 	.word	0x08013650
 8007020:	08013628 	.word	0x08013628

08007024 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800702e:	f000 f871 	bl	8007114 <lwip_init>

  tcpip_init_done = initfunc;
 8007032:	4a17      	ldr	r2, [pc, #92]	; (8007090 <tcpip_init+0x6c>)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007038:	4a16      	ldr	r2, [pc, #88]	; (8007094 <tcpip_init+0x70>)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800703e:	2106      	movs	r1, #6
 8007040:	4815      	ldr	r0, [pc, #84]	; (8007098 <tcpip_init+0x74>)
 8007042:	f00a fc4d 	bl	80118e0 <sys_mbox_new>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <tcpip_init+0x78>)
 800704e:	f240 2261 	movw	r2, #609	; 0x261
 8007052:	4913      	ldr	r1, [pc, #76]	; (80070a0 <tcpip_init+0x7c>)
 8007054:	4813      	ldr	r0, [pc, #76]	; (80070a4 <tcpip_init+0x80>)
 8007056:	f00b fda9 	bl	8012bac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800705a:	4813      	ldr	r0, [pc, #76]	; (80070a8 <tcpip_init+0x84>)
 800705c:	f00a fcda 	bl	8011a14 <sys_mutex_new>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <tcpip_init+0x78>)
 8007068:	f240 2265 	movw	r2, #613	; 0x265
 800706c:	490f      	ldr	r1, [pc, #60]	; (80070ac <tcpip_init+0x88>)
 800706e:	480d      	ldr	r0, [pc, #52]	; (80070a4 <tcpip_init+0x80>)
 8007070:	f00b fd9c 	bl	8012bac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707c:	2200      	movs	r2, #0
 800707e:	490c      	ldr	r1, [pc, #48]	; (80070b0 <tcpip_init+0x8c>)
 8007080:	480c      	ldr	r0, [pc, #48]	; (80070b4 <tcpip_init+0x90>)
 8007082:	f00a fcff 	bl	8011a84 <sys_thread_new>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20008a50 	.word	0x20008a50
 8007094:	20008a54 	.word	0x20008a54
 8007098:	20008a58 	.word	0x20008a58
 800709c:	080135d8 	.word	0x080135d8
 80070a0:	08013660 	.word	0x08013660
 80070a4:	08013628 	.word	0x08013628
 80070a8:	2000c0d0 	.word	0x2000c0d0
 80070ac:	08013684 	.word	0x08013684
 80070b0:	08006de9 	.word	0x08006de9
 80070b4:	080136a8 	.word	0x080136a8

080070b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80070c2:	88fb      	ldrh	r3, [r7, #6]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	b29b      	uxth	r3, r3
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	061a      	lsls	r2, r3, #24
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0e1b      	lsrs	r3, r3, #24
 8007106:	4313      	orrs	r3, r2
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800711e:	f00a fc6b 	bl	80119f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007122:	f000 f8d5 	bl	80072d0 <mem_init>
  memp_init();
 8007126:	f000 fc31 	bl	800798c <memp_init>
  pbuf_init();
  netif_init();
 800712a:	f000 fcf7 	bl	8007b1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800712e:	f007 ff63 	bl	800eff8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007132:	f001 fe03 	bl	8008d3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007136:	f007 fea7 	bl	800ee88 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <ptr_to_mem+0x20>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	4413      	add	r3, r2
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20008a5c 	.word	0x20008a5c

08007168 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a05      	ldr	r2, [pc, #20]	; (8007188 <mem_to_ptr+0x20>)
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	b29b      	uxth	r3, r3
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20008a5c 	.word	0x20008a5c

0800718c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007194:	4b45      	ldr	r3, [pc, #276]	; (80072ac <plug_holes+0x120>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	429a      	cmp	r2, r3
 800719c:	d206      	bcs.n	80071ac <plug_holes+0x20>
 800719e:	4b44      	ldr	r3, [pc, #272]	; (80072b0 <plug_holes+0x124>)
 80071a0:	f240 12df 	movw	r2, #479	; 0x1df
 80071a4:	4943      	ldr	r1, [pc, #268]	; (80072b4 <plug_holes+0x128>)
 80071a6:	4844      	ldr	r0, [pc, #272]	; (80072b8 <plug_holes+0x12c>)
 80071a8:	f00b fd00 	bl	8012bac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80071ac:	4b43      	ldr	r3, [pc, #268]	; (80072bc <plug_holes+0x130>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d306      	bcc.n	80071c4 <plug_holes+0x38>
 80071b6:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <plug_holes+0x124>)
 80071b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80071bc:	4940      	ldr	r1, [pc, #256]	; (80072c0 <plug_holes+0x134>)
 80071be:	483e      	ldr	r0, [pc, #248]	; (80072b8 <plug_holes+0x12c>)
 80071c0:	f00b fcf4 	bl	8012bac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	791b      	ldrb	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <plug_holes+0x4e>
 80071cc:	4b38      	ldr	r3, [pc, #224]	; (80072b0 <plug_holes+0x124>)
 80071ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80071d2:	493c      	ldr	r1, [pc, #240]	; (80072c4 <plug_holes+0x138>)
 80071d4:	4838      	ldr	r0, [pc, #224]	; (80072b8 <plug_holes+0x12c>)
 80071d6:	f00b fce9 	bl	8012bac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071e2:	d906      	bls.n	80071f2 <plug_holes+0x66>
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <plug_holes+0x124>)
 80071e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80071ea:	4937      	ldr	r1, [pc, #220]	; (80072c8 <plug_holes+0x13c>)
 80071ec:	4832      	ldr	r0, [pc, #200]	; (80072b8 <plug_holes+0x12c>)
 80071ee:	f00b fcdd 	bl	8012bac <iprintf>

  nmem = ptr_to_mem(mem->next);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff ffa4 	bl	8007144 <ptr_to_mem>
 80071fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d024      	beq.n	8007250 <plug_holes+0xc4>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d120      	bne.n	8007250 <plug_holes+0xc4>
 800720e:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <plug_holes+0x130>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	429a      	cmp	r2, r3
 8007216:	d01b      	beq.n	8007250 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <plug_holes+0x140>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	429a      	cmp	r2, r3
 8007220:	d102      	bne.n	8007228 <plug_holes+0x9c>
      lfree = mem;
 8007222:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <plug_holes+0x140>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007238:	d00a      	beq.n	8007250 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff ff80 	bl	8007144 <ptr_to_mem>
 8007244:	4604      	mov	r4, r0
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff ff8e 	bl	8007168 <mem_to_ptr>
 800724c:	4603      	mov	r3, r0
 800724e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ff75 	bl	8007144 <ptr_to_mem>
 800725a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d01f      	beq.n	80072a4 <plug_holes+0x118>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11b      	bne.n	80072a4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800726c:	4b17      	ldr	r3, [pc, #92]	; (80072cc <plug_holes+0x140>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d102      	bne.n	800727c <plug_holes+0xf0>
      lfree = pmem;
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <plug_holes+0x140>)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800728c:	d00a      	beq.n	80072a4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff ff56 	bl	8007144 <ptr_to_mem>
 8007298:	4604      	mov	r4, r0
 800729a:	68b8      	ldr	r0, [r7, #8]
 800729c:	f7ff ff64 	bl	8007168 <mem_to_ptr>
 80072a0:	4603      	mov	r3, r0
 80072a2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd90      	pop	{r4, r7, pc}
 80072ac:	20008a5c 	.word	0x20008a5c
 80072b0:	080136b8 	.word	0x080136b8
 80072b4:	080136e8 	.word	0x080136e8
 80072b8:	08013700 	.word	0x08013700
 80072bc:	20008a60 	.word	0x20008a60
 80072c0:	08013728 	.word	0x08013728
 80072c4:	08013744 	.word	0x08013744
 80072c8:	08013760 	.word	0x08013760
 80072cc:	20008a68 	.word	0x20008a68

080072d0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <mem_init+0x84>)
 80072d8:	3303      	adds	r3, #3
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	461a      	mov	r2, r3
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <mem_init+0x88>)
 80072e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80072e4:	4b1c      	ldr	r3, [pc, #112]	; (8007358 <mem_init+0x88>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80072f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80072fe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007302:	f7ff ff1f 	bl	8007144 <ptr_to_mem>
 8007306:	4602      	mov	r2, r0
 8007308:	4b14      	ldr	r3, [pc, #80]	; (800735c <mem_init+0x8c>)
 800730a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <mem_init+0x8c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2201      	movs	r2, #1
 8007312:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007314:	4b11      	ldr	r3, [pc, #68]	; (800735c <mem_init+0x8c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800731c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <mem_init+0x8c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007326:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007328:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <mem_init+0x88>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <mem_init+0x90>)
 800732e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007330:	480c      	ldr	r0, [pc, #48]	; (8007364 <mem_init+0x94>)
 8007332:	f00a fb6f 	bl	8011a14 <sys_mutex_new>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d006      	beq.n	800734a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <mem_init+0x98>)
 800733e:	f240 221f 	movw	r2, #543	; 0x21f
 8007342:	490a      	ldr	r1, [pc, #40]	; (800736c <mem_init+0x9c>)
 8007344:	480a      	ldr	r0, [pc, #40]	; (8007370 <mem_init+0xa0>)
 8007346:	f00b fc31 	bl	8012bac <iprintf>
  }
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	2000c0ec 	.word	0x2000c0ec
 8007358:	20008a5c 	.word	0x20008a5c
 800735c:	20008a60 	.word	0x20008a60
 8007360:	20008a68 	.word	0x20008a68
 8007364:	20008a64 	.word	0x20008a64
 8007368:	080136b8 	.word	0x080136b8
 800736c:	0801378c 	.word	0x0801378c
 8007370:	08013700 	.word	0x08013700

08007374 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fef3 	bl	8007168 <mem_to_ptr>
 8007382:	4603      	mov	r3, r0
 8007384:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff feda 	bl	8007144 <ptr_to_mem>
 8007390:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fed4 	bl	8007144 <ptr_to_mem>
 800739c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073a6:	d818      	bhi.n	80073da <mem_link_valid+0x66>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073b0:	d813      	bhi.n	80073da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80073b6:	8afa      	ldrh	r2, [r7, #22]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	8afa      	ldrh	r2, [r7, #22]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d109      	bne.n	80073da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <mem_link_valid+0x74>)
 80073c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d006      	beq.n	80073de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	885b      	ldrh	r3, [r3, #2]
 80073d4:	8afa      	ldrh	r2, [r7, #22]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d001      	beq.n	80073de <mem_link_valid+0x6a>
    return 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <mem_link_valid+0x6c>
  }
  return 1;
 80073de:	2301      	movs	r3, #1
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20008a60 	.word	0x20008a60

080073ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d070      	beq.n	80074dc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007404:	4b37      	ldr	r3, [pc, #220]	; (80074e4 <mem_free+0xf8>)
 8007406:	f240 2273 	movw	r2, #627	; 0x273
 800740a:	4937      	ldr	r1, [pc, #220]	; (80074e8 <mem_free+0xfc>)
 800740c:	4837      	ldr	r0, [pc, #220]	; (80074ec <mem_free+0x100>)
 800740e:	f00b fbcd 	bl	8012bac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007412:	f00a fb5d 	bl	8011ad0 <sys_arch_protect>
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f00a fb67 	bl	8011aec <sys_arch_unprotect>
    return;
 800741e:	e05e      	b.n	80074de <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3b08      	subs	r3, #8
 8007424:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007426:	4b32      	ldr	r3, [pc, #200]	; (80074f0 <mem_free+0x104>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	429a      	cmp	r2, r3
 800742e:	d306      	bcc.n	800743e <mem_free+0x52>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 020c 	add.w	r2, r3, #12
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <mem_free+0x108>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d90d      	bls.n	800745a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <mem_free+0xf8>)
 8007440:	f240 227f 	movw	r2, #639	; 0x27f
 8007444:	492c      	ldr	r1, [pc, #176]	; (80074f8 <mem_free+0x10c>)
 8007446:	4829      	ldr	r0, [pc, #164]	; (80074ec <mem_free+0x100>)
 8007448:	f00b fbb0 	bl	8012bac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800744c:	f00a fb40 	bl	8011ad0 <sys_arch_protect>
 8007450:	6138      	str	r0, [r7, #16]
 8007452:	6938      	ldr	r0, [r7, #16]
 8007454:	f00a fb4a 	bl	8011aec <sys_arch_unprotect>
    return;
 8007458:	e041      	b.n	80074de <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800745a:	4828      	ldr	r0, [pc, #160]	; (80074fc <mem_free+0x110>)
 800745c:	f00a faf6 	bl	8011a4c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	791b      	ldrb	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d110      	bne.n	800748a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <mem_free+0xf8>)
 800746a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800746e:	4924      	ldr	r1, [pc, #144]	; (8007500 <mem_free+0x114>)
 8007470:	481e      	ldr	r0, [pc, #120]	; (80074ec <mem_free+0x100>)
 8007472:	f00b fb9b 	bl	8012bac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007476:	4821      	ldr	r0, [pc, #132]	; (80074fc <mem_free+0x110>)
 8007478:	f00a faf7 	bl	8011a6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800747c:	f00a fb28 	bl	8011ad0 <sys_arch_protect>
 8007480:	6178      	str	r0, [r7, #20]
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f00a fb32 	bl	8011aec <sys_arch_unprotect>
    return;
 8007488:	e029      	b.n	80074de <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800748a:	69f8      	ldr	r0, [r7, #28]
 800748c:	f7ff ff72 	bl	8007374 <mem_link_valid>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d110      	bne.n	80074b8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <mem_free+0xf8>)
 8007498:	f240 2295 	movw	r2, #661	; 0x295
 800749c:	4919      	ldr	r1, [pc, #100]	; (8007504 <mem_free+0x118>)
 800749e:	4813      	ldr	r0, [pc, #76]	; (80074ec <mem_free+0x100>)
 80074a0:	f00b fb84 	bl	8012bac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80074a4:	4815      	ldr	r0, [pc, #84]	; (80074fc <mem_free+0x110>)
 80074a6:	f00a fae0 	bl	8011a6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80074aa:	f00a fb11 	bl	8011ad0 <sys_arch_protect>
 80074ae:	61b8      	str	r0, [r7, #24]
 80074b0:	69b8      	ldr	r0, [r7, #24]
 80074b2:	f00a fb1b 	bl	8011aec <sys_arch_unprotect>
    return;
 80074b6:	e012      	b.n	80074de <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2200      	movs	r2, #0
 80074bc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <mem_free+0x11c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d202      	bcs.n	80074ce <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <mem_free+0x11c>)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80074ce:	69f8      	ldr	r0, [r7, #28]
 80074d0:	f7ff fe5c 	bl	800718c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <mem_free+0x110>)
 80074d6:	f00a fac8 	bl	8011a6a <sys_mutex_unlock>
 80074da:	e000      	b.n	80074de <mem_free+0xf2>
    return;
 80074dc:	bf00      	nop
}
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	080136b8 	.word	0x080136b8
 80074e8:	080137a8 	.word	0x080137a8
 80074ec:	08013700 	.word	0x08013700
 80074f0:	20008a5c 	.word	0x20008a5c
 80074f4:	20008a60 	.word	0x20008a60
 80074f8:	080137cc 	.word	0x080137cc
 80074fc:	20008a64 	.word	0x20008a64
 8007500:	080137e8 	.word	0x080137e8
 8007504:	08013810 	.word	0x08013810
 8007508:	20008a68 	.word	0x20008a68

0800750c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007518:	887b      	ldrh	r3, [r7, #2]
 800751a:	3303      	adds	r3, #3
 800751c:	b29b      	uxth	r3, r3
 800751e:	f023 0303 	bic.w	r3, r3, #3
 8007522:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007524:	8bfb      	ldrh	r3, [r7, #30]
 8007526:	2b0b      	cmp	r3, #11
 8007528:	d801      	bhi.n	800752e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800752a:	230c      	movs	r3, #12
 800752c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800752e:	8bfb      	ldrh	r3, [r7, #30]
 8007530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007534:	d803      	bhi.n	800753e <mem_trim+0x32>
 8007536:	8bfa      	ldrh	r2, [r7, #30]
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	429a      	cmp	r2, r3
 800753c:	d201      	bcs.n	8007542 <mem_trim+0x36>
    return NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	e0d8      	b.n	80076f4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007542:	4b6e      	ldr	r3, [pc, #440]	; (80076fc <mem_trim+0x1f0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d304      	bcc.n	8007556 <mem_trim+0x4a>
 800754c:	4b6c      	ldr	r3, [pc, #432]	; (8007700 <mem_trim+0x1f4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d306      	bcc.n	8007564 <mem_trim+0x58>
 8007556:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <mem_trim+0x1f8>)
 8007558:	f240 22d2 	movw	r2, #722	; 0x2d2
 800755c:	496a      	ldr	r1, [pc, #424]	; (8007708 <mem_trim+0x1fc>)
 800755e:	486b      	ldr	r0, [pc, #428]	; (800770c <mem_trim+0x200>)
 8007560:	f00b fb24 	bl	8012bac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007564:	4b65      	ldr	r3, [pc, #404]	; (80076fc <mem_trim+0x1f0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d304      	bcc.n	8007578 <mem_trim+0x6c>
 800756e:	4b64      	ldr	r3, [pc, #400]	; (8007700 <mem_trim+0x1f4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d307      	bcc.n	8007588 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007578:	f00a faaa 	bl	8011ad0 <sys_arch_protect>
 800757c:	60b8      	str	r0, [r7, #8]
 800757e:	68b8      	ldr	r0, [r7, #8]
 8007580:	f00a fab4 	bl	8011aec <sys_arch_unprotect>
    return rmem;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	e0b5      	b.n	80076f4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3b08      	subs	r3, #8
 800758c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800758e:	69b8      	ldr	r0, [r7, #24]
 8007590:	f7ff fdea 	bl	8007168 <mem_to_ptr>
 8007594:	4603      	mov	r3, r0
 8007596:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	881a      	ldrh	r2, [r3, #0]
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b08      	subs	r3, #8
 80075a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80075a6:	8bfa      	ldrh	r2, [r7, #30]
 80075a8:	8abb      	ldrh	r3, [r7, #20]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d906      	bls.n	80075bc <mem_trim+0xb0>
 80075ae:	4b55      	ldr	r3, [pc, #340]	; (8007704 <mem_trim+0x1f8>)
 80075b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80075b4:	4956      	ldr	r1, [pc, #344]	; (8007710 <mem_trim+0x204>)
 80075b6:	4855      	ldr	r0, [pc, #340]	; (800770c <mem_trim+0x200>)
 80075b8:	f00b faf8 	bl	8012bac <iprintf>
  if (newsize > size) {
 80075bc:	8bfa      	ldrh	r2, [r7, #30]
 80075be:	8abb      	ldrh	r3, [r7, #20]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d901      	bls.n	80075c8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	e095      	b.n	80076f4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80075c8:	8bfa      	ldrh	r2, [r7, #30]
 80075ca:	8abb      	ldrh	r3, [r7, #20]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d101      	bne.n	80075d4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	e08f      	b.n	80076f4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80075d4:	484f      	ldr	r0, [pc, #316]	; (8007714 <mem_trim+0x208>)
 80075d6:	f00a fa39 	bl	8011a4c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fdb0 	bl	8007144 <ptr_to_mem>
 80075e4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d13f      	bne.n	800766e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075f6:	d106      	bne.n	8007606 <mem_trim+0xfa>
 80075f8:	4b42      	ldr	r3, [pc, #264]	; (8007704 <mem_trim+0x1f8>)
 80075fa:	f240 22f5 	movw	r2, #757	; 0x2f5
 80075fe:	4946      	ldr	r1, [pc, #280]	; (8007718 <mem_trim+0x20c>)
 8007600:	4842      	ldr	r0, [pc, #264]	; (800770c <mem_trim+0x200>)
 8007602:	f00b fad3 	bl	8012bac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800760c:	8afa      	ldrh	r2, [r7, #22]
 800760e:	8bfb      	ldrh	r3, [r7, #30]
 8007610:	4413      	add	r3, r2
 8007612:	b29b      	uxth	r3, r3
 8007614:	3308      	adds	r3, #8
 8007616:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007618:	4b40      	ldr	r3, [pc, #256]	; (800771c <mem_trim+0x210>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	d106      	bne.n	8007630 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fd8d 	bl	8007144 <ptr_to_mem>
 800762a:	4602      	mov	r2, r0
 800762c:	4b3b      	ldr	r3, [pc, #236]	; (800771c <mem_trim+0x210>)
 800762e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fd86 	bl	8007144 <ptr_to_mem>
 8007638:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2200      	movs	r2, #0
 800763e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	89ba      	ldrh	r2, [r7, #12]
 8007644:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	8afa      	ldrh	r2, [r7, #22]
 800764a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	89fa      	ldrh	r2, [r7, #14]
 8007650:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800765a:	d047      	beq.n	80076ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fd6f 	bl	8007144 <ptr_to_mem>
 8007666:	4602      	mov	r2, r0
 8007668:	89fb      	ldrh	r3, [r7, #14]
 800766a:	8053      	strh	r3, [r2, #2]
 800766c:	e03e      	b.n	80076ec <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800766e:	8bfb      	ldrh	r3, [r7, #30]
 8007670:	f103 0214 	add.w	r2, r3, #20
 8007674:	8abb      	ldrh	r3, [r7, #20]
 8007676:	429a      	cmp	r2, r3
 8007678:	d838      	bhi.n	80076ec <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800767a:	8afa      	ldrh	r2, [r7, #22]
 800767c:	8bfb      	ldrh	r3, [r7, #30]
 800767e:	4413      	add	r3, r2
 8007680:	b29b      	uxth	r3, r3
 8007682:	3308      	adds	r3, #8
 8007684:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800768e:	d106      	bne.n	800769e <mem_trim+0x192>
 8007690:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <mem_trim+0x1f8>)
 8007692:	f240 3216 	movw	r2, #790	; 0x316
 8007696:	4920      	ldr	r1, [pc, #128]	; (8007718 <mem_trim+0x20c>)
 8007698:	481c      	ldr	r0, [pc, #112]	; (800770c <mem_trim+0x200>)
 800769a:	f00b fa87 	bl	8012bac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800769e:	89fb      	ldrh	r3, [r7, #14]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fd4f 	bl	8007144 <ptr_to_mem>
 80076a6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <mem_trim+0x210>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d202      	bcs.n	80076b8 <mem_trim+0x1ac>
      lfree = mem2;
 80076b2:	4a1a      	ldr	r2, [pc, #104]	; (800771c <mem_trim+0x210>)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2200      	movs	r2, #0
 80076bc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	881a      	ldrh	r2, [r3, #0]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	8afa      	ldrh	r2, [r7, #22]
 80076ca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	89fa      	ldrh	r2, [r7, #14]
 80076d0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076da:	d007      	beq.n	80076ec <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fd2f 	bl	8007144 <ptr_to_mem>
 80076e6:	4602      	mov	r2, r0
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80076ec:	4809      	ldr	r0, [pc, #36]	; (8007714 <mem_trim+0x208>)
 80076ee:	f00a f9bc 	bl	8011a6a <sys_mutex_unlock>
  return rmem;
 80076f2:	687b      	ldr	r3, [r7, #4]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20008a5c 	.word	0x20008a5c
 8007700:	20008a60 	.word	0x20008a60
 8007704:	080136b8 	.word	0x080136b8
 8007708:	08013844 	.word	0x08013844
 800770c:	08013700 	.word	0x08013700
 8007710:	0801385c 	.word	0x0801385c
 8007714:	20008a64 	.word	0x20008a64
 8007718:	0801387c 	.word	0x0801387c
 800771c:	20008a68 	.word	0x20008a68

08007720 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <mem_malloc+0x14>
    return NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	e0e2      	b.n	80078fa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	3303      	adds	r3, #3
 8007738:	b29b      	uxth	r3, r3
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007740:	8bbb      	ldrh	r3, [r7, #28]
 8007742:	2b0b      	cmp	r3, #11
 8007744:	d801      	bhi.n	800774a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007746:	230c      	movs	r3, #12
 8007748:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800774a:	8bbb      	ldrh	r3, [r7, #28]
 800774c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007750:	d803      	bhi.n	800775a <mem_malloc+0x3a>
 8007752:	8bba      	ldrh	r2, [r7, #28]
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	429a      	cmp	r2, r3
 8007758:	d201      	bcs.n	800775e <mem_malloc+0x3e>
    return NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	e0cd      	b.n	80078fa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800775e:	4869      	ldr	r0, [pc, #420]	; (8007904 <mem_malloc+0x1e4>)
 8007760:	f00a f974 	bl	8011a4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007764:	4b68      	ldr	r3, [pc, #416]	; (8007908 <mem_malloc+0x1e8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fcfd 	bl	8007168 <mem_to_ptr>
 800776e:	4603      	mov	r3, r0
 8007770:	83fb      	strh	r3, [r7, #30]
 8007772:	e0b7      	b.n	80078e4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007774:	8bfb      	ldrh	r3, [r7, #30]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fce4 	bl	8007144 <ptr_to_mem>
 800777c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	791b      	ldrb	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 80a7 	bne.w	80078d6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	8bfb      	ldrh	r3, [r7, #30]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	f1a3 0208 	sub.w	r2, r3, #8
 8007796:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007798:	429a      	cmp	r2, r3
 800779a:	f0c0 809c 	bcc.w	80078d6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	8bfb      	ldrh	r3, [r7, #30]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f1a3 0208 	sub.w	r2, r3, #8
 80077ac:	8bbb      	ldrh	r3, [r7, #28]
 80077ae:	3314      	adds	r3, #20
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d333      	bcc.n	800781c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80077b4:	8bfa      	ldrh	r2, [r7, #30]
 80077b6:	8bbb      	ldrh	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3308      	adds	r3, #8
 80077be:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80077c0:	8a7b      	ldrh	r3, [r7, #18]
 80077c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077c6:	d106      	bne.n	80077d6 <mem_malloc+0xb6>
 80077c8:	4b50      	ldr	r3, [pc, #320]	; (800790c <mem_malloc+0x1ec>)
 80077ca:	f240 3287 	movw	r2, #903	; 0x387
 80077ce:	4950      	ldr	r1, [pc, #320]	; (8007910 <mem_malloc+0x1f0>)
 80077d0:	4850      	ldr	r0, [pc, #320]	; (8007914 <mem_malloc+0x1f4>)
 80077d2:	f00b f9eb 	bl	8012bac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80077d6:	8a7b      	ldrh	r3, [r7, #18]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fcb3 	bl	8007144 <ptr_to_mem>
 80077de:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	881a      	ldrh	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8bfa      	ldrh	r2, [r7, #30]
 80077f2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	8a7a      	ldrh	r2, [r7, #18]
 80077f8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2201      	movs	r2, #1
 80077fe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007808:	d00b      	beq.n	8007822 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fc98 	bl	8007144 <ptr_to_mem>
 8007814:	4602      	mov	r2, r0
 8007816:	8a7b      	ldrh	r3, [r7, #18]
 8007818:	8053      	strh	r3, [r2, #2]
 800781a:	e002      	b.n	8007822 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2201      	movs	r2, #1
 8007820:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007822:	4b39      	ldr	r3, [pc, #228]	; (8007908 <mem_malloc+0x1e8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	429a      	cmp	r2, r3
 800782a:	d127      	bne.n	800787c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800782c:	4b36      	ldr	r3, [pc, #216]	; (8007908 <mem_malloc+0x1e8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007832:	e005      	b.n	8007840 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fc83 	bl	8007144 <ptr_to_mem>
 800783e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <mem_malloc+0x132>
 8007848:	4b33      	ldr	r3, [pc, #204]	; (8007918 <mem_malloc+0x1f8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	429a      	cmp	r2, r3
 8007850:	d1f0      	bne.n	8007834 <mem_malloc+0x114>
          }
          lfree = cur;
 8007852:	4a2d      	ldr	r2, [pc, #180]	; (8007908 <mem_malloc+0x1e8>)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <mem_malloc+0x1e8>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b2e      	ldr	r3, [pc, #184]	; (8007918 <mem_malloc+0x1f8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d00b      	beq.n	800787c <mem_malloc+0x15c>
 8007864:	4b28      	ldr	r3, [pc, #160]	; (8007908 <mem_malloc+0x1e8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d006      	beq.n	800787c <mem_malloc+0x15c>
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <mem_malloc+0x1ec>)
 8007870:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007874:	4929      	ldr	r1, [pc, #164]	; (800791c <mem_malloc+0x1fc>)
 8007876:	4827      	ldr	r0, [pc, #156]	; (8007914 <mem_malloc+0x1f4>)
 8007878:	f00b f998 	bl	8012bac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800787c:	4821      	ldr	r0, [pc, #132]	; (8007904 <mem_malloc+0x1e4>)
 800787e:	f00a f8f4 	bl	8011a6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007882:	8bba      	ldrh	r2, [r7, #28]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	4413      	add	r3, r2
 8007888:	3308      	adds	r3, #8
 800788a:	4a23      	ldr	r2, [pc, #140]	; (8007918 <mem_malloc+0x1f8>)
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	4293      	cmp	r3, r2
 8007890:	d906      	bls.n	80078a0 <mem_malloc+0x180>
 8007892:	4b1e      	ldr	r3, [pc, #120]	; (800790c <mem_malloc+0x1ec>)
 8007894:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007898:	4921      	ldr	r1, [pc, #132]	; (8007920 <mem_malloc+0x200>)
 800789a:	481e      	ldr	r0, [pc, #120]	; (8007914 <mem_malloc+0x1f4>)
 800789c:	f00b f986 	bl	8012bac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d006      	beq.n	80078b8 <mem_malloc+0x198>
 80078aa:	4b18      	ldr	r3, [pc, #96]	; (800790c <mem_malloc+0x1ec>)
 80078ac:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80078b0:	491c      	ldr	r1, [pc, #112]	; (8007924 <mem_malloc+0x204>)
 80078b2:	4818      	ldr	r0, [pc, #96]	; (8007914 <mem_malloc+0x1f4>)
 80078b4:	f00b f97a 	bl	8012bac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d006      	beq.n	80078d0 <mem_malloc+0x1b0>
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <mem_malloc+0x1ec>)
 80078c4:	f240 32be 	movw	r2, #958	; 0x3be
 80078c8:	4917      	ldr	r1, [pc, #92]	; (8007928 <mem_malloc+0x208>)
 80078ca:	4812      	ldr	r0, [pc, #72]	; (8007914 <mem_malloc+0x1f4>)
 80078cc:	f00b f96e 	bl	8012bac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3308      	adds	r3, #8
 80078d4:	e011      	b.n	80078fa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80078d6:	8bfb      	ldrh	r3, [r7, #30]
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fc33 	bl	8007144 <ptr_to_mem>
 80078de:	4603      	mov	r3, r0
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80078e4:	8bfa      	ldrh	r2, [r7, #30]
 80078e6:	8bbb      	ldrh	r3, [r7, #28]
 80078e8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80078ec:	429a      	cmp	r2, r3
 80078ee:	f4ff af41 	bcc.w	8007774 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80078f2:	4804      	ldr	r0, [pc, #16]	; (8007904 <mem_malloc+0x1e4>)
 80078f4:	f00a f8b9 	bl	8011a6a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20008a64 	.word	0x20008a64
 8007908:	20008a68 	.word	0x20008a68
 800790c:	080136b8 	.word	0x080136b8
 8007910:	0801387c 	.word	0x0801387c
 8007914:	08013700 	.word	0x08013700
 8007918:	20008a60 	.word	0x20008a60
 800791c:	08013890 	.word	0x08013890
 8007920:	080138ac 	.word	0x080138ac
 8007924:	080138dc 	.word	0x080138dc
 8007928:	0801390c 	.word	0x0801390c

0800792c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	3303      	adds	r3, #3
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e011      	b.n	8007972 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4413      	add	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4293      	cmp	r3, r2
 800797c:	dbe7      	blt.n	800794e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007992:	2300      	movs	r3, #0
 8007994:	80fb      	strh	r3, [r7, #6]
 8007996:	e009      	b.n	80079ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	4a08      	ldr	r2, [pc, #32]	; (80079bc <memp_init+0x30>)
 800799c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff ffc3 	bl	800792c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	3301      	adds	r3, #1
 80079aa:	80fb      	strh	r3, [r7, #6]
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	d9f2      	bls.n	8007998 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	08016178 	.word	0x08016178

080079c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80079c8:	f00a f882 	bl	8011ad0 <sys_arch_protect>
 80079cc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <do_memp_malloc_pool+0x3e>
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <do_memp_malloc_pool+0x58>)
 80079f2:	f240 1219 	movw	r2, #281	; 0x119
 80079f6:	4909      	ldr	r1, [pc, #36]	; (8007a1c <do_memp_malloc_pool+0x5c>)
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <do_memp_malloc_pool+0x60>)
 80079fa:	f00b f8d7 	bl	8012bac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f00a f874 	bl	8011aec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	e003      	b.n	8007a10 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f00a f86f 	bl	8011aec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	08013930 	.word	0x08013930
 8007a1c:	08013960 	.word	0x08013960
 8007a20:	08013984 	.word	0x08013984

08007a24 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	2b0c      	cmp	r3, #12
 8007a32:	d908      	bls.n	8007a46 <memp_malloc+0x22>
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <memp_malloc+0x3c>)
 8007a36:	f240 1257 	movw	r2, #343	; 0x157
 8007a3a:	490a      	ldr	r1, [pc, #40]	; (8007a64 <memp_malloc+0x40>)
 8007a3c:	480a      	ldr	r0, [pc, #40]	; (8007a68 <memp_malloc+0x44>)
 8007a3e:	f00b f8b5 	bl	8012bac <iprintf>
 8007a42:	2300      	movs	r3, #0
 8007a44:	e008      	b.n	8007a58 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	4a08      	ldr	r2, [pc, #32]	; (8007a6c <memp_malloc+0x48>)
 8007a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ffb6 	bl	80079c0 <do_memp_malloc_pool>
 8007a54:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007a56:	68fb      	ldr	r3, [r7, #12]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08013930 	.word	0x08013930
 8007a64:	080139c0 	.word	0x080139c0
 8007a68:	08013984 	.word	0x08013984
 8007a6c:	08016178 	.word	0x08016178

08007a70 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <do_memp_free_pool+0x22>
 8007a84:	4b0d      	ldr	r3, [pc, #52]	; (8007abc <do_memp_free_pool+0x4c>)
 8007a86:	f240 126d 	movw	r2, #365	; 0x16d
 8007a8a:	490d      	ldr	r1, [pc, #52]	; (8007ac0 <do_memp_free_pool+0x50>)
 8007a8c:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <do_memp_free_pool+0x54>)
 8007a8e:	f00b f88d 	bl	8012bac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007a96:	f00a f81b 	bl	8011ad0 <sys_arch_protect>
 8007a9a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007aae:	68b8      	ldr	r0, [r7, #8]
 8007ab0:	f00a f81c 	bl	8011aec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	08013930 	.word	0x08013930
 8007ac0:	080139e0 	.word	0x080139e0
 8007ac4:	08013984 	.word	0x08013984

08007ac8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d907      	bls.n	8007aea <memp_free+0x22>
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <memp_free+0x44>)
 8007adc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007ae0:	490b      	ldr	r1, [pc, #44]	; (8007b10 <memp_free+0x48>)
 8007ae2:	480c      	ldr	r0, [pc, #48]	; (8007b14 <memp_free+0x4c>)
 8007ae4:	f00b f862 	bl	8012bac <iprintf>
 8007ae8:	e00c      	b.n	8007b04 <memp_free+0x3c>

  if (mem == NULL) {
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <memp_free+0x50>)
 8007af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ffb8 	bl	8007a70 <do_memp_free_pool>
 8007b00:	e000      	b.n	8007b04 <memp_free+0x3c>
    return;
 8007b02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08013930 	.word	0x08013930
 8007b10:	08013a00 	.word	0x08013a00
 8007b14:	08013984 	.word	0x08013984
 8007b18:	08016178 	.word	0x08016178

08007b1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <netif_add+0x26>
 8007b40:	4b57      	ldr	r3, [pc, #348]	; (8007ca0 <netif_add+0x174>)
 8007b42:	f240 1227 	movw	r2, #295	; 0x127
 8007b46:	4957      	ldr	r1, [pc, #348]	; (8007ca4 <netif_add+0x178>)
 8007b48:	4857      	ldr	r0, [pc, #348]	; (8007ca8 <netif_add+0x17c>)
 8007b4a:	f00b f82f 	bl	8012bac <iprintf>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e0a2      	b.n	8007c98 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d108      	bne.n	8007b6a <netif_add+0x3e>
 8007b58:	4b51      	ldr	r3, [pc, #324]	; (8007ca0 <netif_add+0x174>)
 8007b5a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007b5e:	4953      	ldr	r1, [pc, #332]	; (8007cac <netif_add+0x180>)
 8007b60:	4851      	ldr	r0, [pc, #324]	; (8007ca8 <netif_add+0x17c>)
 8007b62:	f00b f823 	bl	8012bac <iprintf>
 8007b66:	2300      	movs	r3, #0
 8007b68:	e096      	b.n	8007c98 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007b70:	4b4f      	ldr	r3, [pc, #316]	; (8007cb0 <netif_add+0x184>)
 8007b72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007b7a:	4b4d      	ldr	r3, [pc, #308]	; (8007cb0 <netif_add+0x184>)
 8007b7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007b84:	4b4a      	ldr	r3, [pc, #296]	; (8007cb0 <netif_add+0x184>)
 8007b86:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4a45      	ldr	r2, [pc, #276]	; (8007cb4 <netif_add+0x188>)
 8007b9e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a3a      	ldr	r2, [r7, #32]
 8007bb8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007bba:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <netif_add+0x18c>)
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bc8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f913 	bl	8007dfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <netif_add+0xba>
    return NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e058      	b.n	8007c98 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bec:	2bff      	cmp	r3, #255	; 0xff
 8007bee:	d103      	bne.n	8007bf8 <netif_add+0xcc>
        netif->num = 0;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <netif_add+0x190>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e02b      	b.n	8007c5c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d106      	bne.n	8007c1a <netif_add+0xee>
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <netif_add+0x174>)
 8007c0e:	f240 128b 	movw	r2, #395	; 0x18b
 8007c12:	492b      	ldr	r1, [pc, #172]	; (8007cc0 <netif_add+0x194>)
 8007c14:	4824      	ldr	r0, [pc, #144]	; (8007ca8 <netif_add+0x17c>)
 8007c16:	f00a ffc9 	bl	8012bac <iprintf>
        num_netifs++;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2bff      	cmp	r3, #255	; 0xff
 8007c24:	dd06      	ble.n	8007c34 <netif_add+0x108>
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <netif_add+0x174>)
 8007c28:	f240 128d 	movw	r2, #397	; 0x18d
 8007c2c:	4925      	ldr	r1, [pc, #148]	; (8007cc4 <netif_add+0x198>)
 8007c2e:	481e      	ldr	r0, [pc, #120]	; (8007ca8 <netif_add+0x17c>)
 8007c30:	f00a ffbc 	bl	8012bac <iprintf>
        if (netif2->num == netif->num) {
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d108      	bne.n	8007c56 <netif_add+0x12a>
          netif->num++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007c54:	e005      	b.n	8007c62 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1d0      	bne.n	8007c04 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1be      	bne.n	8007be6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c6e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c70:	d103      	bne.n	8007c7a <netif_add+0x14e>
    netif_num = 0;
 8007c72:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <netif_add+0x18c>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e006      	b.n	8007c88 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c80:	3301      	adds	r3, #1
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <netif_add+0x18c>)
 8007c86:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007c88:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <netif_add+0x190>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <netif_add+0x190>)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	08013a1c 	.word	0x08013a1c
 8007ca4:	08013ab0 	.word	0x08013ab0
 8007ca8:	08013a6c 	.word	0x08013a6c
 8007cac:	08013acc 	.word	0x08013acc
 8007cb0:	080161ec 	.word	0x080161ec
 8007cb4:	080080d7 	.word	0x080080d7
 8007cb8:	20008aa0 	.word	0x20008aa0
 8007cbc:	2000f7f8 	.word	0x2000f7f8
 8007cc0:	08013af0 	.word	0x08013af0
 8007cc4:	08013b04 	.word	0x08013b04

08007cc8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f002 fd9d 	bl	800a814 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f007 fb15 	bl	800f30c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <netif_do_set_ipaddr+0x20>
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <netif_do_set_ipaddr+0x88>)
 8007d00:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007d04:	491c      	ldr	r1, [pc, #112]	; (8007d78 <netif_do_set_ipaddr+0x8c>)
 8007d06:	481d      	ldr	r0, [pc, #116]	; (8007d7c <netif_do_set_ipaddr+0x90>)
 8007d08:	f00a ff50 	bl	8012bac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <netif_do_set_ipaddr+0x34>
 8007d12:	4b18      	ldr	r3, [pc, #96]	; (8007d74 <netif_do_set_ipaddr+0x88>)
 8007d14:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007d18:	4917      	ldr	r1, [pc, #92]	; (8007d78 <netif_do_set_ipaddr+0x8c>)
 8007d1a:	4818      	ldr	r0, [pc, #96]	; (8007d7c <netif_do_set_ipaddr+0x90>)
 8007d1c:	f00a ff46 	bl	8012bac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d01c      	beq.n	8007d68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3304      	adds	r3, #4
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ffbf 	bl	8007cc8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <netif_do_set_ipaddr+0x6a>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	e000      	b.n	8007d58 <netif_do_set_ipaddr+0x6c>
 8007d56:	2300      	movs	r3, #0
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f8d2 	bl	8007f08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	08013a1c 	.word	0x08013a1c
 8007d78:	08013b34 	.word	0x08013b34
 8007d7c:	08013a6c 	.word	0x08013a6c

08007d80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3308      	adds	r3, #8
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d00a      	beq.n	8007db0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <netif_do_set_netmask+0x26>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	e000      	b.n	8007da8 <netif_do_set_netmask+0x28>
 8007da6:	2300      	movs	r3, #0
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d00a      	beq.n	8007dee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <netif_do_set_gw+0x26>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	e000      	b.n	8007de6 <netif_do_set_gw+0x28>
 8007de4:	2300      	movs	r3, #0
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007e18:	4b1c      	ldr	r3, [pc, #112]	; (8007e8c <netif_set_addr+0x90>)
 8007e1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007e22:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <netif_set_addr+0x90>)
 8007e24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <netif_set_addr+0x90>)
 8007e2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <netif_set_addr+0x42>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <netif_set_addr+0x46>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <netif_set_addr+0x48>
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007e4c:	f107 0310 	add.w	r3, r7, #16
 8007e50:	461a      	mov	r2, r3
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff ff49 	bl	8007cec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff ff8e 	bl	8007d80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff ffa8 	bl	8007dbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff ff35 	bl	8007cec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007e82:	bf00      	nop
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	080161ec 	.word	0x080161ec

08007e90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007e98:	4a04      	ldr	r2, [pc, #16]	; (8007eac <netif_set_default+0x1c>)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	2000f7fc 	.word	0x2000f7fc

08007eb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d107      	bne.n	8007ece <netif_set_up+0x1e>
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <netif_set_up+0x4c>)
 8007ec0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007ec4:	490e      	ldr	r1, [pc, #56]	; (8007f00 <netif_set_up+0x50>)
 8007ec6:	480f      	ldr	r0, [pc, #60]	; (8007f04 <netif_set_up+0x54>)
 8007ec8:	f00a fe70 	bl	8012bac <iprintf>
 8007ecc:	e013      	b.n	8007ef6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ee2:	f043 0301 	orr.w	r3, r3, #1
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007eee:	2103      	movs	r1, #3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f809 	bl	8007f08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	08013a1c 	.word	0x08013a1c
 8007f00:	08013ba4 	.word	0x08013ba4
 8007f04:	08013a6c 	.word	0x08013a6c

08007f08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <netif_issue_reports+0x20>
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <netif_issue_reports+0x74>)
 8007f1c:	f240 326d 	movw	r2, #877	; 0x36d
 8007f20:	4917      	ldr	r1, [pc, #92]	; (8007f80 <netif_issue_reports+0x78>)
 8007f22:	4818      	ldr	r0, [pc, #96]	; (8007f84 <netif_issue_reports+0x7c>)
 8007f24:	f00a fe42 	bl	8012bac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01e      	beq.n	8007f74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d017      	beq.n	8007f74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d013      	beq.n	8007f76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3304      	adds	r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00e      	beq.n	8007f76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f008 f937 	bl	80101e0 <etharp_request>
 8007f72:	e000      	b.n	8007f76 <netif_issue_reports+0x6e>
    return;
 8007f74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	08013a1c 	.word	0x08013a1c
 8007f80:	08013bc0 	.word	0x08013bc0
 8007f84:	08013a6c 	.word	0x08013a6c

08007f88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d107      	bne.n	8007fa6 <netif_set_down+0x1e>
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <netif_set_down+0x58>)
 8007f98:	f240 329b 	movw	r2, #923	; 0x39b
 8007f9c:	4911      	ldr	r1, [pc, #68]	; (8007fe4 <netif_set_down+0x5c>)
 8007f9e:	4812      	ldr	r0, [pc, #72]	; (8007fe8 <netif_set_down+0x60>)
 8007fa0:	f00a fe04 	bl	8012bac <iprintf>
 8007fa4:	e019      	b.n	8007fda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d012      	beq.n	8007fda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f007 fcc1 	bl	800f95c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08013a1c 	.word	0x08013a1c
 8007fe4:	08013be4 	.word	0x08013be4
 8007fe8:	08013a6c 	.word	0x08013a6c

08007fec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <netif_set_link_up+0x1e>
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <netif_set_link_up+0x5c>)
 8007ffc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008000:	4912      	ldr	r1, [pc, #72]	; (800804c <netif_set_link_up+0x60>)
 8008002:	4813      	ldr	r0, [pc, #76]	; (8008050 <netif_set_link_up+0x64>)
 8008004:	f00a fdd2 	bl	8012bac <iprintf>
 8008008:	e01b      	b.n	8008042 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d114      	bne.n	8008042 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800801e:	f043 0304 	orr.w	r3, r3, #4
 8008022:	b2da      	uxtb	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800802a:	2103      	movs	r1, #3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ff6b 	bl	8007f08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <netif_set_link_up+0x56>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	08013a1c 	.word	0x08013a1c
 800804c:	08013c04 	.word	0x08013c04
 8008050:	08013a6c 	.word	0x08013a6c

08008054 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <netif_set_link_down+0x1e>
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <netif_set_link_down+0x54>)
 8008064:	f240 4206 	movw	r2, #1030	; 0x406
 8008068:	4910      	ldr	r1, [pc, #64]	; (80080ac <netif_set_link_down+0x58>)
 800806a:	4811      	ldr	r0, [pc, #68]	; (80080b0 <netif_set_link_down+0x5c>)
 800806c:	f00a fd9e 	bl	8012bac <iprintf>
 8008070:	e017      	b.n	80080a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d010      	beq.n	80080a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008086:	f023 0304 	bic.w	r3, r3, #4
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <netif_set_link_down+0x4e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08013a1c 	.word	0x08013a1c
 80080ac:	08013c28 	.word	0x08013c28
 80080b0:	08013a6c 	.word	0x08013a6c

080080b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	61da      	str	r2, [r3, #28]
  }
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80080e2:	f06f 030b 	mvn.w	r3, #11
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <netif_get_by_index+0x48>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	e00c      	b.n	8008126 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008112:	3301      	adds	r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	79fa      	ldrb	r2, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d101      	bne.n	8008120 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	e006      	b.n	800812e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1ef      	bne.n	800810c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000f7f8 	.word	0x2000f7f8

08008140 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008146:	f009 fcc3 	bl	8011ad0 <sys_arch_protect>
 800814a:	6038      	str	r0, [r7, #0]
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <pbuf_free_ooseq+0x44>)
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	f009 fcca 	bl	8011aec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <pbuf_free_ooseq+0x48>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	e00a      	b.n	8008176 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f002 fb91 	bl	800a890 <tcp_free_ooseq>
      return;
 800816e:	e005      	b.n	800817c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f1      	bne.n	8008160 <pbuf_free_ooseq+0x20>
    }
  }
}
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	2000f800 	.word	0x2000f800
 8008188:	2000f808 	.word	0x2000f808

0800818c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008194:	f7ff ffd4 	bl	8008140 <pbuf_free_ooseq>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80081a6:	f009 fc93 	bl	8011ad0 <sys_arch_protect>
 80081aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80081ac:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <pbuf_pool_is_empty+0x4c>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <pbuf_pool_is_empty+0x4c>)
 80081b4:	2201      	movs	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f009 fc97 	bl	8011aec <sys_arch_unprotect>

  if (!queued) {
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10f      	bne.n	80081e4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80081c4:	2100      	movs	r1, #0
 80081c6:	480a      	ldr	r0, [pc, #40]	; (80081f0 <pbuf_pool_is_empty+0x50>)
 80081c8:	f7fe feec 	bl	8006fa4 <tcpip_try_callback>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <pbuf_pool_is_empty+0x44>
 80081d2:	f009 fc7d 	bl	8011ad0 <sys_arch_protect>
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <pbuf_pool_is_empty+0x4c>)
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f009 fc84 	bl	8011aec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	2000f800 	.word	0x2000f800
 80081f0:	0800818d 	.word	0x0800818d

080081f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4611      	mov	r1, r2
 8008200:	461a      	mov	r2, r3
 8008202:	460b      	mov	r3, r1
 8008204:	80fb      	strh	r3, [r7, #6]
 8008206:	4613      	mov	r3, r2
 8008208:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	88fa      	ldrh	r2, [r7, #6]
 800821a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	88ba      	ldrh	r2, [r7, #4]
 8008220:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008222:	8b3b      	ldrh	r3, [r7, #24]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	7f3a      	ldrb	r2, [r7, #28]
 800822e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	73da      	strb	r2, [r3, #15]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	; 0x30
 800824c:	af02      	add	r7, sp, #8
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
 8008252:	460b      	mov	r3, r1
 8008254:	80bb      	strh	r3, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800825e:	887b      	ldrh	r3, [r7, #2]
 8008260:	2b41      	cmp	r3, #65	; 0x41
 8008262:	d00b      	beq.n	800827c <pbuf_alloc+0x34>
 8008264:	2b41      	cmp	r3, #65	; 0x41
 8008266:	dc02      	bgt.n	800826e <pbuf_alloc+0x26>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d007      	beq.n	800827c <pbuf_alloc+0x34>
 800826c:	e0c2      	b.n	80083f4 <pbuf_alloc+0x1ac>
 800826e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008272:	d00b      	beq.n	800828c <pbuf_alloc+0x44>
 8008274:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008278:	d070      	beq.n	800835c <pbuf_alloc+0x114>
 800827a:	e0bb      	b.n	80083f4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800827c:	887a      	ldrh	r2, [r7, #2]
 800827e:	88bb      	ldrh	r3, [r7, #4]
 8008280:	4619      	mov	r1, r3
 8008282:	2000      	movs	r0, #0
 8008284:	f000 f8d2 	bl	800842c <pbuf_alloc_reference>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800828a:	e0bd      	b.n	8008408 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800828c:	2300      	movs	r3, #0
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008294:	88bb      	ldrh	r3, [r7, #4]
 8008296:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008298:	200c      	movs	r0, #12
 800829a:	f7ff fbc3 	bl	8007a24 <memp_malloc>
 800829e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80082a6:	f7ff ff7b 	bl	80081a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80082b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082b2:	f000 faa9 	bl	8008808 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e0a7      	b.n	800840a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80082ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082bc:	3303      	adds	r3, #3
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	8b7a      	ldrh	r2, [r7, #26]
 80082ce:	4293      	cmp	r3, r2
 80082d0:	bf28      	it	cs
 80082d2:	4613      	movcs	r3, r2
 80082d4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80082d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082d8:	3310      	adds	r3, #16
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4413      	add	r3, r2
 80082de:	3303      	adds	r3, #3
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	4618      	mov	r0, r3
 80082e6:	89f9      	ldrh	r1, [r7, #14]
 80082e8:	8b7a      	ldrh	r2, [r7, #26]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	887b      	ldrh	r3, [r7, #2]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	460b      	mov	r3, r1
 80082f4:	4601      	mov	r1, r0
 80082f6:	6938      	ldr	r0, [r7, #16]
 80082f8:	f7ff ff7c 	bl	80081f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <pbuf_alloc+0xce>
 8008308:	4b42      	ldr	r3, [pc, #264]	; (8008414 <pbuf_alloc+0x1cc>)
 800830a:	f240 1201 	movw	r2, #257	; 0x101
 800830e:	4942      	ldr	r1, [pc, #264]	; (8008418 <pbuf_alloc+0x1d0>)
 8008310:	4842      	ldr	r0, [pc, #264]	; (800841c <pbuf_alloc+0x1d4>)
 8008312:	f00a fc4b 	bl	8012bac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008318:	3303      	adds	r3, #3
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008322:	d106      	bne.n	8008332 <pbuf_alloc+0xea>
 8008324:	4b3b      	ldr	r3, [pc, #236]	; (8008414 <pbuf_alloc+0x1cc>)
 8008326:	f240 1203 	movw	r2, #259	; 0x103
 800832a:	493d      	ldr	r1, [pc, #244]	; (8008420 <pbuf_alloc+0x1d8>)
 800832c:	483b      	ldr	r0, [pc, #236]	; (800841c <pbuf_alloc+0x1d4>)
 800832e:	f00a fc3d 	bl	8012bac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
 800833c:	e002      	b.n	8008344 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008348:	8b7a      	ldrh	r2, [r7, #26]
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008354:	8b7b      	ldrh	r3, [r7, #26]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d19e      	bne.n	8008298 <pbuf_alloc+0x50>
      break;
 800835a:	e055      	b.n	8008408 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800835c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800835e:	3303      	adds	r3, #3
 8008360:	b29b      	uxth	r3, r3
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	b29a      	uxth	r2, r3
 8008368:	88bb      	ldrh	r3, [r7, #4]
 800836a:	3303      	adds	r3, #3
 800836c:	b29b      	uxth	r3, r3
 800836e:	f023 0303 	bic.w	r3, r3, #3
 8008372:	b29b      	uxth	r3, r3
 8008374:	4413      	add	r3, r2
 8008376:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008378:	8b3b      	ldrh	r3, [r7, #24]
 800837a:	3310      	adds	r3, #16
 800837c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800837e:	8b3a      	ldrh	r2, [r7, #24]
 8008380:	88bb      	ldrh	r3, [r7, #4]
 8008382:	3303      	adds	r3, #3
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	429a      	cmp	r2, r3
 800838a:	d306      	bcc.n	800839a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800838c:	8afa      	ldrh	r2, [r7, #22]
 800838e:	88bb      	ldrh	r3, [r7, #4]
 8008390:	3303      	adds	r3, #3
 8008392:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008396:	429a      	cmp	r2, r3
 8008398:	d201      	bcs.n	800839e <pbuf_alloc+0x156>
        return NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	e035      	b.n	800840a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff f9bd 	bl	8007720 <mem_malloc>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <pbuf_alloc+0x16a>
        return NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e02b      	b.n	800840a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80083b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083b4:	3310      	adds	r3, #16
 80083b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b8:	4413      	add	r3, r2
 80083ba:	3303      	adds	r3, #3
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	4618      	mov	r0, r3
 80083c2:	88b9      	ldrh	r1, [r7, #4]
 80083c4:	88ba      	ldrh	r2, [r7, #4]
 80083c6:	2300      	movs	r3, #0
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	887b      	ldrh	r3, [r7, #2]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	460b      	mov	r3, r1
 80083d0:	4601      	mov	r1, r0
 80083d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083d4:	f7ff ff0e 	bl	80081f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <pbuf_alloc+0x1be>
 80083e4:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <pbuf_alloc+0x1cc>)
 80083e6:	f240 1223 	movw	r2, #291	; 0x123
 80083ea:	490e      	ldr	r1, [pc, #56]	; (8008424 <pbuf_alloc+0x1dc>)
 80083ec:	480b      	ldr	r0, [pc, #44]	; (800841c <pbuf_alloc+0x1d4>)
 80083ee:	f00a fbdd 	bl	8012bac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80083f2:	e008      	b.n	8008406 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80083f4:	4b07      	ldr	r3, [pc, #28]	; (8008414 <pbuf_alloc+0x1cc>)
 80083f6:	f240 1227 	movw	r2, #295	; 0x127
 80083fa:	490b      	ldr	r1, [pc, #44]	; (8008428 <pbuf_alloc+0x1e0>)
 80083fc:	4807      	ldr	r0, [pc, #28]	; (800841c <pbuf_alloc+0x1d4>)
 80083fe:	f00a fbd5 	bl	8012bac <iprintf>
      return NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	e001      	b.n	800840a <pbuf_alloc+0x1c2>
      break;
 8008406:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840a:	4618      	mov	r0, r3
 800840c:	3728      	adds	r7, #40	; 0x28
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	08013c4c 	.word	0x08013c4c
 8008418:	08013c7c 	.word	0x08013c7c
 800841c:	08013cac 	.word	0x08013cac
 8008420:	08013cd4 	.word	0x08013cd4
 8008424:	08013d08 	.word	0x08013d08
 8008428:	08013d34 	.word	0x08013d34

0800842c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af02      	add	r7, sp, #8
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	807b      	strh	r3, [r7, #2]
 8008438:	4613      	mov	r3, r2
 800843a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800843c:	883b      	ldrh	r3, [r7, #0]
 800843e:	2b41      	cmp	r3, #65	; 0x41
 8008440:	d009      	beq.n	8008456 <pbuf_alloc_reference+0x2a>
 8008442:	883b      	ldrh	r3, [r7, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d006      	beq.n	8008456 <pbuf_alloc_reference+0x2a>
 8008448:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <pbuf_alloc_reference+0x5c>)
 800844a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800844e:	490f      	ldr	r1, [pc, #60]	; (800848c <pbuf_alloc_reference+0x60>)
 8008450:	480f      	ldr	r0, [pc, #60]	; (8008490 <pbuf_alloc_reference+0x64>)
 8008452:	f00a fbab 	bl	8012bac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008456:	200b      	movs	r0, #11
 8008458:	f7ff fae4 	bl	8007a24 <memp_malloc>
 800845c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	e00b      	b.n	8008480 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008468:	8879      	ldrh	r1, [r7, #2]
 800846a:	887a      	ldrh	r2, [r7, #2]
 800846c:	2300      	movs	r3, #0
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	883b      	ldrh	r3, [r7, #0]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	460b      	mov	r3, r1
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff febb 	bl	80081f4 <pbuf_init_alloced_pbuf>
  return p;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	08013c4c 	.word	0x08013c4c
 800848c:	08013d50 	.word	0x08013d50
 8008490:	08013cac 	.word	0x08013cac

08008494 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af02      	add	r7, sp, #8
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	460b      	mov	r3, r1
 80084a2:	81bb      	strh	r3, [r7, #12]
 80084a4:	4613      	mov	r3, r2
 80084a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80084ac:	8a7b      	ldrh	r3, [r7, #18]
 80084ae:	3303      	adds	r3, #3
 80084b0:	f023 0203 	bic.w	r2, r3, #3
 80084b4:	89bb      	ldrh	r3, [r7, #12]
 80084b6:	441a      	add	r2, r3
 80084b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d901      	bls.n	80084c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	e018      	b.n	80084f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80084c8:	8a7b      	ldrh	r3, [r7, #18]
 80084ca:	3303      	adds	r3, #3
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	4413      	add	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e001      	b.n	80084dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	89b9      	ldrh	r1, [r7, #12]
 80084e0:	89ba      	ldrh	r2, [r7, #12]
 80084e2:	2302      	movs	r3, #2
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	460b      	mov	r3, r1
 80084ec:	6979      	ldr	r1, [r7, #20]
 80084ee:	f7ff fe81 	bl	80081f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80084f2:	687b      	ldr	r3, [r7, #4]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d106      	bne.n	800851c <pbuf_realloc+0x20>
 800850e:	4b3a      	ldr	r3, [pc, #232]	; (80085f8 <pbuf_realloc+0xfc>)
 8008510:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008514:	4939      	ldr	r1, [pc, #228]	; (80085fc <pbuf_realloc+0x100>)
 8008516:	483a      	ldr	r0, [pc, #232]	; (8008600 <pbuf_realloc+0x104>)
 8008518:	f00a fb48 	bl	8012bac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	891b      	ldrh	r3, [r3, #8]
 8008520:	887a      	ldrh	r2, [r7, #2]
 8008522:	429a      	cmp	r2, r3
 8008524:	d264      	bcs.n	80085f0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	891a      	ldrh	r2, [r3, #8]
 800852a:	887b      	ldrh	r3, [r7, #2]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008530:	887b      	ldrh	r3, [r7, #2]
 8008532:	817b      	strh	r3, [r7, #10]
  q = p;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008538:	e018      	b.n	800856c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	895b      	ldrh	r3, [r3, #10]
 800853e:	897a      	ldrh	r2, [r7, #10]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	891a      	ldrh	r2, [r3, #8]
 8008548:	893b      	ldrh	r3, [r7, #8]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <pbuf_realloc+0x70>
 800855e:	4b26      	ldr	r3, [pc, #152]	; (80085f8 <pbuf_realloc+0xfc>)
 8008560:	f240 12af 	movw	r2, #431	; 0x1af
 8008564:	4927      	ldr	r1, [pc, #156]	; (8008604 <pbuf_realloc+0x108>)
 8008566:	4826      	ldr	r0, [pc, #152]	; (8008600 <pbuf_realloc+0x104>)
 8008568:	f00a fb20 	bl	8012bac <iprintf>
  while (rem_len > q->len) {
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	895b      	ldrh	r3, [r3, #10]
 8008570:	897a      	ldrh	r2, [r7, #10]
 8008572:	429a      	cmp	r2, r3
 8008574:	d8e1      	bhi.n	800853a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	7b1b      	ldrb	r3, [r3, #12]
 800857a:	f003 030f 	and.w	r3, r3, #15
 800857e:	2b00      	cmp	r3, #0
 8008580:	d122      	bne.n	80085c8 <pbuf_realloc+0xcc>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	895b      	ldrh	r3, [r3, #10]
 8008586:	897a      	ldrh	r2, [r7, #10]
 8008588:	429a      	cmp	r2, r3
 800858a:	d01d      	beq.n	80085c8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	7b5b      	ldrb	r3, [r3, #13]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d117      	bne.n	80085c8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	461a      	mov	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	897b      	ldrh	r3, [r7, #10]
 80085a6:	4413      	add	r3, r2
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4619      	mov	r1, r3
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7fe ffad 	bl	800750c <mem_trim>
 80085b2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <pbuf_realloc+0xcc>
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <pbuf_realloc+0xfc>)
 80085bc:	f240 12bd 	movw	r2, #445	; 0x1bd
 80085c0:	4911      	ldr	r1, [pc, #68]	; (8008608 <pbuf_realloc+0x10c>)
 80085c2:	480f      	ldr	r0, [pc, #60]	; (8008600 <pbuf_realloc+0x104>)
 80085c4:	f00a faf2 	bl	8012bac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	897a      	ldrh	r2, [r7, #10]
 80085cc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	895a      	ldrh	r2, [r3, #10]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f910 	bl	8008808 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e000      	b.n	80085f2 <pbuf_realloc+0xf6>
    return;
 80085f0:	bf00      	nop

}
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	08013c4c 	.word	0x08013c4c
 80085fc:	08013d64 	.word	0x08013d64
 8008600:	08013cac 	.word	0x08013cac
 8008604:	08013d7c 	.word	0x08013d7c
 8008608:	08013d94 	.word	0x08013d94

0800860c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <pbuf_add_header_impl+0x22>
 8008620:	4b2b      	ldr	r3, [pc, #172]	; (80086d0 <pbuf_add_header_impl+0xc4>)
 8008622:	f240 12df 	movw	r2, #479	; 0x1df
 8008626:	492b      	ldr	r1, [pc, #172]	; (80086d4 <pbuf_add_header_impl+0xc8>)
 8008628:	482b      	ldr	r0, [pc, #172]	; (80086d8 <pbuf_add_header_impl+0xcc>)
 800862a:	f00a fabf 	bl	8012bac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <pbuf_add_header_impl+0x30>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d301      	bcc.n	8008640 <pbuf_add_header_impl+0x34>
    return 1;
 800863c:	2301      	movs	r3, #1
 800863e:	e043      	b.n	80086c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <pbuf_add_header_impl+0x3e>
    return 0;
 8008646:	2300      	movs	r3, #0
 8008648:	e03e      	b.n	80086c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	891a      	ldrh	r2, [r3, #8]
 8008652:	8a7b      	ldrh	r3, [r7, #18]
 8008654:	4413      	add	r3, r2
 8008656:	b29b      	uxth	r3, r3
 8008658:	8a7a      	ldrh	r2, [r7, #18]
 800865a:	429a      	cmp	r2, r3
 800865c:	d901      	bls.n	8008662 <pbuf_add_header_impl+0x56>
    return 1;
 800865e:	2301      	movs	r3, #1
 8008660:	e032      	b.n	80086c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	7b1b      	ldrb	r3, [r3, #12]
 8008666:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008668:	8a3b      	ldrh	r3, [r7, #16]
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00c      	beq.n	800868c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	425b      	negs	r3, r3
 800867a:	4413      	add	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3310      	adds	r3, #16
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	429a      	cmp	r2, r3
 8008686:	d20d      	bcs.n	80086a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008688:	2301      	movs	r3, #1
 800868a:	e01d      	b.n	80086c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d006      	beq.n	80086a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	425b      	negs	r3, r3
 800869a:	4413      	add	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e011      	b.n	80086c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	895a      	ldrh	r2, [r3, #10]
 80086ae:	8a7b      	ldrh	r3, [r7, #18]
 80086b0:	4413      	add	r3, r2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	891a      	ldrh	r2, [r3, #8]
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	4413      	add	r3, r2
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	811a      	strh	r2, [r3, #8]


  return 0;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	08013c4c 	.word	0x08013c4c
 80086d4:	08013db0 	.word	0x08013db0
 80086d8:	08013cac 	.word	0x08013cac

080086dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80086e6:	2200      	movs	r2, #0
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff ff8e 	bl	800860c <pbuf_add_header_impl>
 80086f0:	4603      	mov	r3, r0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <pbuf_remove_header+0x1e>
 800870c:	4b20      	ldr	r3, [pc, #128]	; (8008790 <pbuf_remove_header+0x94>)
 800870e:	f240 224b 	movw	r2, #587	; 0x24b
 8008712:	4920      	ldr	r1, [pc, #128]	; (8008794 <pbuf_remove_header+0x98>)
 8008714:	4820      	ldr	r0, [pc, #128]	; (8008798 <pbuf_remove_header+0x9c>)
 8008716:	f00a fa49 	bl	8012bac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <pbuf_remove_header+0x2c>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008726:	d301      	bcc.n	800872c <pbuf_remove_header+0x30>
    return 1;
 8008728:	2301      	movs	r3, #1
 800872a:	e02c      	b.n	8008786 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <pbuf_remove_header+0x3a>
    return 0;
 8008732:	2300      	movs	r3, #0
 8008734:	e027      	b.n	8008786 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	895b      	ldrh	r3, [r3, #10]
 800873e:	89fa      	ldrh	r2, [r7, #14]
 8008740:	429a      	cmp	r2, r3
 8008742:	d908      	bls.n	8008756 <pbuf_remove_header+0x5a>
 8008744:	4b12      	ldr	r3, [pc, #72]	; (8008790 <pbuf_remove_header+0x94>)
 8008746:	f240 2255 	movw	r2, #597	; 0x255
 800874a:	4914      	ldr	r1, [pc, #80]	; (800879c <pbuf_remove_header+0xa0>)
 800874c:	4812      	ldr	r0, [pc, #72]	; (8008798 <pbuf_remove_header+0x9c>)
 800874e:	f00a fa2d 	bl	8012bac <iprintf>
 8008752:	2301      	movs	r3, #1
 8008754:	e017      	b.n	8008786 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	441a      	add	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	895a      	ldrh	r2, [r3, #10]
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	891a      	ldrh	r2, [r3, #8]
 800877a:	89fb      	ldrh	r3, [r7, #14]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	08013c4c 	.word	0x08013c4c
 8008794:	08013db0 	.word	0x08013db0
 8008798:	08013cac 	.word	0x08013cac
 800879c:	08013dbc 	.word	0x08013dbc

080087a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
 80087ac:	4613      	mov	r3, r2
 80087ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80087b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da08      	bge.n	80087ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80087b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087bc:	425b      	negs	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ff9b 	bl	80086fc <pbuf_remove_header>
 80087c6:	4603      	mov	r3, r0
 80087c8:	e007      	b.n	80087da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80087ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087ce:	787a      	ldrb	r2, [r7, #1]
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff ff1a 	bl	800860c <pbuf_add_header_impl>
 80087d8:	4603      	mov	r3, r0
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80087ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087f2:	2201      	movs	r2, #1
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff ffd2 	bl	80087a0 <pbuf_header_impl>
 80087fc:	4603      	mov	r3, r0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <pbuf_free+0x22>
 800881c:	4b3b      	ldr	r3, [pc, #236]	; (800890c <pbuf_free+0x104>)
 800881e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008822:	493b      	ldr	r1, [pc, #236]	; (8008910 <pbuf_free+0x108>)
 8008824:	483b      	ldr	r0, [pc, #236]	; (8008914 <pbuf_free+0x10c>)
 8008826:	f00a f9c1 	bl	8012bac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800882a:	2300      	movs	r3, #0
 800882c:	e069      	b.n	8008902 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008832:	e062      	b.n	80088fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008834:	f009 f94c 	bl	8011ad0 <sys_arch_protect>
 8008838:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7b9b      	ldrb	r3, [r3, #14]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <pbuf_free+0x48>
 8008842:	4b32      	ldr	r3, [pc, #200]	; (800890c <pbuf_free+0x104>)
 8008844:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008848:	4933      	ldr	r1, [pc, #204]	; (8008918 <pbuf_free+0x110>)
 800884a:	4832      	ldr	r0, [pc, #200]	; (8008914 <pbuf_free+0x10c>)
 800884c:	f00a f9ae 	bl	8012bac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7b9b      	ldrb	r3, [r3, #14]
 8008854:	3b01      	subs	r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	739a      	strb	r2, [r3, #14]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7b9b      	ldrb	r3, [r3, #14]
 8008860:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008862:	69b8      	ldr	r0, [r7, #24]
 8008864:	f009 f942 	bl	8011aec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d143      	bne.n	80088f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7b1b      	ldrb	r3, [r3, #12]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7b5b      	ldrb	r3, [r3, #13]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d011      	beq.n	80088ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <pbuf_free+0x9c>
 8008896:	4b1d      	ldr	r3, [pc, #116]	; (800890c <pbuf_free+0x104>)
 8008898:	f240 22ff 	movw	r2, #767	; 0x2ff
 800889c:	491f      	ldr	r1, [pc, #124]	; (800891c <pbuf_free+0x114>)
 800889e:	481d      	ldr	r0, [pc, #116]	; (8008914 <pbuf_free+0x10c>)
 80088a0:	f00a f984 	bl	8012bac <iprintf>
        pc->custom_free_function(p);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	4798      	blx	r3
 80088ac:	e01d      	b.n	80088ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d104      	bne.n	80088be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	200c      	movs	r0, #12
 80088b8:	f7ff f906 	bl	8007ac8 <memp_free>
 80088bc:	e015      	b.n	80088ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d104      	bne.n	80088ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	200b      	movs	r0, #11
 80088c8:	f7ff f8fe 	bl	8007ac8 <memp_free>
 80088cc:	e00d      	b.n	80088ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <pbuf_free+0xd4>
          mem_free(p);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe fd89 	bl	80073ec <mem_free>
 80088da:	e006      	b.n	80088ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <pbuf_free+0x104>)
 80088de:	f240 320f 	movw	r2, #783	; 0x30f
 80088e2:	490f      	ldr	r1, [pc, #60]	; (8008920 <pbuf_free+0x118>)
 80088e4:	480b      	ldr	r0, [pc, #44]	; (8008914 <pbuf_free+0x10c>)
 80088e6:	f00a f961 	bl	8012bac <iprintf>
        }
      }
      count++;
 80088ea:	7ffb      	ldrb	r3, [r7, #31]
 80088ec:	3301      	adds	r3, #1
 80088ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	e001      	b.n	80088fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d199      	bne.n	8008834 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008900:	7ffb      	ldrb	r3, [r7, #31]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08013c4c 	.word	0x08013c4c
 8008910:	08013db0 	.word	0x08013db0
 8008914:	08013cac 	.word	0x08013cac
 8008918:	08013ddc 	.word	0x08013ddc
 800891c:	08013df4 	.word	0x08013df4
 8008920:	08013e18 	.word	0x08013e18

08008924 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008930:	e005      	b.n	800893e <pbuf_clen+0x1a>
    ++len;
 8008932:	89fb      	ldrh	r3, [r7, #14]
 8008934:	3301      	adds	r3, #1
 8008936:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1f6      	bne.n	8008932 <pbuf_clen+0xe>
  }
  return len;
 8008944:	89fb      	ldrh	r3, [r7, #14]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d016      	beq.n	8008990 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008962:	f009 f8b5 	bl	8011ad0 <sys_arch_protect>
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7b9b      	ldrb	r3, [r3, #14]
 800896c:	3301      	adds	r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	739a      	strb	r2, [r3, #14]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f009 f8b9 	bl	8011aec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7b9b      	ldrb	r3, [r3, #14]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <pbuf_ref+0x3c>
 8008982:	4b05      	ldr	r3, [pc, #20]	; (8008998 <pbuf_ref+0x44>)
 8008984:	f240 3242 	movw	r2, #834	; 0x342
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <pbuf_ref+0x48>)
 800898a:	4805      	ldr	r0, [pc, #20]	; (80089a0 <pbuf_ref+0x4c>)
 800898c:	f00a f90e 	bl	8012bac <iprintf>
  }
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08013c4c 	.word	0x08013c4c
 800899c:	08013e2c 	.word	0x08013e2c
 80089a0:	08013cac 	.word	0x08013cac

080089a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <pbuf_cat+0x16>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d107      	bne.n	80089ca <pbuf_cat+0x26>
 80089ba:	4b20      	ldr	r3, [pc, #128]	; (8008a3c <pbuf_cat+0x98>)
 80089bc:	f240 325a 	movw	r2, #858	; 0x35a
 80089c0:	491f      	ldr	r1, [pc, #124]	; (8008a40 <pbuf_cat+0x9c>)
 80089c2:	4820      	ldr	r0, [pc, #128]	; (8008a44 <pbuf_cat+0xa0>)
 80089c4:	f00a f8f2 	bl	8012bac <iprintf>
 80089c8:	e034      	b.n	8008a34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e00a      	b.n	80089e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	891a      	ldrh	r2, [r3, #8]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	891b      	ldrh	r3, [r3, #8]
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1f0      	bne.n	80089d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	891a      	ldrh	r2, [r3, #8]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	895b      	ldrh	r3, [r3, #10]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d006      	beq.n	8008a08 <pbuf_cat+0x64>
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <pbuf_cat+0x98>)
 80089fc:	f240 3262 	movw	r2, #866	; 0x362
 8008a00:	4911      	ldr	r1, [pc, #68]	; (8008a48 <pbuf_cat+0xa4>)
 8008a02:	4810      	ldr	r0, [pc, #64]	; (8008a44 <pbuf_cat+0xa0>)
 8008a04:	f00a f8d2 	bl	8012bac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <pbuf_cat+0x7a>
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <pbuf_cat+0x98>)
 8008a12:	f240 3263 	movw	r2, #867	; 0x363
 8008a16:	490d      	ldr	r1, [pc, #52]	; (8008a4c <pbuf_cat+0xa8>)
 8008a18:	480a      	ldr	r0, [pc, #40]	; (8008a44 <pbuf_cat+0xa0>)
 8008a1a:	f00a f8c7 	bl	8012bac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	891a      	ldrh	r2, [r3, #8]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	891b      	ldrh	r3, [r3, #8]
 8008a26:	4413      	add	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08013c4c 	.word	0x08013c4c
 8008a40:	08013e40 	.word	0x08013e40
 8008a44:	08013cac 	.word	0x08013cac
 8008a48:	08013e78 	.word	0x08013e78
 8008a4c:	08013ea8 	.word	0x08013ea8

08008a50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <pbuf_copy+0x2a>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <pbuf_copy+0x2a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	891a      	ldrh	r2, [r3, #8]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	891b      	ldrh	r3, [r3, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d209      	bcs.n	8008a8e <pbuf_copy+0x3e>
 8008a7a:	4b57      	ldr	r3, [pc, #348]	; (8008bd8 <pbuf_copy+0x188>)
 8008a7c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008a80:	4956      	ldr	r1, [pc, #344]	; (8008bdc <pbuf_copy+0x18c>)
 8008a82:	4857      	ldr	r0, [pc, #348]	; (8008be0 <pbuf_copy+0x190>)
 8008a84:	f00a f892 	bl	8012bac <iprintf>
 8008a88:	f06f 030f 	mvn.w	r3, #15
 8008a8c:	e09f      	b.n	8008bce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	895b      	ldrh	r3, [r3, #10]
 8008a92:	461a      	mov	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	895b      	ldrh	r3, [r3, #10]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1acb      	subs	r3, r1, r3
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d306      	bcc.n	8008ab4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	895b      	ldrh	r3, [r3, #10]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e005      	b.n	8008ac0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	895b      	ldrh	r3, [r3, #10]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	18d0      	adds	r0, r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4413      	add	r3, r2
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f009 fd8f 	bl	80125f6 <memcpy>
    offset_to += len;
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	895b      	ldrh	r3, [r3, #10]
 8008aec:	461a      	mov	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d906      	bls.n	8008b02 <pbuf_copy+0xb2>
 8008af4:	4b38      	ldr	r3, [pc, #224]	; (8008bd8 <pbuf_copy+0x188>)
 8008af6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008afa:	493a      	ldr	r1, [pc, #232]	; (8008be4 <pbuf_copy+0x194>)
 8008afc:	4838      	ldr	r0, [pc, #224]	; (8008be0 <pbuf_copy+0x190>)
 8008afe:	f00a f855 	bl	8012bac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	895b      	ldrh	r3, [r3, #10]
 8008b06:	461a      	mov	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d906      	bls.n	8008b1c <pbuf_copy+0xcc>
 8008b0e:	4b32      	ldr	r3, [pc, #200]	; (8008bd8 <pbuf_copy+0x188>)
 8008b10:	f240 32da 	movw	r2, #986	; 0x3da
 8008b14:	4934      	ldr	r1, [pc, #208]	; (8008be8 <pbuf_copy+0x198>)
 8008b16:	4832      	ldr	r0, [pc, #200]	; (8008be0 <pbuf_copy+0x190>)
 8008b18:	f00a f848 	bl	8012bac <iprintf>
    if (offset_from >= p_from->len) {
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	895b      	ldrh	r3, [r3, #10]
 8008b20:	461a      	mov	r2, r3
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d304      	bcc.n	8008b32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	895b      	ldrh	r3, [r3, #10]
 8008b36:	461a      	mov	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d114      	bne.n	8008b68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10c      	bne.n	8008b68 <pbuf_copy+0x118>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <pbuf_copy+0x118>
 8008b54:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <pbuf_copy+0x188>)
 8008b56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008b5a:	4924      	ldr	r1, [pc, #144]	; (8008bec <pbuf_copy+0x19c>)
 8008b5c:	4820      	ldr	r0, [pc, #128]	; (8008be0 <pbuf_copy+0x190>)
 8008b5e:	f00a f825 	bl	8012bac <iprintf>
 8008b62:	f06f 030f 	mvn.w	r3, #15
 8008b66:	e032      	b.n	8008bce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d013      	beq.n	8008b96 <pbuf_copy+0x146>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	895a      	ldrh	r2, [r3, #10]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	891b      	ldrh	r3, [r3, #8]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d10d      	bne.n	8008b96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <pbuf_copy+0x146>
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <pbuf_copy+0x188>)
 8008b84:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8008b88:	4919      	ldr	r1, [pc, #100]	; (8008bf0 <pbuf_copy+0x1a0>)
 8008b8a:	4815      	ldr	r0, [pc, #84]	; (8008be0 <pbuf_copy+0x190>)
 8008b8c:	f00a f80e 	bl	8012bac <iprintf>
 8008b90:	f06f 0305 	mvn.w	r3, #5
 8008b94:	e01b      	b.n	8008bce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d013      	beq.n	8008bc4 <pbuf_copy+0x174>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	895a      	ldrh	r2, [r3, #10]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	891b      	ldrh	r3, [r3, #8]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d10d      	bne.n	8008bc4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d009      	beq.n	8008bc4 <pbuf_copy+0x174>
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <pbuf_copy+0x188>)
 8008bb2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008bb6:	490e      	ldr	r1, [pc, #56]	; (8008bf0 <pbuf_copy+0x1a0>)
 8008bb8:	4809      	ldr	r0, [pc, #36]	; (8008be0 <pbuf_copy+0x190>)
 8008bba:	f009 fff7 	bl	8012bac <iprintf>
 8008bbe:	f06f 0305 	mvn.w	r3, #5
 8008bc2:	e004      	b.n	8008bce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f47f af61 	bne.w	8008a8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08013c4c 	.word	0x08013c4c
 8008bdc:	08013ef4 	.word	0x08013ef4
 8008be0:	08013cac 	.word	0x08013cac
 8008be4:	08013f24 	.word	0x08013f24
 8008be8:	08013f3c 	.word	0x08013f3c
 8008bec:	08013f58 	.word	0x08013f58
 8008bf0:	08013f68 	.word	0x08013f68

08008bf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	461a      	mov	r2, r3
 8008c02:	460b      	mov	r3, r1
 8008c04:	80fb      	strh	r3, [r7, #6]
 8008c06:	4613      	mov	r3, r2
 8008c08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d108      	bne.n	8008c2a <pbuf_copy_partial+0x36>
 8008c18:	4b2b      	ldr	r3, [pc, #172]	; (8008cc8 <pbuf_copy_partial+0xd4>)
 8008c1a:	f240 420a 	movw	r2, #1034	; 0x40a
 8008c1e:	492b      	ldr	r1, [pc, #172]	; (8008ccc <pbuf_copy_partial+0xd8>)
 8008c20:	482b      	ldr	r0, [pc, #172]	; (8008cd0 <pbuf_copy_partial+0xdc>)
 8008c22:	f009 ffc3 	bl	8012bac <iprintf>
 8008c26:	2300      	movs	r3, #0
 8008c28:	e04a      	b.n	8008cc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <pbuf_copy_partial+0x4e>
 8008c30:	4b25      	ldr	r3, [pc, #148]	; (8008cc8 <pbuf_copy_partial+0xd4>)
 8008c32:	f240 420b 	movw	r2, #1035	; 0x40b
 8008c36:	4927      	ldr	r1, [pc, #156]	; (8008cd4 <pbuf_copy_partial+0xe0>)
 8008c38:	4825      	ldr	r0, [pc, #148]	; (8008cd0 <pbuf_copy_partial+0xdc>)
 8008c3a:	f009 ffb7 	bl	8012bac <iprintf>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e03e      	b.n	8008cc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	61fb      	str	r3, [r7, #28]
 8008c46:	e034      	b.n	8008cb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008c48:	88bb      	ldrh	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <pbuf_copy_partial+0x70>
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	895b      	ldrh	r3, [r3, #10]
 8008c52:	88ba      	ldrh	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d305      	bcc.n	8008c64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	895b      	ldrh	r3, [r3, #10]
 8008c5c:	88ba      	ldrh	r2, [r7, #4]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	80bb      	strh	r3, [r7, #4]
 8008c62:	e023      	b.n	8008cac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	895a      	ldrh	r2, [r3, #10]
 8008c68:	88bb      	ldrh	r3, [r7, #4]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008c6e:	8b3a      	ldrh	r2, [r7, #24]
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d901      	bls.n	8008c7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c7a:	8b7b      	ldrh	r3, [r7, #26]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	18d0      	adds	r0, r2, r3
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	88bb      	ldrh	r3, [r7, #4]
 8008c86:	4413      	add	r3, r2
 8008c88:	8b3a      	ldrh	r2, [r7, #24]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f009 fcb3 	bl	80125f6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c90:	8afa      	ldrh	r2, [r7, #22]
 8008c92:	8b3b      	ldrh	r3, [r7, #24]
 8008c94:	4413      	add	r3, r2
 8008c96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008c98:	8b7a      	ldrh	r2, [r7, #26]
 8008c9a:	8b3b      	ldrh	r3, [r7, #24]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008ca0:	88fa      	ldrh	r2, [r7, #6]
 8008ca2:	8b3b      	ldrh	r3, [r7, #24]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <pbuf_copy_partial+0xca>
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1c4      	bne.n	8008c48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008cbe:	8afb      	ldrh	r3, [r7, #22]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	08013c4c 	.word	0x08013c4c
 8008ccc:	08013f94 	.word	0x08013f94
 8008cd0:	08013cac 	.word	0x08013cac
 8008cd4:	08013fb4 	.word	0x08013fb4

08008cd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	603a      	str	r2, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	8919      	ldrh	r1, [r3, #8]
 8008cec:	88ba      	ldrh	r2, [r7, #4]
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff faa9 	bl	8008248 <pbuf_alloc>
 8008cf6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <pbuf_clone+0x2a>
    return NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e011      	b.n	8008d26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f7ff fea3 	bl	8008a50 <pbuf_copy>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008d0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d006      	beq.n	8008d24 <pbuf_clone+0x4c>
 8008d16:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <pbuf_clone+0x58>)
 8008d18:	f240 5224 	movw	r2, #1316	; 0x524
 8008d1c:	4905      	ldr	r1, [pc, #20]	; (8008d34 <pbuf_clone+0x5c>)
 8008d1e:	4806      	ldr	r0, [pc, #24]	; (8008d38 <pbuf_clone+0x60>)
 8008d20:	f009 ff44 	bl	8012bac <iprintf>
  return q;
 8008d24:	68fb      	ldr	r3, [r7, #12]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	08013c4c 	.word	0x08013c4c
 8008d34:	080140c0 	.word	0x080140c0
 8008d38:	08013cac 	.word	0x08013cac

08008d3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008d40:	f009 ff4c 	bl	8012bdc <rand>
 8008d44:	4603      	mov	r3, r0
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <tcp_init+0x20>)
 8008d56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000010 	.word	0x20000010

08008d60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d105      	bne.n	8008d7c <tcp_free+0x1c>
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <tcp_free+0x2c>)
 8008d72:	22d4      	movs	r2, #212	; 0xd4
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <tcp_free+0x30>)
 8008d76:	4807      	ldr	r0, [pc, #28]	; (8008d94 <tcp_free+0x34>)
 8008d78:	f009 ff18 	bl	8012bac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f7fe fea2 	bl	8007ac8 <memp_free>
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	0801414c 	.word	0x0801414c
 8008d90:	0801417c 	.word	0x0801417c
 8008d94:	08014190 	.word	0x08014190

08008d98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7d1b      	ldrb	r3, [r3, #20]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d105      	bne.n	8008db4 <tcp_free_listen+0x1c>
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <tcp_free_listen+0x2c>)
 8008daa:	22df      	movs	r2, #223	; 0xdf
 8008dac:	4906      	ldr	r1, [pc, #24]	; (8008dc8 <tcp_free_listen+0x30>)
 8008dae:	4807      	ldr	r0, [pc, #28]	; (8008dcc <tcp_free_listen+0x34>)
 8008db0:	f009 fefc 	bl	8012bac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	2002      	movs	r0, #2
 8008db8:	f7fe fe86 	bl	8007ac8 <memp_free>
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	0801414c 	.word	0x0801414c
 8008dc8:	080141b8 	.word	0x080141b8
 8008dcc:	08014190 	.word	0x08014190

08008dd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008dd4:	f001 f852 	bl	8009e7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008dd8:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <tcp_tmr+0x28>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <tcp_tmr+0x28>)
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <tcp_tmr+0x28>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008df0:	f000 fd06 	bl	8009800 <tcp_slowtmr>
  }
}
 8008df4:	bf00      	nop
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20008aa1 	.word	0x20008aa1

08008dfc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d105      	bne.n	8008e18 <tcp_remove_listener+0x1c>
 8008e0c:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <tcp_remove_listener+0x48>)
 8008e0e:	22ff      	movs	r2, #255	; 0xff
 8008e10:	490d      	ldr	r1, [pc, #52]	; (8008e48 <tcp_remove_listener+0x4c>)
 8008e12:	480e      	ldr	r0, [pc, #56]	; (8008e4c <tcp_remove_listener+0x50>)
 8008e14:	f009 feca 	bl	8012bac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e00a      	b.n	8008e34 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d102      	bne.n	8008e2e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f1      	bne.n	8008e1e <tcp_remove_listener+0x22>
    }
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	0801414c 	.word	0x0801414c
 8008e48:	080141d4 	.word	0x080141d4
 8008e4c:	08014190 	.word	0x08014190

08008e50 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <tcp_listen_closed+0x1c>
 8008e5e:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <tcp_listen_closed+0x60>)
 8008e60:	f240 1211 	movw	r2, #273	; 0x111
 8008e64:	4913      	ldr	r1, [pc, #76]	; (8008eb4 <tcp_listen_closed+0x64>)
 8008e66:	4814      	ldr	r0, [pc, #80]	; (8008eb8 <tcp_listen_closed+0x68>)
 8008e68:	f009 fea0 	bl	8012bac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7d1b      	ldrb	r3, [r3, #20]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d006      	beq.n	8008e82 <tcp_listen_closed+0x32>
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <tcp_listen_closed+0x60>)
 8008e76:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008e7a:	4910      	ldr	r1, [pc, #64]	; (8008ebc <tcp_listen_closed+0x6c>)
 8008e7c:	480e      	ldr	r0, [pc, #56]	; (8008eb8 <tcp_listen_closed+0x68>)
 8008e7e:	f009 fe95 	bl	8012bac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e82:	2301      	movs	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e00b      	b.n	8008ea0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008e88:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <tcp_listen_closed+0x70>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff ffb1 	bl	8008dfc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d9f0      	bls.n	8008e88 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	0801414c 	.word	0x0801414c
 8008eb4:	080141fc 	.word	0x080141fc
 8008eb8:	08014190 	.word	0x08014190
 8008ebc:	08014208 	.word	0x08014208
 8008ec0:	080161c4 	.word	0x080161c4

08008ec4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008ec4:	b5b0      	push	{r4, r5, r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af04      	add	r7, sp, #16
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <tcp_close_shutdown+0x20>
 8008ed6:	4b61      	ldr	r3, [pc, #388]	; (800905c <tcp_close_shutdown+0x198>)
 8008ed8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008edc:	4960      	ldr	r1, [pc, #384]	; (8009060 <tcp_close_shutdown+0x19c>)
 8008ede:	4861      	ldr	r0, [pc, #388]	; (8009064 <tcp_close_shutdown+0x1a0>)
 8008ee0:	f009 fe64 	bl	8012bac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d066      	beq.n	8008fb8 <tcp_close_shutdown+0xf4>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7d1b      	ldrb	r3, [r3, #20]
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d003      	beq.n	8008efa <tcp_close_shutdown+0x36>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	2b07      	cmp	r3, #7
 8008ef8:	d15e      	bne.n	8008fb8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <tcp_close_shutdown+0x48>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f0a:	d055      	beq.n	8008fb8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8b5b      	ldrh	r3, [r3, #26]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <tcp_close_shutdown+0x62>
 8008f18:	4b50      	ldr	r3, [pc, #320]	; (800905c <tcp_close_shutdown+0x198>)
 8008f1a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008f1e:	4952      	ldr	r1, [pc, #328]	; (8009068 <tcp_close_shutdown+0x1a4>)
 8008f20:	4850      	ldr	r0, [pc, #320]	; (8009064 <tcp_close_shutdown+0x1a0>)
 8008f22:	f009 fe43 	bl	8012bac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008f2e:	687d      	ldr	r5, [r7, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	8ad2      	ldrh	r2, [r2, #22]
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	8b09      	ldrh	r1, [r1, #24]
 8008f3c:	9102      	str	r1, [sp, #8]
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462b      	mov	r3, r5
 8008f44:	4622      	mov	r2, r4
 8008f46:	4601      	mov	r1, r0
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f005 fd1b 	bl	800e984 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 faea 	bl	800a528 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008f54:	4b45      	ldr	r3, [pc, #276]	; (800906c <tcp_close_shutdown+0x1a8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d105      	bne.n	8008f6a <tcp_close_shutdown+0xa6>
 8008f5e:	4b43      	ldr	r3, [pc, #268]	; (800906c <tcp_close_shutdown+0x1a8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	4a41      	ldr	r2, [pc, #260]	; (800906c <tcp_close_shutdown+0x1a8>)
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e013      	b.n	8008f92 <tcp_close_shutdown+0xce>
 8008f6a:	4b40      	ldr	r3, [pc, #256]	; (800906c <tcp_close_shutdown+0x1a8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	e00c      	b.n	8008f8c <tcp_close_shutdown+0xc8>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d104      	bne.n	8008f86 <tcp_close_shutdown+0xc2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	60da      	str	r2, [r3, #12]
 8008f84:	e005      	b.n	8008f92 <tcp_close_shutdown+0xce>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1ef      	bne.n	8008f72 <tcp_close_shutdown+0xae>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	4b35      	ldr	r3, [pc, #212]	; (8009070 <tcp_close_shutdown+0x1ac>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008f9e:	4b35      	ldr	r3, [pc, #212]	; (8009074 <tcp_close_shutdown+0x1b0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d102      	bne.n	8008fae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008fa8:	f003 ff7c 	bl	800cea4 <tcp_trigger_input_pcb_close>
 8008fac:	e002      	b.n	8008fb4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff fed6 	bl	8008d60 <tcp_free>
      }
      return ERR_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e04d      	b.n	8009054 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7d1b      	ldrb	r3, [r3, #20]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d02d      	beq.n	800901c <tcp_close_shutdown+0x158>
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d036      	beq.n	8009032 <tcp_close_shutdown+0x16e>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d13f      	bne.n	8009048 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8adb      	ldrh	r3, [r3, #22]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d021      	beq.n	8009014 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fd0:	4b29      	ldr	r3, [pc, #164]	; (8009078 <tcp_close_shutdown+0x1b4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d105      	bne.n	8008fe6 <tcp_close_shutdown+0x122>
 8008fda:	4b27      	ldr	r3, [pc, #156]	; (8009078 <tcp_close_shutdown+0x1b4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	4a25      	ldr	r2, [pc, #148]	; (8009078 <tcp_close_shutdown+0x1b4>)
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	e013      	b.n	800900e <tcp_close_shutdown+0x14a>
 8008fe6:	4b24      	ldr	r3, [pc, #144]	; (8009078 <tcp_close_shutdown+0x1b4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]
 8008fec:	e00c      	b.n	8009008 <tcp_close_shutdown+0x144>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d104      	bne.n	8009002 <tcp_close_shutdown+0x13e>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	e005      	b.n	800900e <tcp_close_shutdown+0x14a>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	60bb      	str	r3, [r7, #8]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1ef      	bne.n	8008fee <tcp_close_shutdown+0x12a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fea3 	bl	8008d60 <tcp_free>
      break;
 800901a:	e01a      	b.n	8009052 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff ff17 	bl	8008e50 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4815      	ldr	r0, [pc, #84]	; (800907c <tcp_close_shutdown+0x1b8>)
 8009026:	f001 facf 	bl	800a5c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff feb4 	bl	8008d98 <tcp_free_listen>
      break;
 8009030:	e00f      	b.n	8009052 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	480d      	ldr	r0, [pc, #52]	; (800906c <tcp_close_shutdown+0x1a8>)
 8009036:	f001 fac7 	bl	800a5c8 <tcp_pcb_remove>
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <tcp_close_shutdown+0x1ac>)
 800903c:	2201      	movs	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fe8d 	bl	8008d60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009046:	e004      	b.n	8009052 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f819 	bl	8009080 <tcp_close_shutdown_fin>
 800904e:	4603      	mov	r3, r0
 8009050:	e000      	b.n	8009054 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bdb0      	pop	{r4, r5, r7, pc}
 800905c:	0801414c 	.word	0x0801414c
 8009060:	08014220 	.word	0x08014220
 8009064:	08014190 	.word	0x08014190
 8009068:	08014240 	.word	0x08014240
 800906c:	2000f808 	.word	0x2000f808
 8009070:	2000f804 	.word	0x2000f804
 8009074:	2000f81c 	.word	0x2000f81c
 8009078:	2000f814 	.word	0x2000f814
 800907c:	2000f810 	.word	0x2000f810

08009080 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <tcp_close_shutdown_fin+0x1c>
 800908e:	4b2c      	ldr	r3, [pc, #176]	; (8009140 <tcp_close_shutdown_fin+0xc0>)
 8009090:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009094:	492b      	ldr	r1, [pc, #172]	; (8009144 <tcp_close_shutdown_fin+0xc4>)
 8009096:	482c      	ldr	r0, [pc, #176]	; (8009148 <tcp_close_shutdown_fin+0xc8>)
 8009098:	f009 fd88 	bl	8012bac <iprintf>

  switch (pcb->state) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7d1b      	ldrb	r3, [r3, #20]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d010      	beq.n	80090c6 <tcp_close_shutdown_fin+0x46>
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	d01b      	beq.n	80090e0 <tcp_close_shutdown_fin+0x60>
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d126      	bne.n	80090fa <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f004 fd65 	bl	800db7c <tcp_send_fin>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80090b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d11f      	bne.n	80090fe <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2205      	movs	r2, #5
 80090c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80090c4:	e01b      	b.n	80090fe <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f004 fd58 	bl	800db7c <tcp_send_fin>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80090d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d114      	bne.n	8009102 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2205      	movs	r2, #5
 80090dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80090de:	e010      	b.n	8009102 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f004 fd4b 	bl	800db7c <tcp_send_fin>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80090ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d109      	bne.n	8009106 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2209      	movs	r2, #9
 80090f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80090f8:	e005      	b.n	8009106 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e01c      	b.n	8009138 <tcp_close_shutdown_fin+0xb8>
      break;
 80090fe:	bf00      	nop
 8009100:	e002      	b.n	8009108 <tcp_close_shutdown_fin+0x88>
      break;
 8009102:	bf00      	nop
 8009104:	e000      	b.n	8009108 <tcp_close_shutdown_fin+0x88>
      break;
 8009106:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f004 fe71 	bl	800ddf8 <tcp_output>
 8009116:	e00d      	b.n	8009134 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d108      	bne.n	8009134 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8b5b      	ldrh	r3, [r3, #26]
 8009126:	f043 0308 	orr.w	r3, r3, #8
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e001      	b.n	8009138 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0801414c 	.word	0x0801414c
 8009144:	080141fc 	.word	0x080141fc
 8009148:	08014190 	.word	0x08014190

0800914c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d109      	bne.n	800916e <tcp_close+0x22>
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <tcp_close+0x4c>)
 800915c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009160:	490e      	ldr	r1, [pc, #56]	; (800919c <tcp_close+0x50>)
 8009162:	480f      	ldr	r0, [pc, #60]	; (80091a0 <tcp_close+0x54>)
 8009164:	f009 fd22 	bl	8012bac <iprintf>
 8009168:	f06f 030f 	mvn.w	r3, #15
 800916c:	e00f      	b.n	800918e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7d1b      	ldrb	r3, [r3, #20]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d006      	beq.n	8009184 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8b5b      	ldrh	r3, [r3, #26]
 800917a:	f043 0310 	orr.w	r3, r3, #16
 800917e:	b29a      	uxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009184:	2101      	movs	r1, #1
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fe9c 	bl	8008ec4 <tcp_close_shutdown>
 800918c:	4603      	mov	r3, r0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	0801414c 	.word	0x0801414c
 800919c:	0801425c 	.word	0x0801425c
 80091a0:	08014190 	.word	0x08014190

080091a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08e      	sub	sp, #56	; 0x38
 80091a8:	af04      	add	r7, sp, #16
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d107      	bne.n	80091c4 <tcp_abandon+0x20>
 80091b4:	4b52      	ldr	r3, [pc, #328]	; (8009300 <tcp_abandon+0x15c>)
 80091b6:	f240 223d 	movw	r2, #573	; 0x23d
 80091ba:	4952      	ldr	r1, [pc, #328]	; (8009304 <tcp_abandon+0x160>)
 80091bc:	4852      	ldr	r0, [pc, #328]	; (8009308 <tcp_abandon+0x164>)
 80091be:	f009 fcf5 	bl	8012bac <iprintf>
 80091c2:	e099      	b.n	80092f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7d1b      	ldrb	r3, [r3, #20]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d106      	bne.n	80091da <tcp_abandon+0x36>
 80091cc:	4b4c      	ldr	r3, [pc, #304]	; (8009300 <tcp_abandon+0x15c>)
 80091ce:	f240 2241 	movw	r2, #577	; 0x241
 80091d2:	494e      	ldr	r1, [pc, #312]	; (800930c <tcp_abandon+0x168>)
 80091d4:	484c      	ldr	r0, [pc, #304]	; (8009308 <tcp_abandon+0x164>)
 80091d6:	f009 fce9 	bl	8012bac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	7d1b      	ldrb	r3, [r3, #20]
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	d107      	bne.n	80091f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	484a      	ldr	r0, [pc, #296]	; (8009310 <tcp_abandon+0x16c>)
 80091e6:	f001 f9ef 	bl	800a5c8 <tcp_pcb_remove>
    tcp_free(pcb);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fdb8 	bl	8008d60 <tcp_free>
 80091f0:	e082      	b.n	80092f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7d1b      	ldrb	r3, [r3, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d126      	bne.n	800926a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8adb      	ldrh	r3, [r3, #22]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d02e      	beq.n	8009282 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009224:	4b3b      	ldr	r3, [pc, #236]	; (8009314 <tcp_abandon+0x170>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d105      	bne.n	800923a <tcp_abandon+0x96>
 800922e:	4b39      	ldr	r3, [pc, #228]	; (8009314 <tcp_abandon+0x170>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	4a37      	ldr	r2, [pc, #220]	; (8009314 <tcp_abandon+0x170>)
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	e013      	b.n	8009262 <tcp_abandon+0xbe>
 800923a:	4b36      	ldr	r3, [pc, #216]	; (8009314 <tcp_abandon+0x170>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	e00c      	b.n	800925c <tcp_abandon+0xb8>
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	429a      	cmp	r2, r3
 800924a:	d104      	bne.n	8009256 <tcp_abandon+0xb2>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	60da      	str	r2, [r3, #12]
 8009254:	e005      	b.n	8009262 <tcp_abandon+0xbe>
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1ef      	bne.n	8009242 <tcp_abandon+0x9e>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	e00b      	b.n	8009282 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	8adb      	ldrh	r3, [r3, #22]
 8009272:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	4828      	ldr	r0, [pc, #160]	; (8009318 <tcp_abandon+0x174>)
 8009278:	f001 f9a6 	bl	800a5c8 <tcp_pcb_remove>
 800927c:	4b27      	ldr	r3, [pc, #156]	; (800931c <tcp_abandon+0x178>)
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fed4 	bl	800a03c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fecb 	bl	800a03c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fec2 	bl	800a03c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00e      	beq.n	80092dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3304      	adds	r3, #4
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	8b12      	ldrh	r2, [r2, #24]
 80092c8:	9202      	str	r2, [sp, #8]
 80092ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80092cc:	9201      	str	r2, [sp, #4]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	460b      	mov	r3, r1
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f005 fb54 	bl	800e984 <tcp_rst>
    }
    last_state = pcb->state;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7d1b      	ldrb	r3, [r3, #20]
 80092e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fd3c 	bl	8008d60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <tcp_abandon+0x154>
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f06f 010c 	mvn.w	r1, #12
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	4798      	blx	r3
  }
}
 80092f8:	3728      	adds	r7, #40	; 0x28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0801414c 	.word	0x0801414c
 8009304:	08014290 	.word	0x08014290
 8009308:	08014190 	.word	0x08014190
 800930c:	080142ac 	.word	0x080142ac
 8009310:	2000f818 	.word	0x2000f818
 8009314:	2000f814 	.word	0x2000f814
 8009318:	2000f808 	.word	0x2000f808
 800931c:	2000f804 	.word	0x2000f804

08009320 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009328:	2101      	movs	r1, #1
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff ff3a 	bl	80091a4 <tcp_abandon>
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009346:	2304      	movs	r3, #4
 8009348:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009350:	4b3e      	ldr	r3, [pc, #248]	; (800944c <tcp_bind+0x114>)
 8009352:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <tcp_bind+0x36>
 800935a:	4b3d      	ldr	r3, [pc, #244]	; (8009450 <tcp_bind+0x118>)
 800935c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009360:	493c      	ldr	r1, [pc, #240]	; (8009454 <tcp_bind+0x11c>)
 8009362:	483d      	ldr	r0, [pc, #244]	; (8009458 <tcp_bind+0x120>)
 8009364:	f009 fc22 	bl	8012bac <iprintf>
 8009368:	f06f 030f 	mvn.w	r3, #15
 800936c:	e06a      	b.n	8009444 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	7d1b      	ldrb	r3, [r3, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <tcp_bind+0x52>
 8009376:	4b36      	ldr	r3, [pc, #216]	; (8009450 <tcp_bind+0x118>)
 8009378:	f240 22ab 	movw	r2, #683	; 0x2ab
 800937c:	4937      	ldr	r1, [pc, #220]	; (800945c <tcp_bind+0x124>)
 800937e:	4836      	ldr	r0, [pc, #216]	; (8009458 <tcp_bind+0x120>)
 8009380:	f009 fc14 	bl	8012bac <iprintf>
 8009384:	f06f 0305 	mvn.w	r3, #5
 8009388:	e05c      	b.n	8009444 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009390:	f000 f9f0 	bl	8009774 <tcp_new_port>
 8009394:	4603      	mov	r3, r0
 8009396:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009398:	88fb      	ldrh	r3, [r7, #6]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d135      	bne.n	800940a <tcp_bind+0xd2>
      return ERR_BUF;
 800939e:	f06f 0301 	mvn.w	r3, #1
 80093a2:	e04f      	b.n	8009444 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80093a4:	2300      	movs	r3, #0
 80093a6:	61fb      	str	r3, [r7, #28]
 80093a8:	e02b      	b.n	8009402 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80093aa:	4a2d      	ldr	r2, [pc, #180]	; (8009460 <tcp_bind+0x128>)
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	e01e      	b.n	80093f6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	8adb      	ldrh	r3, [r3, #22]
 80093bc:	88fa      	ldrh	r2, [r7, #6]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d116      	bne.n	80093f0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80093c2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d010      	beq.n	80093ea <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00c      	beq.n	80093ea <tcp_bind+0xb2>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d005      	beq.n	80093ea <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d102      	bne.n	80093f0 <tcp_bind+0xb8>
              return ERR_USE;
 80093ea:	f06f 0307 	mvn.w	r3, #7
 80093ee:	e029      	b.n	8009444 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1dd      	bne.n	80093b8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	3301      	adds	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	429a      	cmp	r2, r3
 8009408:	dbcf      	blt.n	80093aa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00c      	beq.n	800942a <tcp_bind+0xf2>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <tcp_bind+0xec>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	e000      	b.n	8009426 <tcp_bind+0xee>
 8009424:	2300      	movs	r3, #0
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009430:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <tcp_bind+0x12c>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	4a0a      	ldr	r2, [pc, #40]	; (8009464 <tcp_bind+0x12c>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	f005 fc63 	bl	800ed08 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3720      	adds	r7, #32
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	080161ec 	.word	0x080161ec
 8009450:	0801414c 	.word	0x0801414c
 8009454:	080142e0 	.word	0x080142e0
 8009458:	08014190 	.word	0x08014190
 800945c:	080142f8 	.word	0x080142f8
 8009460:	080161c4 	.word	0x080161c4
 8009464:	2000f814 	.word	0x2000f814

08009468 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d106      	bne.n	800948a <tcp_accept_null+0x22>
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <tcp_accept_null+0x34>)
 800947e:	f240 320f 	movw	r2, #783	; 0x30f
 8009482:	4907      	ldr	r1, [pc, #28]	; (80094a0 <tcp_accept_null+0x38>)
 8009484:	4807      	ldr	r0, [pc, #28]	; (80094a4 <tcp_accept_null+0x3c>)
 8009486:	f009 fb91 	bl	8012bac <iprintf>

  tcp_abort(pcb);
 800948a:	68b8      	ldr	r0, [r7, #8]
 800948c:	f7ff ff48 	bl	8009320 <tcp_abort>

  return ERR_ABRT;
 8009490:	f06f 030c 	mvn.w	r3, #12
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	0801414c 	.word	0x0801414c
 80094a0:	08014320 	.word	0x08014320
 80094a4:	08014190 	.word	0x08014190

080094a8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	2200      	movs	r2, #0
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f806 	bl	80094cc <tcp_listen_with_backlog_and_err>
 80094c0:	4603      	mov	r3, r0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	460b      	mov	r3, r1
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <tcp_listen_with_backlog_and_err+0x2c>
 80094e4:	4b47      	ldr	r3, [pc, #284]	; (8009604 <tcp_listen_with_backlog_and_err+0x138>)
 80094e6:	f240 3259 	movw	r2, #857	; 0x359
 80094ea:	4947      	ldr	r1, [pc, #284]	; (8009608 <tcp_listen_with_backlog_and_err+0x13c>)
 80094ec:	4847      	ldr	r0, [pc, #284]	; (800960c <tcp_listen_with_backlog_and_err+0x140>)
 80094ee:	f009 fb5d 	bl	8012bac <iprintf>
 80094f2:	23f0      	movs	r3, #240	; 0xf0
 80094f4:	76fb      	strb	r3, [r7, #27]
 80094f6:	e079      	b.n	80095ec <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	7d1b      	ldrb	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <tcp_listen_with_backlog_and_err+0x48>
 8009500:	4b40      	ldr	r3, [pc, #256]	; (8009604 <tcp_listen_with_backlog_and_err+0x138>)
 8009502:	f240 325a 	movw	r2, #858	; 0x35a
 8009506:	4942      	ldr	r1, [pc, #264]	; (8009610 <tcp_listen_with_backlog_and_err+0x144>)
 8009508:	4840      	ldr	r0, [pc, #256]	; (800960c <tcp_listen_with_backlog_and_err+0x140>)
 800950a:	f009 fb4f 	bl	8012bac <iprintf>
 800950e:	23f1      	movs	r3, #241	; 0xf1
 8009510:	76fb      	strb	r3, [r7, #27]
 8009512:	e06b      	b.n	80095ec <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	7d1b      	ldrb	r3, [r3, #20]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d104      	bne.n	8009526 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009520:	23f7      	movs	r3, #247	; 0xf7
 8009522:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009524:	e062      	b.n	80095ec <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009526:	2002      	movs	r0, #2
 8009528:	f7fe fa7c 	bl	8007a24 <memp_malloc>
 800952c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009534:	23ff      	movs	r3, #255	; 0xff
 8009536:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009538:	e058      	b.n	80095ec <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8ada      	ldrh	r2, [r3, #22]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2201      	movs	r2, #1
 800954e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	7d5a      	ldrb	r2, [r3, #21]
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	7a5a      	ldrb	r2, [r3, #9]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2200      	movs	r2, #0
 8009564:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	7ada      	ldrb	r2, [r3, #11]
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	7a9a      	ldrb	r2, [r3, #10]
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8adb      	ldrh	r3, [r3, #22]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d021      	beq.n	80095ca <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009586:	4b23      	ldr	r3, [pc, #140]	; (8009614 <tcp_listen_with_backlog_and_err+0x148>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d105      	bne.n	800959c <tcp_listen_with_backlog_and_err+0xd0>
 8009590:	4b20      	ldr	r3, [pc, #128]	; (8009614 <tcp_listen_with_backlog_and_err+0x148>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	4a1f      	ldr	r2, [pc, #124]	; (8009614 <tcp_listen_with_backlog_and_err+0x148>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	e013      	b.n	80095c4 <tcp_listen_with_backlog_and_err+0xf8>
 800959c:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <tcp_listen_with_backlog_and_err+0x148>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	e00c      	b.n	80095be <tcp_listen_with_backlog_and_err+0xf2>
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d104      	bne.n	80095b8 <tcp_listen_with_backlog_and_err+0xec>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	60da      	str	r2, [r3, #12]
 80095b6:	e005      	b.n	80095c4 <tcp_listen_with_backlog_and_err+0xf8>
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1ef      	bne.n	80095a4 <tcp_listen_with_backlog_and_err+0xd8>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fbc8 	bl	8008d60 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4a11      	ldr	r2, [pc, #68]	; (8009618 <tcp_listen_with_backlog_and_err+0x14c>)
 80095d4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <tcp_listen_with_backlog_and_err+0x150>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	60da      	str	r2, [r3, #12]
 80095de:	4a0f      	ldr	r2, [pc, #60]	; (800961c <tcp_listen_with_backlog_and_err+0x150>)
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	f005 fb90 	bl	800ed08 <tcp_timer_needed>
  res = ERR_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7efa      	ldrb	r2, [r7, #27]
 80095f6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80095f8:	69fb      	ldr	r3, [r7, #28]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	0801414c 	.word	0x0801414c
 8009608:	08014340 	.word	0x08014340
 800960c:	08014190 	.word	0x08014190
 8009610:	08014370 	.word	0x08014370
 8009614:	2000f814 	.word	0x2000f814
 8009618:	08009469 	.word	0x08009469
 800961c:	2000f810 	.word	0x2000f810

08009620 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <tcp_update_rcv_ann_wnd+0x1c>
 800962e:	4b25      	ldr	r3, [pc, #148]	; (80096c4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009630:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009634:	4924      	ldr	r1, [pc, #144]	; (80096c8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009636:	4825      	ldr	r0, [pc, #148]	; (80096cc <tcp_update_rcv_ann_wnd+0xac>)
 8009638:	f009 fab8 	bl	8012bac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009644:	4413      	add	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009650:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009654:	bf28      	it	cs
 8009656:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800965a:	b292      	uxth	r2, r2
 800965c:	4413      	add	r3, r2
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	db08      	blt.n	8009678 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	e020      	b.n	80096ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	dd03      	ble.n	800968e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800968c:	e014      	b.n	80096b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a0:	d306      	bcc.n	80096b0 <tcp_update_rcv_ann_wnd+0x90>
 80096a2:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <tcp_update_rcv_ann_wnd+0xa4>)
 80096a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80096a8:	4909      	ldr	r1, [pc, #36]	; (80096d0 <tcp_update_rcv_ann_wnd+0xb0>)
 80096aa:	4808      	ldr	r0, [pc, #32]	; (80096cc <tcp_update_rcv_ann_wnd+0xac>)
 80096ac:	f009 fa7e 	bl	8012bac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80096b8:	2300      	movs	r3, #0
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	0801414c 	.word	0x0801414c
 80096c8:	080143a8 	.word	0x080143a8
 80096cc:	08014190 	.word	0x08014190
 80096d0:	080143cc 	.word	0x080143cc

080096d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d107      	bne.n	80096f6 <tcp_recved+0x22>
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <tcp_recved+0x90>)
 80096e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80096ec:	491e      	ldr	r1, [pc, #120]	; (8009768 <tcp_recved+0x94>)
 80096ee:	481f      	ldr	r0, [pc, #124]	; (800976c <tcp_recved+0x98>)
 80096f0:	f009 fa5c 	bl	8012bac <iprintf>
 80096f4:	e032      	b.n	800975c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7d1b      	ldrb	r3, [r3, #20]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d106      	bne.n	800970c <tcp_recved+0x38>
 80096fe:	4b19      	ldr	r3, [pc, #100]	; (8009764 <tcp_recved+0x90>)
 8009700:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009704:	491a      	ldr	r1, [pc, #104]	; (8009770 <tcp_recved+0x9c>)
 8009706:	4819      	ldr	r0, [pc, #100]	; (800976c <tcp_recved+0x98>)
 8009708:	f009 fa50 	bl	8012bac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009710:	887b      	ldrh	r3, [r7, #2]
 8009712:	4413      	add	r3, r2
 8009714:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009716:	89fb      	ldrh	r3, [r7, #14]
 8009718:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800971c:	d804      	bhi.n	8009728 <tcp_recved+0x54>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009722:	89fa      	ldrh	r2, [r7, #14]
 8009724:	429a      	cmp	r2, r3
 8009726:	d204      	bcs.n	8009732 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800972e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009730:	e002      	b.n	8009738 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	89fa      	ldrh	r2, [r7, #14]
 8009736:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff71 	bl	8009620 <tcp_update_rcv_ann_wnd>
 800973e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009746:	d309      	bcc.n	800975c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8b5b      	ldrh	r3, [r3, #26]
 800974c:	f043 0302 	orr.w	r3, r3, #2
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f004 fb4e 	bl	800ddf8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	0801414c 	.word	0x0801414c
 8009768:	080143e8 	.word	0x080143e8
 800976c:	08014190 	.word	0x08014190
 8009770:	08014400 	.word	0x08014400

08009774 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800977e:	4b1e      	ldr	r3, [pc, #120]	; (80097f8 <tcp_new_port+0x84>)
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	3301      	adds	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	4b1c      	ldr	r3, [pc, #112]	; (80097f8 <tcp_new_port+0x84>)
 8009788:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800978a:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <tcp_new_port+0x84>)
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009792:	4293      	cmp	r3, r2
 8009794:	d103      	bne.n	800979e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009796:	4b18      	ldr	r3, [pc, #96]	; (80097f8 <tcp_new_port+0x84>)
 8009798:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800979c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800979e:	2300      	movs	r3, #0
 80097a0:	71fb      	strb	r3, [r7, #7]
 80097a2:	e01e      	b.n	80097e2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	4a15      	ldr	r2, [pc, #84]	; (80097fc <tcp_new_port+0x88>)
 80097a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	e011      	b.n	80097d6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	8ada      	ldrh	r2, [r3, #22]
 80097b6:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <tcp_new_port+0x84>)
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d108      	bne.n	80097d0 <tcp_new_port+0x5c>
        n++;
 80097be:	88bb      	ldrh	r3, [r7, #4]
 80097c0:	3301      	adds	r3, #1
 80097c2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80097c4:	88bb      	ldrh	r3, [r7, #4]
 80097c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ca:	d3d8      	bcc.n	800977e <tcp_new_port+0xa>
          return 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	e00d      	b.n	80097ec <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	603b      	str	r3, [r7, #0]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1ea      	bne.n	80097b2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	3301      	adds	r3, #1
 80097e0:	71fb      	strb	r3, [r7, #7]
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d9dd      	bls.n	80097a4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80097e8:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <tcp_new_port+0x84>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20000010 	.word	0x20000010
 80097fc:	080161c4 	.word	0x080161c4

08009800 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009800:	b5b0      	push	{r4, r5, r7, lr}
 8009802:	b090      	sub	sp, #64	; 0x40
 8009804:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800980c:	4b94      	ldr	r3, [pc, #592]	; (8009a60 <tcp_slowtmr+0x260>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	4a93      	ldr	r2, [pc, #588]	; (8009a60 <tcp_slowtmr+0x260>)
 8009814:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009816:	4b93      	ldr	r3, [pc, #588]	; (8009a64 <tcp_slowtmr+0x264>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	b2da      	uxtb	r2, r3
 800981e:	4b91      	ldr	r3, [pc, #580]	; (8009a64 <tcp_slowtmr+0x264>)
 8009820:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009826:	4b90      	ldr	r3, [pc, #576]	; (8009a68 <tcp_slowtmr+0x268>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800982c:	e29d      	b.n	8009d6a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	7d1b      	ldrb	r3, [r3, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <tcp_slowtmr+0x44>
 8009836:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <tcp_slowtmr+0x26c>)
 8009838:	f240 42be 	movw	r2, #1214	; 0x4be
 800983c:	498c      	ldr	r1, [pc, #560]	; (8009a70 <tcp_slowtmr+0x270>)
 800983e:	488d      	ldr	r0, [pc, #564]	; (8009a74 <tcp_slowtmr+0x274>)
 8009840:	f009 f9b4 	bl	8012bac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	7d1b      	ldrb	r3, [r3, #20]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <tcp_slowtmr+0x5a>
 800984c:	4b87      	ldr	r3, [pc, #540]	; (8009a6c <tcp_slowtmr+0x26c>)
 800984e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009852:	4989      	ldr	r1, [pc, #548]	; (8009a78 <tcp_slowtmr+0x278>)
 8009854:	4887      	ldr	r0, [pc, #540]	; (8009a74 <tcp_slowtmr+0x274>)
 8009856:	f009 f9a9 	bl	8012bac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	7d1b      	ldrb	r3, [r3, #20]
 800985e:	2b0a      	cmp	r3, #10
 8009860:	d106      	bne.n	8009870 <tcp_slowtmr+0x70>
 8009862:	4b82      	ldr	r3, [pc, #520]	; (8009a6c <tcp_slowtmr+0x26c>)
 8009864:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009868:	4984      	ldr	r1, [pc, #528]	; (8009a7c <tcp_slowtmr+0x27c>)
 800986a:	4882      	ldr	r0, [pc, #520]	; (8009a74 <tcp_slowtmr+0x274>)
 800986c:	f009 f99e 	bl	8012bac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	7f9a      	ldrb	r2, [r3, #30]
 8009874:	4b7b      	ldr	r3, [pc, #492]	; (8009a64 <tcp_slowtmr+0x264>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d105      	bne.n	8009888 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009886:	e270      	b.n	8009d6a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009888:	4b76      	ldr	r3, [pc, #472]	; (8009a64 <tcp_slowtmr+0x264>)
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	7d1b      	ldrb	r3, [r3, #20]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d10a      	bne.n	80098ba <tcp_slowtmr+0xba>
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d905      	bls.n	80098ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 80098ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098b2:	3301      	adds	r3, #1
 80098b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098b8:	e11e      	b.n	8009af8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098c0:	2b0b      	cmp	r3, #11
 80098c2:	d905      	bls.n	80098d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c8:	3301      	adds	r3, #1
 80098ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098ce:	e113      	b.n	8009af8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d075      	beq.n	80099c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <tcp_slowtmr+0xf0>
 80098e2:	4b62      	ldr	r3, [pc, #392]	; (8009a6c <tcp_slowtmr+0x26c>)
 80098e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80098e8:	4965      	ldr	r1, [pc, #404]	; (8009a80 <tcp_slowtmr+0x280>)
 80098ea:	4862      	ldr	r0, [pc, #392]	; (8009a74 <tcp_slowtmr+0x274>)
 80098ec:	f009 f95e 	bl	8012bac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <tcp_slowtmr+0x106>
 80098f8:	4b5c      	ldr	r3, [pc, #368]	; (8009a6c <tcp_slowtmr+0x26c>)
 80098fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80098fe:	4961      	ldr	r1, [pc, #388]	; (8009a84 <tcp_slowtmr+0x284>)
 8009900:	485c      	ldr	r0, [pc, #368]	; (8009a74 <tcp_slowtmr+0x274>)
 8009902:	f009 f953 	bl	8012bac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800990c:	2b0b      	cmp	r3, #11
 800990e:	d905      	bls.n	800991c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009914:	3301      	adds	r3, #1
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800991a:	e0ed      	b.n	8009af8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009922:	3b01      	subs	r3, #1
 8009924:	4a58      	ldr	r2, [pc, #352]	; (8009a88 <tcp_slowtmr+0x288>)
 8009926:	5cd3      	ldrb	r3, [r2, r3]
 8009928:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009930:	7c7a      	ldrb	r2, [r7, #17]
 8009932:	429a      	cmp	r2, r3
 8009934:	d907      	bls.n	8009946 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800993c:	3301      	adds	r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800994c:	7c7a      	ldrb	r2, [r7, #17]
 800994e:	429a      	cmp	r2, r3
 8009950:	f200 80d2 	bhi.w	8009af8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009954:	2301      	movs	r3, #1
 8009956:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800995e:	2b00      	cmp	r3, #0
 8009960:	d108      	bne.n	8009974 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009964:	f005 f902 	bl	800eb6c <tcp_zero_window_probe>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d014      	beq.n	8009998 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800996e:	2300      	movs	r3, #0
 8009970:	623b      	str	r3, [r7, #32]
 8009972:	e011      	b.n	8009998 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800997a:	4619      	mov	r1, r3
 800997c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800997e:	f003 ffb5 	bl	800d8ec <tcp_split_unsent_seg>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d107      	bne.n	8009998 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998a:	f004 fa35 	bl	800ddf8 <tcp_output>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 80ac 	beq.w	8009af8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80099ae:	2b06      	cmp	r3, #6
 80099b0:	f200 80a2 	bhi.w	8009af8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80099ba:	3301      	adds	r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80099c4:	e098      	b.n	8009af8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db0f      	blt.n	80099f0 <tcp_slowtmr+0x1f0>
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80099d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80099da:	4293      	cmp	r3, r2
 80099dc:	d008      	beq.n	80099f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	3301      	adds	r3, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	b21a      	sxth	r2, r3
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80099fc:	429a      	cmp	r2, r3
 80099fe:	db7b      	blt.n	8009af8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a02:	f004 fcf1 	bl	800e3e8 <tcp_rexmit_rto_prepare>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <tcp_slowtmr+0x21c>
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d171      	bne.n	8009af8 <tcp_slowtmr+0x2f8>
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d06d      	beq.n	8009af8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	7d1b      	ldrb	r3, [r3, #20]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d03a      	beq.n	8009a9a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a2a:	2b0c      	cmp	r3, #12
 8009a2c:	bf28      	it	cs
 8009a2e:	230c      	movcs	r3, #12
 8009a30:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a38:	10db      	asrs	r3, r3, #3
 8009a3a:	b21b      	sxth	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a44:	4413      	add	r3, r2
 8009a46:	7efa      	ldrb	r2, [r7, #27]
 8009a48:	4910      	ldr	r1, [pc, #64]	; (8009a8c <tcp_slowtmr+0x28c>)
 8009a4a:	5c8a      	ldrb	r2, [r1, r2]
 8009a4c:	4093      	lsls	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009a56:	4293      	cmp	r3, r2
 8009a58:	dc1a      	bgt.n	8009a90 <tcp_slowtmr+0x290>
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	b21a      	sxth	r2, r3
 8009a5e:	e019      	b.n	8009a94 <tcp_slowtmr+0x294>
 8009a60:	2000f80c 	.word	0x2000f80c
 8009a64:	20008aa2 	.word	0x20008aa2
 8009a68:	2000f808 	.word	0x2000f808
 8009a6c:	0801414c 	.word	0x0801414c
 8009a70:	08014490 	.word	0x08014490
 8009a74:	08014190 	.word	0x08014190
 8009a78:	080144bc 	.word	0x080144bc
 8009a7c:	080144e8 	.word	0x080144e8
 8009a80:	08014518 	.word	0x08014518
 8009a84:	0801454c 	.word	0x0801454c
 8009a88:	080161bc 	.word	0x080161bc
 8009a8c:	080161ac 	.word	0x080161ac
 8009a90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009aac:	4293      	cmp	r3, r2
 8009aae:	bf28      	it	cs
 8009ab0:	4613      	movcs	r3, r2
 8009ab2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009ab4:	8a7b      	ldrh	r3, [r7, #18]
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d206      	bcs.n	8009ae0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009af4:	f004 fce8 	bl	800e4c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	7d1b      	ldrb	r3, [r3, #20]
 8009afc:	2b06      	cmp	r3, #6
 8009afe:	d111      	bne.n	8009b24 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	8b5b      	ldrh	r3, [r3, #26]
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b0c:	4b9c      	ldr	r3, [pc, #624]	; (8009d80 <tcp_slowtmr+0x580>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b28      	cmp	r3, #40	; 0x28
 8009b18:	d904      	bls.n	8009b24 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b1e:	3301      	adds	r3, #1
 8009b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	7a5b      	ldrb	r3, [r3, #9]
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d04a      	beq.n	8009bc6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d003      	beq.n	8009b40 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009b3c:	2b07      	cmp	r3, #7
 8009b3e:	d142      	bne.n	8009bc6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b40:	4b8f      	ldr	r3, [pc, #572]	; (8009d80 <tcp_slowtmr+0x580>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009b50:	4b8c      	ldr	r3, [pc, #560]	; (8009d84 <tcp_slowtmr+0x584>)
 8009b52:	440b      	add	r3, r1
 8009b54:	498c      	ldr	r1, [pc, #560]	; (8009d88 <tcp_slowtmr+0x588>)
 8009b56:	fba1 1303 	umull	r1, r3, r1, r3
 8009b5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d90a      	bls.n	8009b76 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b64:	3301      	adds	r3, #1
 8009b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b74:	e027      	b.n	8009bc6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b76:	4b82      	ldr	r3, [pc, #520]	; (8009d80 <tcp_slowtmr+0x580>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	4b7f      	ldr	r3, [pc, #508]	; (8009d8c <tcp_slowtmr+0x58c>)
 8009b90:	fb03 f300 	mul.w	r3, r3, r0
 8009b94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009b96:	497c      	ldr	r1, [pc, #496]	; (8009d88 <tcp_slowtmr+0x588>)
 8009b98:	fba1 1303 	umull	r1, r3, r1, r3
 8009b9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d911      	bls.n	8009bc6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ba4:	f004 ffa2 	bl	800eaec <tcp_keepalive>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009bae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d107      	bne.n	8009bc6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d011      	beq.n	8009bf2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009bce:	4b6c      	ldr	r3, [pc, #432]	; (8009d80 <tcp_slowtmr+0x580>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009bde:	4619      	mov	r1, r3
 8009be0:	460b      	mov	r3, r1
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	440b      	add	r3, r1
 8009be6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d302      	bcc.n	8009bf2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bee:	f000 fe4f 	bl	800a890 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	7d1b      	ldrb	r3, [r3, #20]
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d10b      	bne.n	8009c12 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009bfa:	4b61      	ldr	r3, [pc, #388]	; (8009d80 <tcp_slowtmr+0x580>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b28      	cmp	r3, #40	; 0x28
 8009c06:	d904      	bls.n	8009c12 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	7d1b      	ldrb	r3, [r3, #20]
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d10b      	bne.n	8009c32 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c1a:	4b59      	ldr	r3, [pc, #356]	; (8009d80 <tcp_slowtmr+0x580>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2bf0      	cmp	r3, #240	; 0xf0
 8009c26:	d904      	bls.n	8009c32 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d060      	beq.n	8009cfc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c44:	f000 fc70 	bl	800a528 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d010      	beq.n	8009c70 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009c4e:	4b50      	ldr	r3, [pc, #320]	; (8009d90 <tcp_slowtmr+0x590>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d106      	bne.n	8009c66 <tcp_slowtmr+0x466>
 8009c58:	4b4e      	ldr	r3, [pc, #312]	; (8009d94 <tcp_slowtmr+0x594>)
 8009c5a:	f240 526d 	movw	r2, #1389	; 0x56d
 8009c5e:	494e      	ldr	r1, [pc, #312]	; (8009d98 <tcp_slowtmr+0x598>)
 8009c60:	484e      	ldr	r0, [pc, #312]	; (8009d9c <tcp_slowtmr+0x59c>)
 8009c62:	f008 ffa3 	bl	8012bac <iprintf>
        prev->next = pcb->next;
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	e00f      	b.n	8009c90 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009c70:	4b47      	ldr	r3, [pc, #284]	; (8009d90 <tcp_slowtmr+0x590>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d006      	beq.n	8009c88 <tcp_slowtmr+0x488>
 8009c7a:	4b46      	ldr	r3, [pc, #280]	; (8009d94 <tcp_slowtmr+0x594>)
 8009c7c:	f240 5271 	movw	r2, #1393	; 0x571
 8009c80:	4947      	ldr	r1, [pc, #284]	; (8009da0 <tcp_slowtmr+0x5a0>)
 8009c82:	4846      	ldr	r0, [pc, #280]	; (8009d9c <tcp_slowtmr+0x59c>)
 8009c84:	f008 ff92 	bl	8012bac <iprintf>
        tcp_active_pcbs = pcb->next;
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4a40      	ldr	r2, [pc, #256]	; (8009d90 <tcp_slowtmr+0x590>)
 8009c8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d013      	beq.n	8009cc0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009ca0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca8:	8ad2      	ldrh	r2, [r2, #22]
 8009caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cac:	8b09      	ldrh	r1, [r1, #24]
 8009cae:	9102      	str	r1, [sp, #8]
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4601      	mov	r1, r0
 8009cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cbc:	f004 fe62 	bl	800e984 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	7d1b      	ldrb	r3, [r3, #20]
 8009cca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009cd6:	6838      	ldr	r0, [r7, #0]
 8009cd8:	f7ff f842 	bl	8008d60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009cdc:	4b31      	ldr	r3, [pc, #196]	; (8009da4 <tcp_slowtmr+0x5a4>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <tcp_slowtmr+0x4f2>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f06f 010c 	mvn.w	r1, #12
 8009cee:	68b8      	ldr	r0, [r7, #8]
 8009cf0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009cf2:	4b2c      	ldr	r3, [pc, #176]	; (8009da4 <tcp_slowtmr+0x5a4>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d037      	beq.n	8009d6a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009cfa:	e592      	b.n	8009822 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	7f1b      	ldrb	r3, [r3, #28]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	7f1a      	ldrb	r2, [r3, #28]
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	7f5b      	ldrb	r3, [r3, #29]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d325      	bcc.n	8009d6a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	2200      	movs	r2, #0
 8009d22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009d24:	4b1f      	ldr	r3, [pc, #124]	; (8009da4 <tcp_slowtmr+0x5a4>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00b      	beq.n	8009d4c <tcp_slowtmr+0x54c>
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3c:	6912      	ldr	r2, [r2, #16]
 8009d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	4603      	mov	r3, r0
 8009d46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009d4a:	e002      	b.n	8009d52 <tcp_slowtmr+0x552>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009d52:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <tcp_slowtmr+0x5a4>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d000      	beq.n	8009d5c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009d5a:	e562      	b.n	8009822 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009d5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d66:	f004 f847 	bl	800ddf8 <tcp_output>
  while (pcb != NULL) {
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f47f ad5e 	bne.w	800982e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <tcp_slowtmr+0x5a8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009d7c:	e069      	b.n	8009e52 <tcp_slowtmr+0x652>
 8009d7e:	bf00      	nop
 8009d80:	2000f80c 	.word	0x2000f80c
 8009d84:	000a4cb8 	.word	0x000a4cb8
 8009d88:	10624dd3 	.word	0x10624dd3
 8009d8c:	000124f8 	.word	0x000124f8
 8009d90:	2000f808 	.word	0x2000f808
 8009d94:	0801414c 	.word	0x0801414c
 8009d98:	08014584 	.word	0x08014584
 8009d9c:	08014190 	.word	0x08014190
 8009da0:	080145b0 	.word	0x080145b0
 8009da4:	2000f804 	.word	0x2000f804
 8009da8:	2000f818 	.word	0x2000f818
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	7d1b      	ldrb	r3, [r3, #20]
 8009db0:	2b0a      	cmp	r3, #10
 8009db2:	d006      	beq.n	8009dc2 <tcp_slowtmr+0x5c2>
 8009db4:	4b2a      	ldr	r3, [pc, #168]	; (8009e60 <tcp_slowtmr+0x660>)
 8009db6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009dba:	492a      	ldr	r1, [pc, #168]	; (8009e64 <tcp_slowtmr+0x664>)
 8009dbc:	482a      	ldr	r0, [pc, #168]	; (8009e68 <tcp_slowtmr+0x668>)
 8009dbe:	f008 fef5 	bl	8012bac <iprintf>
    pcb_remove = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009dc8:	4b28      	ldr	r3, [pc, #160]	; (8009e6c <tcp_slowtmr+0x66c>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2bf0      	cmp	r3, #240	; 0xf0
 8009dd4:	d904      	bls.n	8009de0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02f      	beq.n	8009e48 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dea:	f000 fb9d 	bl	800a528 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d010      	beq.n	8009e16 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009df4:	4b1e      	ldr	r3, [pc, #120]	; (8009e70 <tcp_slowtmr+0x670>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d106      	bne.n	8009e0c <tcp_slowtmr+0x60c>
 8009dfe:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <tcp_slowtmr+0x660>)
 8009e00:	f240 52af 	movw	r2, #1455	; 0x5af
 8009e04:	491b      	ldr	r1, [pc, #108]	; (8009e74 <tcp_slowtmr+0x674>)
 8009e06:	4818      	ldr	r0, [pc, #96]	; (8009e68 <tcp_slowtmr+0x668>)
 8009e08:	f008 fed0 	bl	8012bac <iprintf>
        prev->next = pcb->next;
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e00f      	b.n	8009e36 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009e16:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <tcp_slowtmr+0x670>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d006      	beq.n	8009e2e <tcp_slowtmr+0x62e>
 8009e20:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <tcp_slowtmr+0x660>)
 8009e22:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009e26:	4914      	ldr	r1, [pc, #80]	; (8009e78 <tcp_slowtmr+0x678>)
 8009e28:	480f      	ldr	r0, [pc, #60]	; (8009e68 <tcp_slowtmr+0x668>)
 8009e2a:	f008 febf 	bl	8012bac <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	4a0f      	ldr	r2, [pc, #60]	; (8009e70 <tcp_slowtmr+0x670>)
 8009e34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009e40:	69f8      	ldr	r0, [r7, #28]
 8009e42:	f7fe ff8d 	bl	8008d60 <tcp_free>
 8009e46:	e004      	b.n	8009e52 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1a9      	bne.n	8009dac <tcp_slowtmr+0x5ac>
    }
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3730      	adds	r7, #48	; 0x30
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e60:	0801414c 	.word	0x0801414c
 8009e64:	080145dc 	.word	0x080145dc
 8009e68:	08014190 	.word	0x08014190
 8009e6c:	2000f80c 	.word	0x2000f80c
 8009e70:	2000f818 	.word	0x2000f818
 8009e74:	0801460c 	.word	0x0801460c
 8009e78:	08014634 	.word	0x08014634

08009e7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009e82:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <tcp_fasttmr+0xbc>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <tcp_fasttmr+0xbc>)
 8009e8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009e8e:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <tcp_fasttmr+0xc0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009e94:	e048      	b.n	8009f28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	7f9a      	ldrb	r2, [r3, #30]
 8009e9a:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <tcp_fasttmr+0xbc>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d03f      	beq.n	8009f22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009ea2:	4b25      	ldr	r3, [pc, #148]	; (8009f38 <tcp_fasttmr+0xbc>)
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8b5b      	ldrh	r3, [r3, #26]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d010      	beq.n	8009ed8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	8b5b      	ldrh	r3, [r3, #26]
 8009eba:	f043 0302 	orr.w	r3, r3, #2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f003 ff97 	bl	800ddf8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8b5b      	ldrh	r3, [r3, #26]
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	8b5b      	ldrh	r3, [r3, #26]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8b5b      	ldrh	r3, [r3, #26]
 8009ee8:	f023 0308 	bic.w	r3, r3, #8
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff f8c4 	bl	8009080 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009f06:	4b0e      	ldr	r3, [pc, #56]	; (8009f40 <tcp_fasttmr+0xc4>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f819 	bl	8009f44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009f12:	4b0b      	ldr	r3, [pc, #44]	; (8009f40 <tcp_fasttmr+0xc4>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d000      	beq.n	8009f1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009f1a:	e7b8      	b.n	8009e8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	607b      	str	r3, [r7, #4]
 8009f20:	e002      	b.n	8009f28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1b3      	bne.n	8009e96 <tcp_fasttmr+0x1a>
    }
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20008aa2 	.word	0x20008aa2
 8009f3c:	2000f808 	.word	0x2000f808
 8009f40:	2000f804 	.word	0x2000f804

08009f44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <tcp_process_refused_data+0x22>
 8009f52:	4b37      	ldr	r3, [pc, #220]	; (800a030 <tcp_process_refused_data+0xec>)
 8009f54:	f240 6209 	movw	r2, #1545	; 0x609
 8009f58:	4936      	ldr	r1, [pc, #216]	; (800a034 <tcp_process_refused_data+0xf0>)
 8009f5a:	4837      	ldr	r0, [pc, #220]	; (800a038 <tcp_process_refused_data+0xf4>)
 8009f5c:	f008 fe26 	bl	8012bac <iprintf>
 8009f60:	f06f 030f 	mvn.w	r3, #15
 8009f64:	e060      	b.n	800a028 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f6a:	7b5b      	ldrb	r3, [r3, #13]
 8009f6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <tcp_process_refused_data+0x58>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6918      	ldr	r0, [r3, #16]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	47a0      	blx	r4
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]
 8009f9a:	e007      	b.n	8009fac <tcp_process_refused_data+0x68>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	f000 f8a2 	bl	800a0ec <tcp_recv_null>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d12a      	bne.n	800a00a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d033      	beq.n	800a026 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009fc6:	d005      	beq.n	8009fd4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fcc:	3301      	adds	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <tcp_process_refused_data+0xb2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6918      	ldr	r0, [r3, #16]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2200      	movs	r2, #0
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	47a0      	blx	r4
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e001      	b.n	8009ffa <tcp_process_refused_data+0xb6>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ffe:	f113 0f0d 	cmn.w	r3, #13
 800a002:	d110      	bne.n	800a026 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a004:	f06f 030c 	mvn.w	r3, #12
 800a008:	e00e      	b.n	800a028 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a00e:	f113 0f0d 	cmn.w	r3, #13
 800a012:	d102      	bne.n	800a01a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a014:	f06f 030c 	mvn.w	r3, #12
 800a018:	e006      	b.n	800a028 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a020:	f06f 0304 	mvn.w	r3, #4
 800a024:	e000      	b.n	800a028 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd90      	pop	{r4, r7, pc}
 800a030:	0801414c 	.word	0x0801414c
 800a034:	0801465c 	.word	0x0801465c
 800a038:	08014190 	.word	0x08014190

0800a03c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a044:	e007      	b.n	800a056 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f809 	bl	800a064 <tcp_seg_free>
    seg = next;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f4      	bne.n	800a046 <tcp_segs_free+0xa>
  }
}
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00c      	beq.n	800a08c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fbc2 	bl	8008808 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	2003      	movs	r0, #3
 800a088:	f7fd fd1e 	bl	8007ac8 <memp_free>
  }
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <tcp_seg_copy+0x1c>
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <tcp_seg_copy+0x4c>)
 800a0a4:	f240 6282 	movw	r2, #1666	; 0x682
 800a0a8:	490e      	ldr	r1, [pc, #56]	; (800a0e4 <tcp_seg_copy+0x50>)
 800a0aa:	480f      	ldr	r0, [pc, #60]	; (800a0e8 <tcp_seg_copy+0x54>)
 800a0ac:	f008 fd7e 	bl	8012bac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a0b0:	2003      	movs	r0, #3
 800a0b2:	f7fd fcb7 	bl	8007a24 <memp_malloc>
 800a0b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <tcp_seg_copy+0x2e>
    return NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e00a      	b.n	800a0d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a0c2:	2210      	movs	r2, #16
 800a0c4:	6879      	ldr	r1, [r7, #4]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f008 fa95 	bl	80125f6 <memcpy>
  pbuf_ref(cseg->p);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fc3f 	bl	8008954 <pbuf_ref>
  return cseg;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	0801414c 	.word	0x0801414c
 800a0e4:	080146a0 	.word	0x080146a0
 800a0e8:	08014190 	.word	0x08014190

0800a0ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <tcp_recv_null+0x28>
 800a100:	4b12      	ldr	r3, [pc, #72]	; (800a14c <tcp_recv_null+0x60>)
 800a102:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a106:	4912      	ldr	r1, [pc, #72]	; (800a150 <tcp_recv_null+0x64>)
 800a108:	4812      	ldr	r0, [pc, #72]	; (800a154 <tcp_recv_null+0x68>)
 800a10a:	f008 fd4f 	bl	8012bac <iprintf>
 800a10e:	f06f 030f 	mvn.w	r3, #15
 800a112:	e016      	b.n	800a142 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	891b      	ldrh	r3, [r3, #8]
 800a11e:	4619      	mov	r1, r3
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f7ff fad7 	bl	80096d4 <tcp_recved>
    pbuf_free(p);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7fe fb6e 	bl	8008808 <pbuf_free>
 800a12c:	e008      	b.n	800a140 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a12e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d104      	bne.n	800a140 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a136:	68b8      	ldr	r0, [r7, #8]
 800a138:	f7ff f808 	bl	800914c <tcp_close>
 800a13c:	4603      	mov	r3, r0
 800a13e:	e000      	b.n	800a142 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	0801414c 	.word	0x0801414c
 800a150:	080146bc 	.word	0x080146bc
 800a154:	08014190 	.word	0x08014190

0800a158 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a166:	2b00      	cmp	r3, #0
 800a168:	db01      	blt.n	800a16e <tcp_kill_prio+0x16>
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	e000      	b.n	800a170 <tcp_kill_prio+0x18>
 800a16e:	237f      	movs	r3, #127	; 0x7f
 800a170:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a172:	7afb      	ldrb	r3, [r7, #11]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d034      	beq.n	800a1e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a186:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <tcp_kill_prio+0x94>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e01f      	b.n	800a1ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	7d5b      	ldrb	r3, [r3, #21]
 800a192:	7afa      	ldrb	r2, [r7, #11]
 800a194:	429a      	cmp	r2, r3
 800a196:	d80c      	bhi.n	800a1b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a19c:	7afa      	ldrb	r2, [r7, #11]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d112      	bne.n	800a1c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a1a2:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <tcp_kill_prio+0x98>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d80a      	bhi.n	800a1c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <tcp_kill_prio+0x98>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	7d5b      	ldrb	r3, [r3, #21]
 800a1c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	617b      	str	r3, [r7, #20]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1dc      	bne.n	800a18e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f7ff f8a0 	bl	8009320 <tcp_abort>
 800a1e0:	e000      	b.n	800a1e4 <tcp_kill_prio+0x8c>
    return;
 800a1e2:	bf00      	nop
  }
}
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000f808 	.word	0x2000f808
 800a1f0:	2000f80c 	.word	0x2000f80c

0800a1f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d009      	beq.n	800a218 <tcp_kill_state+0x24>
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b09      	cmp	r3, #9
 800a208:	d006      	beq.n	800a218 <tcp_kill_state+0x24>
 800a20a:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <tcp_kill_state+0x80>)
 800a20c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a210:	4919      	ldr	r1, [pc, #100]	; (800a278 <tcp_kill_state+0x84>)
 800a212:	481a      	ldr	r0, [pc, #104]	; (800a27c <tcp_kill_state+0x88>)
 800a214:	f008 fcca 	bl	8012bac <iprintf>

  inactivity = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a220:	4b17      	ldr	r3, [pc, #92]	; (800a280 <tcp_kill_state+0x8c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	e017      	b.n	800a258 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	7d1b      	ldrb	r3, [r3, #20]
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d10f      	bne.n	800a252 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a232:	4b14      	ldr	r3, [pc, #80]	; (800a284 <tcp_kill_state+0x90>)
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d807      	bhi.n	800a252 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a242:	4b10      	ldr	r3, [pc, #64]	; (800a284 <tcp_kill_state+0x90>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e4      	bne.n	800a228 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a264:	2100      	movs	r1, #0
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f7fe ff9c 	bl	80091a4 <tcp_abandon>
  }
}
 800a26c:	bf00      	nop
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	0801414c 	.word	0x0801414c
 800a278:	080146d8 	.word	0x080146d8
 800a27c:	08014190 	.word	0x08014190
 800a280:	2000f808 	.word	0x2000f808
 800a284:	2000f80c 	.word	0x2000f80c

0800a288 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <tcp_kill_timewait+0x58>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e012      	b.n	800a2c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a29e:	4b11      	ldr	r3, [pc, #68]	; (800a2e4 <tcp_kill_timewait+0x5c>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d807      	bhi.n	800a2be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <tcp_kill_timewait+0x5c>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e9      	bne.n	800a29e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a2d0:	68b8      	ldr	r0, [r7, #8]
 800a2d2:	f7ff f825 	bl	8009320 <tcp_abort>
  }
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	2000f818 	.word	0x2000f818
 800a2e4:	2000f80c 	.word	0x2000f80c

0800a2e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a2ee:	4b10      	ldr	r3, [pc, #64]	; (800a330 <tcp_handle_closepend+0x48>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a2f4:	e014      	b.n	800a320 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8b5b      	ldrh	r3, [r3, #26]
 800a300:	f003 0308 	and.w	r3, r3, #8
 800a304:	2b00      	cmp	r3, #0
 800a306:	d009      	beq.n	800a31c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	8b5b      	ldrh	r3, [r3, #26]
 800a30c:	f023 0308 	bic.w	r3, r3, #8
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7fe feb2 	bl	8009080 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e7      	bne.n	800a2f6 <tcp_handle_closepend+0xe>
  }
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	2000f808 	.word	0x2000f808

0800a334 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a33e:	2001      	movs	r0, #1
 800a340:	f7fd fb70 	bl	8007a24 <memp_malloc>
 800a344:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d126      	bne.n	800a39a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a34c:	f7ff ffcc 	bl	800a2e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a350:	f7ff ff9a 	bl	800a288 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a354:	2001      	movs	r0, #1
 800a356:	f7fd fb65 	bl	8007a24 <memp_malloc>
 800a35a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d11b      	bne.n	800a39a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a362:	2009      	movs	r0, #9
 800a364:	f7ff ff46 	bl	800a1f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a368:	2001      	movs	r0, #1
 800a36a:	f7fd fb5b 	bl	8007a24 <memp_malloc>
 800a36e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d111      	bne.n	800a39a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a376:	2008      	movs	r0, #8
 800a378:	f7ff ff3c 	bl	800a1f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7fd fb51 	bl	8007a24 <memp_malloc>
 800a382:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d107      	bne.n	800a39a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff fee3 	bl	800a158 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a392:	2001      	movs	r0, #1
 800a394:	f7fd fb46 	bl	8007a24 <memp_malloc>
 800a398:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d03f      	beq.n	800a420 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a3a0:	229c      	movs	r2, #156	; 0x9c
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f008 f931 	bl	801260c <memset>
    pcb->prio = prio;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	79fa      	ldrb	r2, [r7, #7]
 800a3ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a3b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a3c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a3d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2206      	movs	r2, #6
 800a3dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2206      	movs	r2, #6
 800a3e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <tcp_alloc+0xf8>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <tcp_alloc+0xfc>)
 800a400:	781a      	ldrb	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a40c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4a08      	ldr	r2, [pc, #32]	; (800a434 <tcp_alloc+0x100>)
 800a414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4a07      	ldr	r2, [pc, #28]	; (800a438 <tcp_alloc+0x104>)
 800a41c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	2000f80c 	.word	0x2000f80c
 800a430:	20008aa2 	.word	0x20008aa2
 800a434:	0800a0ed 	.word	0x0800a0ed
 800a438:	006ddd00 	.word	0x006ddd00

0800a43c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a440:	2040      	movs	r0, #64	; 0x40
 800a442:	f7ff ff77 	bl	800a334 <tcp_alloc>
 800a446:	4603      	mov	r3, r0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	611a      	str	r2, [r3, #16]
  }
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
	...

0800a470 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00e      	beq.n	800a49e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	7d1b      	ldrb	r3, [r3, #20]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d106      	bne.n	800a496 <tcp_recv+0x26>
 800a488:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <tcp_recv+0x38>)
 800a48a:	f240 72df 	movw	r2, #2015	; 0x7df
 800a48e:	4907      	ldr	r1, [pc, #28]	; (800a4ac <tcp_recv+0x3c>)
 800a490:	4807      	ldr	r0, [pc, #28]	; (800a4b0 <tcp_recv+0x40>)
 800a492:	f008 fb8b 	bl	8012bac <iprintf>
    pcb->recv = recv;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0801414c 	.word	0x0801414c
 800a4ac:	080146e8 	.word	0x080146e8
 800a4b0:	08014190 	.word	0x08014190

0800a4b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00e      	beq.n	800a4e2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7d1b      	ldrb	r3, [r3, #20]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d106      	bne.n	800a4da <tcp_err+0x26>
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <tcp_err+0x38>)
 800a4ce:	f640 020d 	movw	r2, #2061	; 0x80d
 800a4d2:	4907      	ldr	r1, [pc, #28]	; (800a4f0 <tcp_err+0x3c>)
 800a4d4:	4807      	ldr	r0, [pc, #28]	; (800a4f4 <tcp_err+0x40>)
 800a4d6:	f008 fb69 	bl	8012bac <iprintf>
    pcb->errf = err;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	0801414c 	.word	0x0801414c
 800a4f0:	08014738 	.word	0x08014738
 800a4f4:	08014190 	.word	0x08014190

0800a4f8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <tcp_accept+0x22>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	7d1b      	ldrb	r3, [r3, #20]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d104      	bne.n	800a51a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	619a      	str	r2, [r3, #24]
  }
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d107      	bne.n	800a546 <tcp_pcb_purge+0x1e>
 800a536:	4b21      	ldr	r3, [pc, #132]	; (800a5bc <tcp_pcb_purge+0x94>)
 800a538:	f640 0251 	movw	r2, #2129	; 0x851
 800a53c:	4920      	ldr	r1, [pc, #128]	; (800a5c0 <tcp_pcb_purge+0x98>)
 800a53e:	4821      	ldr	r0, [pc, #132]	; (800a5c4 <tcp_pcb_purge+0x9c>)
 800a540:	f008 fb34 	bl	8012bac <iprintf>
 800a544:	e037      	b.n	800a5b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7d1b      	ldrb	r3, [r3, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d033      	beq.n	800a5b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d02f      	beq.n	800a5b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d02b      	beq.n	800a5b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe f94c 	bl	8008808 <pbuf_free>
      pcb->refused_data = NULL;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f986 	bl	800a890 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a58a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fd53 	bl	800a03c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fd4e 	bl	800a03c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	66da      	str	r2, [r3, #108]	; 0x6c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	0801414c 	.word	0x0801414c
 800a5c0:	08014798 	.word	0x08014798
 800a5c4:	08014190 	.word	0x08014190

0800a5c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d106      	bne.n	800a5e6 <tcp_pcb_remove+0x1e>
 800a5d8:	4b3e      	ldr	r3, [pc, #248]	; (800a6d4 <tcp_pcb_remove+0x10c>)
 800a5da:	f640 0283 	movw	r2, #2179	; 0x883
 800a5de:	493e      	ldr	r1, [pc, #248]	; (800a6d8 <tcp_pcb_remove+0x110>)
 800a5e0:	483e      	ldr	r0, [pc, #248]	; (800a6dc <tcp_pcb_remove+0x114>)
 800a5e2:	f008 fae3 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <tcp_pcb_remove+0x32>
 800a5ec:	4b39      	ldr	r3, [pc, #228]	; (800a6d4 <tcp_pcb_remove+0x10c>)
 800a5ee:	f640 0284 	movw	r2, #2180	; 0x884
 800a5f2:	493b      	ldr	r1, [pc, #236]	; (800a6e0 <tcp_pcb_remove+0x118>)
 800a5f4:	4839      	ldr	r0, [pc, #228]	; (800a6dc <tcp_pcb_remove+0x114>)
 800a5f6:	f008 fad9 	bl	8012bac <iprintf>

  TCP_RMV(pcblist, pcb);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d105      	bne.n	800a610 <tcp_pcb_remove+0x48>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e013      	b.n	800a638 <tcp_pcb_remove+0x70>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	e00c      	b.n	800a632 <tcp_pcb_remove+0x6a>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d104      	bne.n	800a62c <tcp_pcb_remove+0x64>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60da      	str	r2, [r3, #12]
 800a62a:	e005      	b.n	800a638 <tcp_pcb_remove+0x70>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1ef      	bne.n	800a618 <tcp_pcb_remove+0x50>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2200      	movs	r2, #0
 800a63c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a63e:	6838      	ldr	r0, [r7, #0]
 800a640:	f7ff ff72 	bl	800a528 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	7d1b      	ldrb	r3, [r3, #20]
 800a648:	2b0a      	cmp	r3, #10
 800a64a:	d013      	beq.n	800a674 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a650:	2b01      	cmp	r3, #1
 800a652:	d00f      	beq.n	800a674 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	8b5b      	ldrh	r3, [r3, #26]
 800a658:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d009      	beq.n	800a674 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	8b5b      	ldrh	r3, [r3, #26]
 800a664:	f043 0302 	orr.w	r3, r3, #2
 800a668:	b29a      	uxth	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a66e:	6838      	ldr	r0, [r7, #0]
 800a670:	f003 fbc2 	bl	800ddf8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	7d1b      	ldrb	r3, [r3, #20]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d020      	beq.n	800a6be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <tcp_pcb_remove+0xca>
 800a684:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <tcp_pcb_remove+0x10c>)
 800a686:	f640 0293 	movw	r2, #2195	; 0x893
 800a68a:	4916      	ldr	r1, [pc, #88]	; (800a6e4 <tcp_pcb_remove+0x11c>)
 800a68c:	4813      	ldr	r0, [pc, #76]	; (800a6dc <tcp_pcb_remove+0x114>)
 800a68e:	f008 fa8d 	bl	8012bac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <tcp_pcb_remove+0xe0>
 800a69a:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <tcp_pcb_remove+0x10c>)
 800a69c:	f640 0294 	movw	r2, #2196	; 0x894
 800a6a0:	4911      	ldr	r1, [pc, #68]	; (800a6e8 <tcp_pcb_remove+0x120>)
 800a6a2:	480e      	ldr	r0, [pc, #56]	; (800a6dc <tcp_pcb_remove+0x114>)
 800a6a4:	f008 fa82 	bl	8012bac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d006      	beq.n	800a6be <tcp_pcb_remove+0xf6>
 800a6b0:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <tcp_pcb_remove+0x10c>)
 800a6b2:	f640 0296 	movw	r2, #2198	; 0x896
 800a6b6:	490d      	ldr	r1, [pc, #52]	; (800a6ec <tcp_pcb_remove+0x124>)
 800a6b8:	4808      	ldr	r0, [pc, #32]	; (800a6dc <tcp_pcb_remove+0x114>)
 800a6ba:	f008 fa77 	bl	8012bac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0801414c 	.word	0x0801414c
 800a6d8:	080147b4 	.word	0x080147b4
 800a6dc:	08014190 	.word	0x08014190
 800a6e0:	080147d0 	.word	0x080147d0
 800a6e4:	080147f0 	.word	0x080147f0
 800a6e8:	08014808 	.word	0x08014808
 800a6ec:	08014824 	.word	0x08014824

0800a6f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <tcp_next_iss+0x1c>
 800a6fe:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <tcp_next_iss+0x38>)
 800a700:	f640 02af 	movw	r2, #2223	; 0x8af
 800a704:	4909      	ldr	r1, [pc, #36]	; (800a72c <tcp_next_iss+0x3c>)
 800a706:	480a      	ldr	r0, [pc, #40]	; (800a730 <tcp_next_iss+0x40>)
 800a708:	f008 fa50 	bl	8012bac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <tcp_next_iss+0x44>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	4b09      	ldr	r3, [pc, #36]	; (800a738 <tcp_next_iss+0x48>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4413      	add	r3, r2
 800a716:	4a07      	ldr	r2, [pc, #28]	; (800a734 <tcp_next_iss+0x44>)
 800a718:	6013      	str	r3, [r2, #0]
  return iss;
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <tcp_next_iss+0x44>)
 800a71c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	0801414c 	.word	0x0801414c
 800a72c:	0801483c 	.word	0x0801483c
 800a730:	08014190 	.word	0x08014190
 800a734:	20000014 	.word	0x20000014
 800a738:	2000f80c 	.word	0x2000f80c

0800a73c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <tcp_eff_send_mss_netif+0x22>
 800a750:	4b14      	ldr	r3, [pc, #80]	; (800a7a4 <tcp_eff_send_mss_netif+0x68>)
 800a752:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a756:	4914      	ldr	r1, [pc, #80]	; (800a7a8 <tcp_eff_send_mss_netif+0x6c>)
 800a758:	4814      	ldr	r0, [pc, #80]	; (800a7ac <tcp_eff_send_mss_netif+0x70>)
 800a75a:	f008 fa27 	bl	8012bac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a764:	89fb      	ldrh	r3, [r7, #14]
 800a766:	e019      	b.n	800a79c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a76c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a76e:	8afb      	ldrh	r3, [r7, #22]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d012      	beq.n	800a79a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a774:	2328      	movs	r3, #40	; 0x28
 800a776:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a778:	8afa      	ldrh	r2, [r7, #22]
 800a77a:	8abb      	ldrh	r3, [r7, #20]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d904      	bls.n	800a78a <tcp_eff_send_mss_netif+0x4e>
 800a780:	8afa      	ldrh	r2, [r7, #22]
 800a782:	8abb      	ldrh	r3, [r7, #20]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	b29b      	uxth	r3, r3
 800a788:	e000      	b.n	800a78c <tcp_eff_send_mss_netif+0x50>
 800a78a:	2300      	movs	r3, #0
 800a78c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a78e:	8a7a      	ldrh	r2, [r7, #18]
 800a790:	89fb      	ldrh	r3, [r7, #14]
 800a792:	4293      	cmp	r3, r2
 800a794:	bf28      	it	cs
 800a796:	4613      	movcs	r3, r2
 800a798:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a79a:	89fb      	ldrh	r3, [r7, #14]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	0801414c 	.word	0x0801414c
 800a7a8:	08014858 	.word	0x08014858
 800a7ac:	08014190 	.word	0x08014190

0800a7b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d119      	bne.n	800a7f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a7c4:	4b10      	ldr	r3, [pc, #64]	; (800a808 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a7c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a7ca:	4910      	ldr	r1, [pc, #64]	; (800a80c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a7cc:	4810      	ldr	r0, [pc, #64]	; (800a810 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a7ce:	f008 f9ed 	bl	8012bac <iprintf>

  while (pcb != NULL) {
 800a7d2:	e011      	b.n	800a7f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d108      	bne.n	800a7f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7fe fd9a 	bl	8009320 <tcp_abort>
      pcb = next;
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e002      	b.n	800a7f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1ea      	bne.n	800a7d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	0801414c 	.word	0x0801414c
 800a80c:	08014880 	.word	0x08014880
 800a810:	08014190 	.word	0x08014190

0800a814 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d02a      	beq.n	800a87a <tcp_netif_ip_addr_changed+0x66>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d026      	beq.n	800a87a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <tcp_netif_ip_addr_changed+0x70>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff ffbc 	bl	800a7b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a838:	4b13      	ldr	r3, [pc, #76]	; (800a888 <tcp_netif_ip_addr_changed+0x74>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff ffb6 	bl	800a7b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d017      	beq.n	800a87a <tcp_netif_ip_addr_changed+0x66>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d013      	beq.n	800a87a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a852:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <tcp_netif_ip_addr_changed+0x78>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e00c      	b.n	800a874 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d103      	bne.n	800a86e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1ef      	bne.n	800a85a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000f808 	.word	0x2000f808
 800a888:	2000f814 	.word	0x2000f814
 800a88c:	2000f810 	.word	0x2000f810

0800a890 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fbc9 	bl	800a03c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b08d      	sub	sp, #52	; 0x34
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d105      	bne.n	800a8d4 <tcp_input+0x1c>
 800a8c8:	4b9b      	ldr	r3, [pc, #620]	; (800ab38 <tcp_input+0x280>)
 800a8ca:	2283      	movs	r2, #131	; 0x83
 800a8cc:	499b      	ldr	r1, [pc, #620]	; (800ab3c <tcp_input+0x284>)
 800a8ce:	489c      	ldr	r0, [pc, #624]	; (800ab40 <tcp_input+0x288>)
 800a8d0:	f008 f96c 	bl	8012bac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4a9a      	ldr	r2, [pc, #616]	; (800ab44 <tcp_input+0x28c>)
 800a8da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	895b      	ldrh	r3, [r3, #10]
 800a8e0:	2b13      	cmp	r3, #19
 800a8e2:	f240 83c4 	bls.w	800b06e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8e6:	4b98      	ldr	r3, [pc, #608]	; (800ab48 <tcp_input+0x290>)
 800a8e8:	695a      	ldr	r2, [r3, #20]
 800a8ea:	4b97      	ldr	r3, [pc, #604]	; (800ab48 <tcp_input+0x290>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f006 f8a9 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 83ba 	bne.w	800b072 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a8fe:	4b92      	ldr	r3, [pc, #584]	; (800ab48 <tcp_input+0x290>)
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a906:	2be0      	cmp	r3, #224	; 0xe0
 800a908:	f000 83b3 	beq.w	800b072 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a90c:	4b8d      	ldr	r3, [pc, #564]	; (800ab44 <tcp_input+0x28c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	899b      	ldrh	r3, [r3, #12]
 800a912:	b29b      	uxth	r3, r3
 800a914:	4618      	mov	r0, r3
 800a916:	f7fc fbcf 	bl	80070b8 <lwip_htons>
 800a91a:	4603      	mov	r3, r0
 800a91c:	0b1b      	lsrs	r3, r3, #12
 800a91e:	b29b      	uxth	r3, r3
 800a920:	b2db      	uxtb	r3, r3
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a926:	7cbb      	ldrb	r3, [r7, #18]
 800a928:	2b13      	cmp	r3, #19
 800a92a:	f240 83a2 	bls.w	800b072 <tcp_input+0x7ba>
 800a92e:	7cbb      	ldrb	r3, [r7, #18]
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	891b      	ldrh	r3, [r3, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	f200 839b 	bhi.w	800b072 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a93c:	7cbb      	ldrb	r3, [r7, #18]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	3b14      	subs	r3, #20
 800a942:	b29a      	uxth	r2, r3
 800a944:	4b81      	ldr	r3, [pc, #516]	; (800ab4c <tcp_input+0x294>)
 800a946:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a948:	4b81      	ldr	r3, [pc, #516]	; (800ab50 <tcp_input+0x298>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	895a      	ldrh	r2, [r3, #10]
 800a952:	7cbb      	ldrb	r3, [r7, #18]
 800a954:	b29b      	uxth	r3, r3
 800a956:	429a      	cmp	r2, r3
 800a958:	d309      	bcc.n	800a96e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a95a:	4b7c      	ldr	r3, [pc, #496]	; (800ab4c <tcp_input+0x294>)
 800a95c:	881a      	ldrh	r2, [r3, #0]
 800a95e:	4b7d      	ldr	r3, [pc, #500]	; (800ab54 <tcp_input+0x29c>)
 800a960:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a962:	7cbb      	ldrb	r3, [r7, #18]
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7fd fec8 	bl	80086fc <pbuf_remove_header>
 800a96c:	e04e      	b.n	800aa0c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d105      	bne.n	800a982 <tcp_input+0xca>
 800a976:	4b70      	ldr	r3, [pc, #448]	; (800ab38 <tcp_input+0x280>)
 800a978:	22c2      	movs	r2, #194	; 0xc2
 800a97a:	4977      	ldr	r1, [pc, #476]	; (800ab58 <tcp_input+0x2a0>)
 800a97c:	4870      	ldr	r0, [pc, #448]	; (800ab40 <tcp_input+0x288>)
 800a97e:	f008 f915 	bl	8012bac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a982:	2114      	movs	r1, #20
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7fd feb9 	bl	80086fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	895a      	ldrh	r2, [r3, #10]
 800a98e:	4b71      	ldr	r3, [pc, #452]	; (800ab54 <tcp_input+0x29c>)
 800a990:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a992:	4b6e      	ldr	r3, [pc, #440]	; (800ab4c <tcp_input+0x294>)
 800a994:	881a      	ldrh	r2, [r3, #0]
 800a996:	4b6f      	ldr	r3, [pc, #444]	; (800ab54 <tcp_input+0x29c>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a99e:	4b6d      	ldr	r3, [pc, #436]	; (800ab54 <tcp_input+0x29c>)
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7fd fea9 	bl	80086fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	895b      	ldrh	r3, [r3, #10]
 800a9b0:	8a3a      	ldrh	r2, [r7, #16]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	f200 835f 	bhi.w	800b076 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4a64      	ldr	r2, [pc, #400]	; (800ab50 <tcp_input+0x298>)
 800a9c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	8a3a      	ldrh	r2, [r7, #16]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fe96 	bl	80086fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	891a      	ldrh	r2, [r3, #8]
 800a9d4:	8a3b      	ldrh	r3, [r7, #16]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	895b      	ldrh	r3, [r3, #10]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <tcp_input+0x13a>
 800a9e6:	4b54      	ldr	r3, [pc, #336]	; (800ab38 <tcp_input+0x280>)
 800a9e8:	22df      	movs	r2, #223	; 0xdf
 800a9ea:	495c      	ldr	r1, [pc, #368]	; (800ab5c <tcp_input+0x2a4>)
 800a9ec:	4854      	ldr	r0, [pc, #336]	; (800ab40 <tcp_input+0x288>)
 800a9ee:	f008 f8dd 	bl	8012bac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	891a      	ldrh	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	891b      	ldrh	r3, [r3, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d005      	beq.n	800aa0c <tcp_input+0x154>
 800aa00:	4b4d      	ldr	r3, [pc, #308]	; (800ab38 <tcp_input+0x280>)
 800aa02:	22e0      	movs	r2, #224	; 0xe0
 800aa04:	4956      	ldr	r1, [pc, #344]	; (800ab60 <tcp_input+0x2a8>)
 800aa06:	484e      	ldr	r0, [pc, #312]	; (800ab40 <tcp_input+0x288>)
 800aa08:	f008 f8d0 	bl	8012bac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aa0c:	4b4d      	ldr	r3, [pc, #308]	; (800ab44 <tcp_input+0x28c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	4b4b      	ldr	r3, [pc, #300]	; (800ab44 <tcp_input+0x28c>)
 800aa16:	681c      	ldr	r4, [r3, #0]
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f7fc fb4d 	bl	80070b8 <lwip_htons>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aa22:	4b48      	ldr	r3, [pc, #288]	; (800ab44 <tcp_input+0x28c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	4b46      	ldr	r3, [pc, #280]	; (800ab44 <tcp_input+0x28c>)
 800aa2c:	681c      	ldr	r4, [r3, #0]
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f7fc fb42 	bl	80070b8 <lwip_htons>
 800aa34:	4603      	mov	r3, r0
 800aa36:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aa38:	4b42      	ldr	r3, [pc, #264]	; (800ab44 <tcp_input+0x28c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b41      	ldr	r3, [pc, #260]	; (800ab44 <tcp_input+0x28c>)
 800aa40:	681c      	ldr	r4, [r3, #0]
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fc fb4d 	bl	80070e2 <lwip_htonl>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	6063      	str	r3, [r4, #4]
 800aa4c:	6863      	ldr	r3, [r4, #4]
 800aa4e:	4a45      	ldr	r2, [pc, #276]	; (800ab64 <tcp_input+0x2ac>)
 800aa50:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aa52:	4b3c      	ldr	r3, [pc, #240]	; (800ab44 <tcp_input+0x28c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <tcp_input+0x28c>)
 800aa5a:	681c      	ldr	r4, [r3, #0]
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f7fc fb40 	bl	80070e2 <lwip_htonl>
 800aa62:	4603      	mov	r3, r0
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	4a3f      	ldr	r2, [pc, #252]	; (800ab68 <tcp_input+0x2b0>)
 800aa6a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aa6c:	4b35      	ldr	r3, [pc, #212]	; (800ab44 <tcp_input+0x28c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	89db      	ldrh	r3, [r3, #14]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	4b33      	ldr	r3, [pc, #204]	; (800ab44 <tcp_input+0x28c>)
 800aa76:	681c      	ldr	r4, [r3, #0]
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f7fc fb1d 	bl	80070b8 <lwip_htons>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aa82:	4b30      	ldr	r3, [pc, #192]	; (800ab44 <tcp_input+0x28c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	899b      	ldrh	r3, [r3, #12]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fc fb14 	bl	80070b8 <lwip_htons>
 800aa90:	4603      	mov	r3, r0
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b34      	ldr	r3, [pc, #208]	; (800ab6c <tcp_input+0x2b4>)
 800aa9c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	891a      	ldrh	r2, [r3, #8]
 800aaa2:	4b33      	ldr	r3, [pc, #204]	; (800ab70 <tcp_input+0x2b8>)
 800aaa4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aaa6:	4b31      	ldr	r3, [pc, #196]	; (800ab6c <tcp_input+0x2b4>)
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00c      	beq.n	800aacc <tcp_input+0x214>
    tcplen++;
 800aab2:	4b2f      	ldr	r3, [pc, #188]	; (800ab70 <tcp_input+0x2b8>)
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	3301      	adds	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	4b2d      	ldr	r3, [pc, #180]	; (800ab70 <tcp_input+0x2b8>)
 800aabc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	891a      	ldrh	r2, [r3, #8]
 800aac2:	4b2b      	ldr	r3, [pc, #172]	; (800ab70 <tcp_input+0x2b8>)
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	f200 82d7 	bhi.w	800b07a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <tcp_input+0x2bc>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	61fb      	str	r3, [r7, #28]
 800aad6:	e09d      	b.n	800ac14 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	7d1b      	ldrb	r3, [r3, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <tcp_input+0x234>
 800aae0:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <tcp_input+0x280>)
 800aae2:	22fb      	movs	r2, #251	; 0xfb
 800aae4:	4924      	ldr	r1, [pc, #144]	; (800ab78 <tcp_input+0x2c0>)
 800aae6:	4816      	ldr	r0, [pc, #88]	; (800ab40 <tcp_input+0x288>)
 800aae8:	f008 f860 	bl	8012bac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b0a      	cmp	r3, #10
 800aaf2:	d105      	bne.n	800ab00 <tcp_input+0x248>
 800aaf4:	4b10      	ldr	r3, [pc, #64]	; (800ab38 <tcp_input+0x280>)
 800aaf6:	22fc      	movs	r2, #252	; 0xfc
 800aaf8:	4920      	ldr	r1, [pc, #128]	; (800ab7c <tcp_input+0x2c4>)
 800aafa:	4811      	ldr	r0, [pc, #68]	; (800ab40 <tcp_input+0x288>)
 800aafc:	f008 f856 	bl	8012bac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	7d1b      	ldrb	r3, [r3, #20]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d105      	bne.n	800ab14 <tcp_input+0x25c>
 800ab08:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <tcp_input+0x280>)
 800ab0a:	22fd      	movs	r2, #253	; 0xfd
 800ab0c:	491c      	ldr	r1, [pc, #112]	; (800ab80 <tcp_input+0x2c8>)
 800ab0e:	480c      	ldr	r0, [pc, #48]	; (800ab40 <tcp_input+0x288>)
 800ab10:	f008 f84c 	bl	8012bac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	7a1b      	ldrb	r3, [r3, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d033      	beq.n	800ab84 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	7a1a      	ldrb	r2, [r3, #8]
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <tcp_input+0x290>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab28:	3301      	adds	r3, #1
 800ab2a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d029      	beq.n	800ab84 <tcp_input+0x2cc>
      prev = pcb;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	61bb      	str	r3, [r7, #24]
      continue;
 800ab34:	e06b      	b.n	800ac0e <tcp_input+0x356>
 800ab36:	bf00      	nop
 800ab38:	080148b4 	.word	0x080148b4
 800ab3c:	080148e8 	.word	0x080148e8
 800ab40:	08014900 	.word	0x08014900
 800ab44:	20008ab4 	.word	0x20008ab4
 800ab48:	2000c0d4 	.word	0x2000c0d4
 800ab4c:	20008ab8 	.word	0x20008ab8
 800ab50:	20008abc 	.word	0x20008abc
 800ab54:	20008aba 	.word	0x20008aba
 800ab58:	08014928 	.word	0x08014928
 800ab5c:	08014938 	.word	0x08014938
 800ab60:	08014944 	.word	0x08014944
 800ab64:	20008ac4 	.word	0x20008ac4
 800ab68:	20008ac8 	.word	0x20008ac8
 800ab6c:	20008ad0 	.word	0x20008ad0
 800ab70:	20008ace 	.word	0x20008ace
 800ab74:	2000f808 	.word	0x2000f808
 800ab78:	08014964 	.word	0x08014964
 800ab7c:	0801498c 	.word	0x0801498c
 800ab80:	080149b8 	.word	0x080149b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	8b1a      	ldrh	r2, [r3, #24]
 800ab88:	4b94      	ldr	r3, [pc, #592]	; (800addc <tcp_input+0x524>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d13a      	bne.n	800ac0a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	8ada      	ldrh	r2, [r3, #22]
 800ab98:	4b90      	ldr	r3, [pc, #576]	; (800addc <tcp_input+0x524>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	885b      	ldrh	r3, [r3, #2]
 800ab9e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d132      	bne.n	800ac0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	4b8d      	ldr	r3, [pc, #564]	; (800ade0 <tcp_input+0x528>)
 800abaa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800abac:	429a      	cmp	r2, r3
 800abae:	d12c      	bne.n	800ac0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	4b8a      	ldr	r3, [pc, #552]	; (800ade0 <tcp_input+0x528>)
 800abb6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abb8:	429a      	cmp	r2, r3
 800abba:	d126      	bne.n	800ac0a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d106      	bne.n	800abd4 <tcp_input+0x31c>
 800abc6:	4b87      	ldr	r3, [pc, #540]	; (800ade4 <tcp_input+0x52c>)
 800abc8:	f240 120d 	movw	r2, #269	; 0x10d
 800abcc:	4986      	ldr	r1, [pc, #536]	; (800ade8 <tcp_input+0x530>)
 800abce:	4887      	ldr	r0, [pc, #540]	; (800adec <tcp_input+0x534>)
 800abd0:	f007 ffec 	bl	8012bac <iprintf>
      if (prev != NULL) {
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <tcp_input+0x338>
        prev->next = pcb->next;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800abe2:	4b83      	ldr	r3, [pc, #524]	; (800adf0 <tcp_input+0x538>)
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800abea:	4a81      	ldr	r2, [pc, #516]	; (800adf0 <tcp_input+0x538>)
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	69fa      	ldr	r2, [r7, #28]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d111      	bne.n	800ac1e <tcp_input+0x366>
 800abfa:	4b7a      	ldr	r3, [pc, #488]	; (800ade4 <tcp_input+0x52c>)
 800abfc:	f240 1215 	movw	r2, #277	; 0x115
 800ac00:	497c      	ldr	r1, [pc, #496]	; (800adf4 <tcp_input+0x53c>)
 800ac02:	487a      	ldr	r0, [pc, #488]	; (800adec <tcp_input+0x534>)
 800ac04:	f007 ffd2 	bl	8012bac <iprintf>
      break;
 800ac08:	e009      	b.n	800ac1e <tcp_input+0x366>
    }
    prev = pcb;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f47f af5e 	bne.w	800aad8 <tcp_input+0x220>
 800ac1c:	e000      	b.n	800ac20 <tcp_input+0x368>
      break;
 800ac1e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f040 8095 	bne.w	800ad52 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac28:	4b73      	ldr	r3, [pc, #460]	; (800adf8 <tcp_input+0x540>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	e03f      	b.n	800acb0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	7d1b      	ldrb	r3, [r3, #20]
 800ac34:	2b0a      	cmp	r3, #10
 800ac36:	d006      	beq.n	800ac46 <tcp_input+0x38e>
 800ac38:	4b6a      	ldr	r3, [pc, #424]	; (800ade4 <tcp_input+0x52c>)
 800ac3a:	f240 121f 	movw	r2, #287	; 0x11f
 800ac3e:	496f      	ldr	r1, [pc, #444]	; (800adfc <tcp_input+0x544>)
 800ac40:	486a      	ldr	r0, [pc, #424]	; (800adec <tcp_input+0x534>)
 800ac42:	f007 ffb3 	bl	8012bac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	7a1b      	ldrb	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d009      	beq.n	800ac62 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	7a1a      	ldrb	r2, [r3, #8]
 800ac52:	4b63      	ldr	r3, [pc, #396]	; (800ade0 <tcp_input+0x528>)
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d122      	bne.n	800aca8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	8b1a      	ldrh	r2, [r3, #24]
 800ac66:	4b5d      	ldr	r3, [pc, #372]	; (800addc <tcp_input+0x524>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d11b      	bne.n	800acaa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	8ada      	ldrh	r2, [r3, #22]
 800ac76:	4b59      	ldr	r3, [pc, #356]	; (800addc <tcp_input+0x524>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	885b      	ldrh	r3, [r3, #2]
 800ac7c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d113      	bne.n	800acaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	4b56      	ldr	r3, [pc, #344]	; (800ade0 <tcp_input+0x528>)
 800ac88:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d10d      	bne.n	800acaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b53      	ldr	r3, [pc, #332]	; (800ade0 <tcp_input+0x528>)
 800ac94:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d107      	bne.n	800acaa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ac9a:	69f8      	ldr	r0, [r7, #28]
 800ac9c:	f000 fb52 	bl	800b344 <tcp_timewait_input>
        }
        pbuf_free(p);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7fd fdb1 	bl	8008808 <pbuf_free>
        return;
 800aca6:	e1ee      	b.n	800b086 <tcp_input+0x7ce>
        continue;
 800aca8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	61fb      	str	r3, [r7, #28]
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1bc      	bne.n	800ac30 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acba:	4b51      	ldr	r3, [pc, #324]	; (800ae00 <tcp_input+0x548>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e02a      	b.n	800ad18 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	7a1b      	ldrb	r3, [r3, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00c      	beq.n	800ace4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	7a1a      	ldrb	r2, [r3, #8]
 800acce:	4b44      	ldr	r3, [pc, #272]	; (800ade0 <tcp_input+0x528>)
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acd6:	3301      	adds	r3, #1
 800acd8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acda:	429a      	cmp	r2, r3
 800acdc:	d002      	beq.n	800ace4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	61bb      	str	r3, [r7, #24]
        continue;
 800ace2:	e016      	b.n	800ad12 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	8ada      	ldrh	r2, [r3, #22]
 800ace8:	4b3c      	ldr	r3, [pc, #240]	; (800addc <tcp_input+0x524>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	885b      	ldrh	r3, [r3, #2]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d10c      	bne.n	800ad0e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	4b39      	ldr	r3, [pc, #228]	; (800ade0 <tcp_input+0x528>)
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d00f      	beq.n	800ad20 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00d      	beq.n	800ad22 <tcp_input+0x46a>
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1d1      	bne.n	800acc2 <tcp_input+0x40a>
 800ad1e:	e000      	b.n	800ad22 <tcp_input+0x46a>
            break;
 800ad20:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d014      	beq.n	800ad52 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ad36:	4b32      	ldr	r3, [pc, #200]	; (800ae00 <tcp_input+0x548>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ad3e:	4a30      	ldr	r2, [pc, #192]	; (800ae00 <tcp_input+0x548>)
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ad44:	6978      	ldr	r0, [r7, #20]
 800ad46:	f000 f9ff 	bl	800b148 <tcp_listen_input>
      }
      pbuf_free(p);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7fd fd5c 	bl	8008808 <pbuf_free>
      return;
 800ad50:	e199      	b.n	800b086 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 8160 	beq.w	800b01a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ad5a:	4b2a      	ldr	r3, [pc, #168]	; (800ae04 <tcp_input+0x54c>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	891a      	ldrh	r2, [r3, #8]
 800ad64:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <tcp_input+0x54c>)
 800ad66:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ad68:	4a26      	ldr	r2, [pc, #152]	; (800ae04 <tcp_input+0x54c>)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ad6e:	4b1b      	ldr	r3, [pc, #108]	; (800addc <tcp_input+0x524>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a24      	ldr	r2, [pc, #144]	; (800ae04 <tcp_input+0x54c>)
 800ad74:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <tcp_input+0x550>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ad7c:	4b23      	ldr	r3, [pc, #140]	; (800ae0c <tcp_input+0x554>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ad82:	4b23      	ldr	r3, [pc, #140]	; (800ae10 <tcp_input+0x558>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ad88:	4b22      	ldr	r3, [pc, #136]	; (800ae14 <tcp_input+0x55c>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7b5b      	ldrb	r3, [r3, #13]
 800ad98:	f043 0301 	orr.w	r3, r3, #1
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d038      	beq.n	800ae1c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adaa:	69f8      	ldr	r0, [r7, #28]
 800adac:	f7ff f8ca 	bl	8009f44 <tcp_process_refused_data>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f113 0f0d 	cmn.w	r3, #13
 800adb6:	d007      	beq.n	800adc8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02d      	beq.n	800ae1c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800adc0:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <tcp_input+0x560>)
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d029      	beq.n	800ae1c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f040 8104 	bne.w	800afda <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800add2:	69f8      	ldr	r0, [r7, #28]
 800add4:	f003 fe28 	bl	800ea28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800add8:	e0ff      	b.n	800afda <tcp_input+0x722>
 800adda:	bf00      	nop
 800addc:	20008ab4 	.word	0x20008ab4
 800ade0:	2000c0d4 	.word	0x2000c0d4
 800ade4:	080148b4 	.word	0x080148b4
 800ade8:	080149e0 	.word	0x080149e0
 800adec:	08014900 	.word	0x08014900
 800adf0:	2000f808 	.word	0x2000f808
 800adf4:	08014a0c 	.word	0x08014a0c
 800adf8:	2000f818 	.word	0x2000f818
 800adfc:	08014a38 	.word	0x08014a38
 800ae00:	2000f810 	.word	0x2000f810
 800ae04:	20008aa4 	.word	0x20008aa4
 800ae08:	20008ad4 	.word	0x20008ad4
 800ae0c:	20008ad1 	.word	0x20008ad1
 800ae10:	20008acc 	.word	0x20008acc
 800ae14:	20008ad0 	.word	0x20008ad0
 800ae18:	20008ace 	.word	0x20008ace
      }
    }
    tcp_input_pcb = pcb;
 800ae1c:	4a9b      	ldr	r2, [pc, #620]	; (800b08c <tcp_input+0x7d4>)
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ae22:	69f8      	ldr	r0, [r7, #28]
 800ae24:	f000 fb0a 	bl	800b43c <tcp_process>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ae2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae30:	f113 0f0d 	cmn.w	r3, #13
 800ae34:	f000 80d3 	beq.w	800afde <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ae38:	4b95      	ldr	r3, [pc, #596]	; (800b090 <tcp_input+0x7d8>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d015      	beq.n	800ae70 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <tcp_input+0x5a8>
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae54:	69fa      	ldr	r2, [r7, #28]
 800ae56:	6912      	ldr	r2, [r2, #16]
 800ae58:	f06f 010d 	mvn.w	r1, #13
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae60:	69f9      	ldr	r1, [r7, #28]
 800ae62:	488c      	ldr	r0, [pc, #560]	; (800b094 <tcp_input+0x7dc>)
 800ae64:	f7ff fbb0 	bl	800a5c8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ae68:	69f8      	ldr	r0, [r7, #28]
 800ae6a:	f7fd ff79 	bl	8008d60 <tcp_free>
 800ae6e:	e0c1      	b.n	800aff4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ae74:	4b88      	ldr	r3, [pc, #544]	; (800b098 <tcp_input+0x7e0>)
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01d      	beq.n	800aeb8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ae7c:	4b86      	ldr	r3, [pc, #536]	; (800b098 <tcp_input+0x7e0>)
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <tcp_input+0x5ea>
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	6910      	ldr	r0, [r2, #16]
 800ae96:	89fa      	ldrh	r2, [r7, #14]
 800ae98:	69f9      	ldr	r1, [r7, #28]
 800ae9a:	4798      	blx	r3
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	74fb      	strb	r3, [r7, #19]
 800aea0:	e001      	b.n	800aea6 <tcp_input+0x5ee>
 800aea2:	2300      	movs	r3, #0
 800aea4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeaa:	f113 0f0d 	cmn.w	r3, #13
 800aeae:	f000 8098 	beq.w	800afe2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aeb2:	4b79      	ldr	r3, [pc, #484]	; (800b098 <tcp_input+0x7e0>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800aeb8:	69f8      	ldr	r0, [r7, #28]
 800aeba:	f000 f905 	bl	800b0c8 <tcp_input_delayed_close>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f040 8090 	bne.w	800afe6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aec6:	4b75      	ldr	r3, [pc, #468]	; (800b09c <tcp_input+0x7e4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d041      	beq.n	800af52 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d006      	beq.n	800aee4 <tcp_input+0x62c>
 800aed6:	4b72      	ldr	r3, [pc, #456]	; (800b0a0 <tcp_input+0x7e8>)
 800aed8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aedc:	4971      	ldr	r1, [pc, #452]	; (800b0a4 <tcp_input+0x7ec>)
 800aede:	4872      	ldr	r0, [pc, #456]	; (800b0a8 <tcp_input+0x7f0>)
 800aee0:	f007 fe64 	bl	8012bac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	8b5b      	ldrh	r3, [r3, #26]
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d008      	beq.n	800af02 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aef0:	4b6a      	ldr	r3, [pc, #424]	; (800b09c <tcp_input+0x7e4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fd fc87 	bl	8008808 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aefa:	69f8      	ldr	r0, [r7, #28]
 800aefc:	f7fe fa10 	bl	8009320 <tcp_abort>
            goto aborted;
 800af00:	e078      	b.n	800aff4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00c      	beq.n	800af26 <tcp_input+0x66e>
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	6918      	ldr	r0, [r3, #16]
 800af16:	4b61      	ldr	r3, [pc, #388]	; (800b09c <tcp_input+0x7e4>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	69f9      	ldr	r1, [r7, #28]
 800af1e:	47a0      	blx	r4
 800af20:	4603      	mov	r3, r0
 800af22:	74fb      	strb	r3, [r7, #19]
 800af24:	e008      	b.n	800af38 <tcp_input+0x680>
 800af26:	4b5d      	ldr	r3, [pc, #372]	; (800b09c <tcp_input+0x7e4>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	69f9      	ldr	r1, [r7, #28]
 800af2e:	2000      	movs	r0, #0
 800af30:	f7ff f8dc 	bl	800a0ec <tcp_recv_null>
 800af34:	4603      	mov	r3, r0
 800af36:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800af38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af3c:	f113 0f0d 	cmn.w	r3, #13
 800af40:	d053      	beq.n	800afea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800af42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800af4a:	4b54      	ldr	r3, [pc, #336]	; (800b09c <tcp_input+0x7e4>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800af52:	4b4f      	ldr	r3, [pc, #316]	; (800b090 <tcp_input+0x7d8>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 0320 	and.w	r3, r3, #32
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d030      	beq.n	800afc0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af62:	2b00      	cmp	r3, #0
 800af64:	d009      	beq.n	800af7a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af6a:	7b5a      	ldrb	r2, [r3, #13]
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af70:	f042 0220 	orr.w	r2, r2, #32
 800af74:	b2d2      	uxtb	r2, r2
 800af76:	735a      	strb	r2, [r3, #13]
 800af78:	e022      	b.n	800afc0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800af82:	d005      	beq.n	800af90 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af88:	3301      	adds	r3, #1
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <tcp_input+0x6fa>
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	6918      	ldr	r0, [r3, #16]
 800afa4:	2300      	movs	r3, #0
 800afa6:	2200      	movs	r2, #0
 800afa8:	69f9      	ldr	r1, [r7, #28]
 800afaa:	47a0      	blx	r4
 800afac:	4603      	mov	r3, r0
 800afae:	74fb      	strb	r3, [r7, #19]
 800afb0:	e001      	b.n	800afb6 <tcp_input+0x6fe>
 800afb2:	2300      	movs	r3, #0
 800afb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800afb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afba:	f113 0f0d 	cmn.w	r3, #13
 800afbe:	d016      	beq.n	800afee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800afc0:	4b32      	ldr	r3, [pc, #200]	; (800b08c <tcp_input+0x7d4>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800afc6:	69f8      	ldr	r0, [r7, #28]
 800afc8:	f000 f87e 	bl	800b0c8 <tcp_input_delayed_close>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10f      	bne.n	800aff2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800afd2:	69f8      	ldr	r0, [r7, #28]
 800afd4:	f002 ff10 	bl	800ddf8 <tcp_output>
 800afd8:	e00c      	b.n	800aff4 <tcp_input+0x73c>
        goto aborted;
 800afda:	bf00      	nop
 800afdc:	e00a      	b.n	800aff4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800afde:	bf00      	nop
 800afe0:	e008      	b.n	800aff4 <tcp_input+0x73c>
              goto aborted;
 800afe2:	bf00      	nop
 800afe4:	e006      	b.n	800aff4 <tcp_input+0x73c>
          goto aborted;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <tcp_input+0x73c>
            goto aborted;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <tcp_input+0x73c>
              goto aborted;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <tcp_input+0x73c>
          goto aborted;
 800aff2:	bf00      	nop
    tcp_input_pcb = NULL;
 800aff4:	4b25      	ldr	r3, [pc, #148]	; (800b08c <tcp_input+0x7d4>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800affa:	4b28      	ldr	r3, [pc, #160]	; (800b09c <tcp_input+0x7e4>)
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <tcp_input+0x7f4>)
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d03d      	beq.n	800b084 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800b008:	4b28      	ldr	r3, [pc, #160]	; (800b0ac <tcp_input+0x7f4>)
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fd fbfb 	bl	8008808 <pbuf_free>
      inseg.p = NULL;
 800b012:	4b26      	ldr	r3, [pc, #152]	; (800b0ac <tcp_input+0x7f4>)
 800b014:	2200      	movs	r2, #0
 800b016:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b018:	e034      	b.n	800b084 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b01a:	4b25      	ldr	r3, [pc, #148]	; (800b0b0 <tcp_input+0x7f8>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	899b      	ldrh	r3, [r3, #12]
 800b020:	b29b      	uxth	r3, r3
 800b022:	4618      	mov	r0, r3
 800b024:	f7fc f848 	bl	80070b8 <lwip_htons>
 800b028:	4603      	mov	r3, r0
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d118      	bne.n	800b066 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b034:	4b1f      	ldr	r3, [pc, #124]	; (800b0b4 <tcp_input+0x7fc>)
 800b036:	6819      	ldr	r1, [r3, #0]
 800b038:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <tcp_input+0x800>)
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b1f      	ldr	r3, [pc, #124]	; (800b0bc <tcp_input+0x804>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <tcp_input+0x7f8>)
 800b046:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b048:	885b      	ldrh	r3, [r3, #2]
 800b04a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b04c:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <tcp_input+0x7f8>)
 800b04e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b050:	8812      	ldrh	r2, [r2, #0]
 800b052:	b292      	uxth	r2, r2
 800b054:	9202      	str	r2, [sp, #8]
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <tcp_input+0x808>)
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4b19      	ldr	r3, [pc, #100]	; (800b0c4 <tcp_input+0x80c>)
 800b05e:	4602      	mov	r2, r0
 800b060:	2000      	movs	r0, #0
 800b062:	f003 fc8f 	bl	800e984 <tcp_rst>
    pbuf_free(p);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7fd fbce 	bl	8008808 <pbuf_free>
  return;
 800b06c:	e00a      	b.n	800b084 <tcp_input+0x7cc>
    goto dropped;
 800b06e:	bf00      	nop
 800b070:	e004      	b.n	800b07c <tcp_input+0x7c4>
dropped:
 800b072:	bf00      	nop
 800b074:	e002      	b.n	800b07c <tcp_input+0x7c4>
      goto dropped;
 800b076:	bf00      	nop
 800b078:	e000      	b.n	800b07c <tcp_input+0x7c4>
      goto dropped;
 800b07a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7fd fbc3 	bl	8008808 <pbuf_free>
 800b082:	e000      	b.n	800b086 <tcp_input+0x7ce>
  return;
 800b084:	bf00      	nop
}
 800b086:	3724      	adds	r7, #36	; 0x24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	2000f81c 	.word	0x2000f81c
 800b090:	20008ad1 	.word	0x20008ad1
 800b094:	2000f808 	.word	0x2000f808
 800b098:	20008acc 	.word	0x20008acc
 800b09c:	20008ad4 	.word	0x20008ad4
 800b0a0:	080148b4 	.word	0x080148b4
 800b0a4:	08014a68 	.word	0x08014a68
 800b0a8:	08014900 	.word	0x08014900
 800b0ac:	20008aa4 	.word	0x20008aa4
 800b0b0:	20008ab4 	.word	0x20008ab4
 800b0b4:	20008ac8 	.word	0x20008ac8
 800b0b8:	20008ace 	.word	0x20008ace
 800b0bc:	20008ac4 	.word	0x20008ac4
 800b0c0:	2000c0e4 	.word	0x2000c0e4
 800b0c4:	2000c0e8 	.word	0x2000c0e8

0800b0c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <tcp_input_delayed_close+0x1c>
 800b0d6:	4b17      	ldr	r3, [pc, #92]	; (800b134 <tcp_input_delayed_close+0x6c>)
 800b0d8:	f240 225a 	movw	r2, #602	; 0x25a
 800b0dc:	4916      	ldr	r1, [pc, #88]	; (800b138 <tcp_input_delayed_close+0x70>)
 800b0de:	4817      	ldr	r0, [pc, #92]	; (800b13c <tcp_input_delayed_close+0x74>)
 800b0e0:	f007 fd64 	bl	8012bac <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b0e4:	4b16      	ldr	r3, [pc, #88]	; (800b140 <tcp_input_delayed_close+0x78>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 0310 	and.w	r3, r3, #16
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01c      	beq.n	800b12a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8b5b      	ldrh	r3, [r3, #26]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10d      	bne.n	800b118 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	2b00      	cmp	r3, #0
 800b104:	d008      	beq.n	800b118 <tcp_input_delayed_close+0x50>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6912      	ldr	r2, [r2, #16]
 800b110:	f06f 010e 	mvn.w	r1, #14
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	480a      	ldr	r0, [pc, #40]	; (800b144 <tcp_input_delayed_close+0x7c>)
 800b11c:	f7ff fa54 	bl	800a5c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fd fe1d 	bl	8008d60 <tcp_free>
    return 1;
 800b126:	2301      	movs	r3, #1
 800b128:	e000      	b.n	800b12c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	080148b4 	.word	0x080148b4
 800b138:	08014a84 	.word	0x08014a84
 800b13c:	08014900 	.word	0x08014900
 800b140:	20008ad1 	.word	0x20008ad1
 800b144:	2000f808 	.word	0x2000f808

0800b148 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b08b      	sub	sp, #44	; 0x2c
 800b14c:	af04      	add	r7, sp, #16
 800b14e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b150:	4b6f      	ldr	r3, [pc, #444]	; (800b310 <tcp_listen_input+0x1c8>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f040 80d3 	bne.w	800b304 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d106      	bne.n	800b172 <tcp_listen_input+0x2a>
 800b164:	4b6b      	ldr	r3, [pc, #428]	; (800b314 <tcp_listen_input+0x1cc>)
 800b166:	f240 2281 	movw	r2, #641	; 0x281
 800b16a:	496b      	ldr	r1, [pc, #428]	; (800b318 <tcp_listen_input+0x1d0>)
 800b16c:	486b      	ldr	r0, [pc, #428]	; (800b31c <tcp_listen_input+0x1d4>)
 800b16e:	f007 fd1d 	bl	8012bac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b172:	4b67      	ldr	r3, [pc, #412]	; (800b310 <tcp_listen_input+0x1c8>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 0310 	and.w	r3, r3, #16
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d019      	beq.n	800b1b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b17e:	4b68      	ldr	r3, [pc, #416]	; (800b320 <tcp_listen_input+0x1d8>)
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	4b68      	ldr	r3, [pc, #416]	; (800b324 <tcp_listen_input+0x1dc>)
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	4b67      	ldr	r3, [pc, #412]	; (800b328 <tcp_listen_input+0x1e0>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18e:	4b67      	ldr	r3, [pc, #412]	; (800b32c <tcp_listen_input+0x1e4>)
 800b190:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b196:	4a65      	ldr	r2, [pc, #404]	; (800b32c <tcp_listen_input+0x1e4>)
 800b198:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b19a:	8812      	ldrh	r2, [r2, #0]
 800b19c:	b292      	uxth	r2, r2
 800b19e:	9202      	str	r2, [sp, #8]
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	4b63      	ldr	r3, [pc, #396]	; (800b330 <tcp_listen_input+0x1e8>)
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4b63      	ldr	r3, [pc, #396]	; (800b334 <tcp_listen_input+0x1ec>)
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f003 fbea 	bl	800e984 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b1b0:	e0aa      	b.n	800b308 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800b1b2:	4b57      	ldr	r3, [pc, #348]	; (800b310 <tcp_listen_input+0x1c8>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f000 80a4 	beq.w	800b308 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7d5b      	ldrb	r3, [r3, #21]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff f8b5 	bl	800a334 <tcp_alloc>
 800b1ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d111      	bne.n	800b1f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <tcp_listen_input+0xa8>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	6910      	ldr	r0, [r2, #16]
 800b1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	4798      	blx	r3
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73bb      	strb	r3, [r7, #14]
      return;
 800b1ee:	e08c      	b.n	800b30a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1f0:	23f0      	movs	r3, #240	; 0xf0
 800b1f2:	73bb      	strb	r3, [r7, #14]
      return;
 800b1f4:	e089      	b.n	800b30a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b1f6:	4b50      	ldr	r3, [pc, #320]	; (800b338 <tcp_listen_input+0x1f0>)
 800b1f8:	695a      	ldr	r2, [r3, #20]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b1fe:	4b4e      	ldr	r3, [pc, #312]	; (800b338 <tcp_listen_input+0x1f0>)
 800b200:	691a      	ldr	r2, [r3, #16]
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	8ada      	ldrh	r2, [r3, #22]
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b20e:	4b47      	ldr	r3, [pc, #284]	; (800b32c <tcp_listen_input+0x1e4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	b29a      	uxth	r2, r3
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2203      	movs	r2, #3
 800b21e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b220:	4b41      	ldr	r3, [pc, #260]	; (800b328 <tcp_listen_input+0x1e0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b232:	6978      	ldr	r0, [r7, #20]
 800b234:	f7ff fa5c 	bl	800a6f0 <tcp_next_iss>
 800b238:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b252:	4b35      	ldr	r3, [pc, #212]	; (800b328 <tcp_listen_input+0x1e0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	1e5a      	subs	r2, r3, #1
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691a      	ldr	r2, [r3, #16]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7a5b      	ldrb	r3, [r3, #9]
 800b26e:	f003 030c 	and.w	r3, r3, #12
 800b272:	b2da      	uxtb	r2, r3
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7a1a      	ldrb	r2, [r3, #8]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b280:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <tcp_listen_input+0x1f4>)
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	60da      	str	r2, [r3, #12]
 800b288:	4a2c      	ldr	r2, [pc, #176]	; (800b33c <tcp_listen_input+0x1f4>)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	f003 fd3b 	bl	800ed08 <tcp_timer_needed>
 800b292:	4b2b      	ldr	r3, [pc, #172]	; (800b340 <tcp_listen_input+0x1f8>)
 800b294:	2201      	movs	r2, #1
 800b296:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b298:	6978      	ldr	r0, [r7, #20]
 800b29a:	f001 fd8f 	bl	800cdbc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b29e:	4b23      	ldr	r3, [pc, #140]	; (800b32c <tcp_listen_input+0x1e4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	89db      	ldrh	r3, [r3, #14]
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f005 f92d 	bl	8010520 <ip4_route>
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff fa34 	bl	800a73c <tcp_eff_send_mss_netif>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2dc:	2112      	movs	r1, #18
 800b2de:	6978      	ldr	r0, [r7, #20]
 800b2e0:	f002 fc9c 	bl	800dc1c <tcp_enqueue_flags>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d004      	beq.n	800b2fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	6978      	ldr	r0, [r7, #20]
 800b2f4:	f7fd ff56 	bl	80091a4 <tcp_abandon>
      return;
 800b2f8:	e007      	b.n	800b30a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800b2fa:	6978      	ldr	r0, [r7, #20]
 800b2fc:	f002 fd7c 	bl	800ddf8 <tcp_output>
  return;
 800b300:	bf00      	nop
 800b302:	e001      	b.n	800b308 <tcp_listen_input+0x1c0>
    return;
 800b304:	bf00      	nop
 800b306:	e000      	b.n	800b30a <tcp_listen_input+0x1c2>
  return;
 800b308:	bf00      	nop
}
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd90      	pop	{r4, r7, pc}
 800b310:	20008ad0 	.word	0x20008ad0
 800b314:	080148b4 	.word	0x080148b4
 800b318:	08014aac 	.word	0x08014aac
 800b31c:	08014900 	.word	0x08014900
 800b320:	20008ac8 	.word	0x20008ac8
 800b324:	20008ace 	.word	0x20008ace
 800b328:	20008ac4 	.word	0x20008ac4
 800b32c:	20008ab4 	.word	0x20008ab4
 800b330:	2000c0e4 	.word	0x2000c0e4
 800b334:	2000c0e8 	.word	0x2000c0e8
 800b338:	2000c0d4 	.word	0x2000c0d4
 800b33c:	2000f808 	.word	0x2000f808
 800b340:	2000f804 	.word	0x2000f804

0800b344 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af04      	add	r7, sp, #16
 800b34a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b34c:	4b30      	ldr	r3, [pc, #192]	; (800b410 <tcp_timewait_input+0xcc>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d154      	bne.n	800b402 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d106      	bne.n	800b36c <tcp_timewait_input+0x28>
 800b35e:	4b2d      	ldr	r3, [pc, #180]	; (800b414 <tcp_timewait_input+0xd0>)
 800b360:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b364:	492c      	ldr	r1, [pc, #176]	; (800b418 <tcp_timewait_input+0xd4>)
 800b366:	482d      	ldr	r0, [pc, #180]	; (800b41c <tcp_timewait_input+0xd8>)
 800b368:	f007 fc20 	bl	8012bac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b36c:	4b28      	ldr	r3, [pc, #160]	; (800b410 <tcp_timewait_input+0xcc>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d02a      	beq.n	800b3ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b378:	4b29      	ldr	r3, [pc, #164]	; (800b420 <tcp_timewait_input+0xdc>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	db2d      	blt.n	800b3e2 <tcp_timewait_input+0x9e>
 800b386:	4b26      	ldr	r3, [pc, #152]	; (800b420 <tcp_timewait_input+0xdc>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b392:	440b      	add	r3, r1
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	dc23      	bgt.n	800b3e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b39a:	4b22      	ldr	r3, [pc, #136]	; (800b424 <tcp_timewait_input+0xe0>)
 800b39c:	6819      	ldr	r1, [r3, #0]
 800b39e:	4b22      	ldr	r3, [pc, #136]	; (800b428 <tcp_timewait_input+0xe4>)
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4b1e      	ldr	r3, [pc, #120]	; (800b420 <tcp_timewait_input+0xdc>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3aa:	4b20      	ldr	r3, [pc, #128]	; (800b42c <tcp_timewait_input+0xe8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3ae:	885b      	ldrh	r3, [r3, #2]
 800b3b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3b2:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <tcp_timewait_input+0xe8>)
 800b3b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3b6:	8812      	ldrh	r2, [r2, #0]
 800b3b8:	b292      	uxth	r2, r2
 800b3ba:	9202      	str	r2, [sp, #8]
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	4b1c      	ldr	r3, [pc, #112]	; (800b430 <tcp_timewait_input+0xec>)
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <tcp_timewait_input+0xf0>)
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f003 fadc 	bl	800e984 <tcp_rst>
      return;
 800b3cc:	e01c      	b.n	800b408 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800b3ce:	4b10      	ldr	r3, [pc, #64]	; (800b410 <tcp_timewait_input+0xcc>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b3da:	4b17      	ldr	r3, [pc, #92]	; (800b438 <tcp_timewait_input+0xf4>)
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b3e2:	4b11      	ldr	r3, [pc, #68]	; (800b428 <tcp_timewait_input+0xe4>)
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00d      	beq.n	800b406 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8b5b      	ldrh	r3, [r3, #26]
 800b3ee:	f043 0302 	orr.w	r3, r3, #2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f002 fcfd 	bl	800ddf8 <tcp_output>
  }
  return;
 800b3fe:	bf00      	nop
 800b400:	e001      	b.n	800b406 <tcp_timewait_input+0xc2>
    return;
 800b402:	bf00      	nop
 800b404:	e000      	b.n	800b408 <tcp_timewait_input+0xc4>
  return;
 800b406:	bf00      	nop
}
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20008ad0 	.word	0x20008ad0
 800b414:	080148b4 	.word	0x080148b4
 800b418:	08014acc 	.word	0x08014acc
 800b41c:	08014900 	.word	0x08014900
 800b420:	20008ac4 	.word	0x20008ac4
 800b424:	20008ac8 	.word	0x20008ac8
 800b428:	20008ace 	.word	0x20008ace
 800b42c:	20008ab4 	.word	0x20008ab4
 800b430:	2000c0e4 	.word	0x2000c0e4
 800b434:	2000c0e8 	.word	0x2000c0e8
 800b438:	2000f80c 	.word	0x2000f80c

0800b43c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b08d      	sub	sp, #52	; 0x34
 800b440:	af04      	add	r7, sp, #16
 800b442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <tcp_process+0x24>
 800b452:	4ba5      	ldr	r3, [pc, #660]	; (800b6e8 <tcp_process+0x2ac>)
 800b454:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b458:	49a4      	ldr	r1, [pc, #656]	; (800b6ec <tcp_process+0x2b0>)
 800b45a:	48a5      	ldr	r0, [pc, #660]	; (800b6f0 <tcp_process+0x2b4>)
 800b45c:	f007 fba6 	bl	8012bac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b460:	4ba4      	ldr	r3, [pc, #656]	; (800b6f4 <tcp_process+0x2b8>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d04e      	beq.n	800b50a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7d1b      	ldrb	r3, [r3, #20]
 800b470:	2b02      	cmp	r3, #2
 800b472:	d108      	bne.n	800b486 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b478:	4b9f      	ldr	r3, [pc, #636]	; (800b6f8 <tcp_process+0x2bc>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d123      	bne.n	800b4c8 <tcp_process+0x8c>
        acceptable = 1;
 800b480:	2301      	movs	r3, #1
 800b482:	76fb      	strb	r3, [r7, #27]
 800b484:	e020      	b.n	800b4c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b48a:	4b9c      	ldr	r3, [pc, #624]	; (800b6fc <tcp_process+0x2c0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d102      	bne.n	800b498 <tcp_process+0x5c>
        acceptable = 1;
 800b492:	2301      	movs	r3, #1
 800b494:	76fb      	strb	r3, [r7, #27]
 800b496:	e017      	b.n	800b4c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b498:	4b98      	ldr	r3, [pc, #608]	; (800b6fc <tcp_process+0x2c0>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	db10      	blt.n	800b4c8 <tcp_process+0x8c>
 800b4a6:	4b95      	ldr	r3, [pc, #596]	; (800b6fc <tcp_process+0x2c0>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4b2:	440b      	add	r3, r1
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dc06      	bgt.n	800b4c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8b5b      	ldrh	r3, [r3, #26]
 800b4be:	f043 0302 	orr.w	r3, r3, #2
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b4c8:	7efb      	ldrb	r3, [r7, #27]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01b      	beq.n	800b506 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	7d1b      	ldrb	r3, [r3, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <tcp_process+0xa8>
 800b4d6:	4b84      	ldr	r3, [pc, #528]	; (800b6e8 <tcp_process+0x2ac>)
 800b4d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b4dc:	4988      	ldr	r1, [pc, #544]	; (800b700 <tcp_process+0x2c4>)
 800b4de:	4884      	ldr	r0, [pc, #528]	; (800b6f0 <tcp_process+0x2b4>)
 800b4e0:	f007 fb64 	bl	8012bac <iprintf>
      recv_flags |= TF_RESET;
 800b4e4:	4b87      	ldr	r3, [pc, #540]	; (800b704 <tcp_process+0x2c8>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	4b85      	ldr	r3, [pc, #532]	; (800b704 <tcp_process+0x2c8>)
 800b4f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8b5b      	ldrh	r3, [r3, #26]
 800b4f6:	f023 0301 	bic.w	r3, r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b500:	f06f 030d 	mvn.w	r3, #13
 800b504:	e37a      	b.n	800bbfc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	e378      	b.n	800bbfc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b50a:	4b7a      	ldr	r3, [pc, #488]	; (800b6f4 <tcp_process+0x2b8>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d010      	beq.n	800b538 <tcp_process+0xfc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d00c      	beq.n	800b538 <tcp_process+0xfc>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7d1b      	ldrb	r3, [r3, #20]
 800b522:	2b03      	cmp	r3, #3
 800b524:	d008      	beq.n	800b538 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	8b5b      	ldrh	r3, [r3, #26]
 800b52a:	f043 0302 	orr.w	r3, r3, #2
 800b52e:	b29a      	uxth	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	e361      	b.n	800bbfc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8b5b      	ldrh	r3, [r3, #26]
 800b53c:	f003 0310 	and.w	r3, r3, #16
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b544:	4b70      	ldr	r3, [pc, #448]	; (800b708 <tcp_process+0x2cc>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 fc2d 	bl	800cdbc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	7d1b      	ldrb	r3, [r3, #20]
 800b566:	3b02      	subs	r3, #2
 800b568:	2b07      	cmp	r3, #7
 800b56a:	f200 8337 	bhi.w	800bbdc <tcp_process+0x7a0>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <tcp_process+0x138>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b595 	.word	0x0800b595
 800b578:	0800b7c5 	.word	0x0800b7c5
 800b57c:	0800b93d 	.word	0x0800b93d
 800b580:	0800b967 	.word	0x0800b967
 800b584:	0800ba8b 	.word	0x0800ba8b
 800b588:	0800b93d 	.word	0x0800b93d
 800b58c:	0800bb17 	.word	0x0800bb17
 800b590:	0800bba7 	.word	0x0800bba7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b594:	4b57      	ldr	r3, [pc, #348]	; (800b6f4 <tcp_process+0x2b8>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 0310 	and.w	r3, r3, #16
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 80e4 	beq.w	800b76a <tcp_process+0x32e>
 800b5a2:	4b54      	ldr	r3, [pc, #336]	; (800b6f4 <tcp_process+0x2b8>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 80dd 	beq.w	800b76a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	4b50      	ldr	r3, [pc, #320]	; (800b6f8 <tcp_process+0x2bc>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	f040 80d5 	bne.w	800b76a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b5c0:	4b4e      	ldr	r3, [pc, #312]	; (800b6fc <tcp_process+0x2c0>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b5d2:	4b49      	ldr	r3, [pc, #292]	; (800b6f8 <tcp_process+0x2bc>)
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b5da:	4b4c      	ldr	r3, [pc, #304]	; (800b70c <tcp_process+0x2d0>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	89db      	ldrh	r3, [r3, #14]
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b5f4:	4b41      	ldr	r3, [pc, #260]	; (800b6fc <tcp_process+0x2c0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2204      	movs	r2, #4
 800b602:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3304      	adds	r3, #4
 800b60c:	4618      	mov	r0, r3
 800b60e:	f004 ff87 	bl	8010520 <ip4_route>
 800b612:	4601      	mov	r1, r0
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	461a      	mov	r2, r3
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff f88e 	bl	800a73c <tcp_eff_send_mss_netif>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b62c:	009a      	lsls	r2, r3, #2
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	f241 111c 	movw	r1, #4380	; 0x111c
 800b638:	428b      	cmp	r3, r1
 800b63a:	bf38      	it	cc
 800b63c:	460b      	movcc	r3, r1
 800b63e:	429a      	cmp	r2, r3
 800b640:	d204      	bcs.n	800b64c <tcp_process+0x210>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	b29b      	uxth	r3, r3
 800b64a:	e00d      	b.n	800b668 <tcp_process+0x22c>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	f241 121c 	movw	r2, #4380	; 0x111c
 800b656:	4293      	cmp	r3, r2
 800b658:	d904      	bls.n	800b664 <tcp_process+0x228>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	b29b      	uxth	r3, r3
 800b662:	e001      	b.n	800b668 <tcp_process+0x22c>
 800b664:	f241 131c 	movw	r3, #4380	; 0x111c
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <tcp_process+0x24a>
 800b678:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <tcp_process+0x2ac>)
 800b67a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b67e:	4924      	ldr	r1, [pc, #144]	; (800b710 <tcp_process+0x2d4>)
 800b680:	481b      	ldr	r0, [pc, #108]	; (800b6f0 <tcp_process+0x2b4>)
 800b682:	f007 fa93 	bl	8012bac <iprintf>
        --pcb->snd_queuelen;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b68c:	3b01      	subs	r3, #1
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d111      	bne.n	800b6c6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <tcp_process+0x280>
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <tcp_process+0x2ac>)
 800b6b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b6b4:	4917      	ldr	r1, [pc, #92]	; (800b714 <tcp_process+0x2d8>)
 800b6b6:	480e      	ldr	r0, [pc, #56]	; (800b6f0 <tcp_process+0x2b4>)
 800b6b8:	f007 fa78 	bl	8012bac <iprintf>
          pcb->unsent = rseg->next;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6c4:	e003      	b.n	800b6ce <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b6ce:	69f8      	ldr	r0, [r7, #28]
 800b6d0:	f7fe fcc8 	bl	800a064 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d11d      	bne.n	800b718 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6e2:	861a      	strh	r2, [r3, #48]	; 0x30
 800b6e4:	e01f      	b.n	800b726 <tcp_process+0x2ea>
 800b6e6:	bf00      	nop
 800b6e8:	080148b4 	.word	0x080148b4
 800b6ec:	08014aec 	.word	0x08014aec
 800b6f0:	08014900 	.word	0x08014900
 800b6f4:	20008ad0 	.word	0x20008ad0
 800b6f8:	20008ac8 	.word	0x20008ac8
 800b6fc:	20008ac4 	.word	0x20008ac4
 800b700:	08014b08 	.word	0x08014b08
 800b704:	20008ad1 	.word	0x20008ad1
 800b708:	2000f80c 	.word	0x2000f80c
 800b70c:	20008ab4 	.word	0x20008ab4
 800b710:	08014b28 	.word	0x08014b28
 800b714:	08014b40 	.word	0x08014b40
        } else {
          pcb->rtime = 0;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <tcp_process+0x30a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6910      	ldr	r0, [r2, #16]
 800b73a:	2200      	movs	r2, #0
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	4798      	blx	r3
 800b740:	4603      	mov	r3, r0
 800b742:	76bb      	strb	r3, [r7, #26]
 800b744:	e001      	b.n	800b74a <tcp_process+0x30e>
 800b746:	2300      	movs	r3, #0
 800b748:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b74a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b74e:	f113 0f0d 	cmn.w	r3, #13
 800b752:	d102      	bne.n	800b75a <tcp_process+0x31e>
          return ERR_ABRT;
 800b754:	f06f 030c 	mvn.w	r3, #12
 800b758:	e250      	b.n	800bbfc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	8b5b      	ldrh	r3, [r3, #26]
 800b75e:	f043 0302 	orr.w	r3, r3, #2
 800b762:	b29a      	uxth	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b768:	e23a      	b.n	800bbe0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b76a:	4b9d      	ldr	r3, [pc, #628]	; (800b9e0 <tcp_process+0x5a4>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	f003 0310 	and.w	r3, r3, #16
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 8234 	beq.w	800bbe0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b778:	4b9a      	ldr	r3, [pc, #616]	; (800b9e4 <tcp_process+0x5a8>)
 800b77a:	6819      	ldr	r1, [r3, #0]
 800b77c:	4b9a      	ldr	r3, [pc, #616]	; (800b9e8 <tcp_process+0x5ac>)
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	4b9a      	ldr	r3, [pc, #616]	; (800b9ec <tcp_process+0x5b0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b788:	4b99      	ldr	r3, [pc, #612]	; (800b9f0 <tcp_process+0x5b4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b790:	4a97      	ldr	r2, [pc, #604]	; (800b9f0 <tcp_process+0x5b4>)
 800b792:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b794:	8812      	ldrh	r2, [r2, #0]
 800b796:	b292      	uxth	r2, r2
 800b798:	9202      	str	r2, [sp, #8]
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	4b95      	ldr	r3, [pc, #596]	; (800b9f4 <tcp_process+0x5b8>)
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	4b95      	ldr	r3, [pc, #596]	; (800b9f8 <tcp_process+0x5bc>)
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f003 f8ed 	bl	800e984 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7b0:	2b05      	cmp	r3, #5
 800b7b2:	f200 8215 	bhi.w	800bbe0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f002 feab 	bl	800e518 <tcp_rexmit_rto>
      break;
 800b7c2:	e20d      	b.n	800bbe0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b7c4:	4b86      	ldr	r3, [pc, #536]	; (800b9e0 <tcp_process+0x5a4>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 0310 	and.w	r3, r3, #16
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80a1 	beq.w	800b914 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7d2:	4b84      	ldr	r3, [pc, #528]	; (800b9e4 <tcp_process+0x5a8>)
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	db7e      	blt.n	800b8e0 <tcp_process+0x4a4>
 800b7e2:	4b80      	ldr	r3, [pc, #512]	; (800b9e4 <tcp_process+0x5a8>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dc77      	bgt.n	800b8e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b7fe:	23fa      	movs	r3, #250	; 0xfa
 800b800:	76bb      	strb	r3, [r7, #26]
 800b802:	e01d      	b.n	800b840 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <tcp_process+0x3e0>
 800b80e:	4b7b      	ldr	r3, [pc, #492]	; (800b9fc <tcp_process+0x5c0>)
 800b810:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b814:	497a      	ldr	r1, [pc, #488]	; (800ba00 <tcp_process+0x5c4>)
 800b816:	487b      	ldr	r0, [pc, #492]	; (800ba04 <tcp_process+0x5c8>)
 800b818:	f007 f9c8 	bl	8012bac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <tcp_process+0x400>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6910      	ldr	r0, [r2, #16]
 800b830:	2200      	movs	r2, #0
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	4798      	blx	r3
 800b836:	4603      	mov	r3, r0
 800b838:	76bb      	strb	r3, [r7, #26]
 800b83a:	e001      	b.n	800b840 <tcp_process+0x404>
 800b83c:	23f0      	movs	r3, #240	; 0xf0
 800b83e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b840:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b848:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b84c:	f113 0f0d 	cmn.w	r3, #13
 800b850:	d002      	beq.n	800b858 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7fd fd64 	bl	8009320 <tcp_abort>
            }
            return ERR_ABRT;
 800b858:	f06f 030c 	mvn.w	r3, #12
 800b85c:	e1ce      	b.n	800bbfc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fae0 	bl	800be24 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b864:	4b68      	ldr	r3, [pc, #416]	; (800ba08 <tcp_process+0x5cc>)
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <tcp_process+0x43c>
            recv_acked--;
 800b86c:	4b66      	ldr	r3, [pc, #408]	; (800ba08 <tcp_process+0x5cc>)
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	4b64      	ldr	r3, [pc, #400]	; (800ba08 <tcp_process+0x5cc>)
 800b876:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b87c:	009a      	lsls	r2, r3, #2
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	f241 111c 	movw	r1, #4380	; 0x111c
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf38      	it	cc
 800b88c:	460b      	movcc	r3, r1
 800b88e:	429a      	cmp	r2, r3
 800b890:	d204      	bcs.n	800b89c <tcp_process+0x460>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	b29b      	uxth	r3, r3
 800b89a:	e00d      	b.n	800b8b8 <tcp_process+0x47c>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d904      	bls.n	800b8b4 <tcp_process+0x478>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	e001      	b.n	800b8b8 <tcp_process+0x47c>
 800b8b4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b8be:	4b53      	ldr	r3, [pc, #332]	; (800ba0c <tcp_process+0x5d0>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d037      	beq.n	800b93a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8b5b      	ldrh	r3, [r3, #26]
 800b8ce:	f043 0302 	orr.w	r3, r3, #2
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2207      	movs	r2, #7
 800b8dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b8de:	e02c      	b.n	800b93a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8e0:	4b40      	ldr	r3, [pc, #256]	; (800b9e4 <tcp_process+0x5a8>)
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	4b40      	ldr	r3, [pc, #256]	; (800b9e8 <tcp_process+0x5ac>)
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4b40      	ldr	r3, [pc, #256]	; (800b9ec <tcp_process+0x5b0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8f0:	4b3f      	ldr	r3, [pc, #252]	; (800b9f0 <tcp_process+0x5b4>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8f4:	885b      	ldrh	r3, [r3, #2]
 800b8f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8f8:	4a3d      	ldr	r2, [pc, #244]	; (800b9f0 <tcp_process+0x5b4>)
 800b8fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8fc:	8812      	ldrh	r2, [r2, #0]
 800b8fe:	b292      	uxth	r2, r2
 800b900:	9202      	str	r2, [sp, #8]
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	4b3b      	ldr	r3, [pc, #236]	; (800b9f4 <tcp_process+0x5b8>)
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	4b3b      	ldr	r3, [pc, #236]	; (800b9f8 <tcp_process+0x5bc>)
 800b90a:	4602      	mov	r2, r0
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f003 f839 	bl	800e984 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b912:	e167      	b.n	800bbe4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b914:	4b32      	ldr	r3, [pc, #200]	; (800b9e0 <tcp_process+0x5a4>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8161 	beq.w	800bbe4 <tcp_process+0x7a8>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	1e5a      	subs	r2, r3, #1
 800b928:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <tcp_process+0x5b0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	f040 8159 	bne.w	800bbe4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f002 fe12 	bl	800e55c <tcp_rexmit>
      break;
 800b938:	e154      	b.n	800bbe4 <tcp_process+0x7a8>
 800b93a:	e153      	b.n	800bbe4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fa71 	bl	800be24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b942:	4b32      	ldr	r3, [pc, #200]	; (800ba0c <tcp_process+0x5d0>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f000 814c 	beq.w	800bbe8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8b5b      	ldrh	r3, [r3, #26]
 800b954:	f043 0302 	orr.w	r3, r3, #2
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2207      	movs	r2, #7
 800b962:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b964:	e140      	b.n	800bbe8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fa5c 	bl	800be24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b96c:	4b27      	ldr	r3, [pc, #156]	; (800ba0c <tcp_process+0x5d0>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	f003 0320 	and.w	r3, r3, #32
 800b974:	2b00      	cmp	r3, #0
 800b976:	d071      	beq.n	800ba5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b978:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <tcp_process+0x5a4>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b00      	cmp	r3, #0
 800b982:	d060      	beq.n	800ba46 <tcp_process+0x60a>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b988:	4b16      	ldr	r3, [pc, #88]	; (800b9e4 <tcp_process+0x5a8>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d15a      	bne.n	800ba46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b994:	2b00      	cmp	r3, #0
 800b996:	d156      	bne.n	800ba46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8b5b      	ldrh	r3, [r3, #26]
 800b99c:	f043 0302 	orr.w	r3, r3, #2
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fe fdbe 	bl	800a528 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b9ac:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <tcp_process+0x5d4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d105      	bne.n	800b9c2 <tcp_process+0x586>
 800b9b6:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <tcp_process+0x5d4>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4a14      	ldr	r2, [pc, #80]	; (800ba10 <tcp_process+0x5d4>)
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	e02e      	b.n	800ba20 <tcp_process+0x5e4>
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <tcp_process+0x5d4>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e027      	b.n	800ba1a <tcp_process+0x5de>
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d11f      	bne.n	800ba14 <tcp_process+0x5d8>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	60da      	str	r2, [r3, #12]
 800b9dc:	e020      	b.n	800ba20 <tcp_process+0x5e4>
 800b9de:	bf00      	nop
 800b9e0:	20008ad0 	.word	0x20008ad0
 800b9e4:	20008ac8 	.word	0x20008ac8
 800b9e8:	20008ace 	.word	0x20008ace
 800b9ec:	20008ac4 	.word	0x20008ac4
 800b9f0:	20008ab4 	.word	0x20008ab4
 800b9f4:	2000c0e4 	.word	0x2000c0e4
 800b9f8:	2000c0e8 	.word	0x2000c0e8
 800b9fc:	080148b4 	.word	0x080148b4
 800ba00:	08014b54 	.word	0x08014b54
 800ba04:	08014900 	.word	0x08014900
 800ba08:	20008acc 	.word	0x20008acc
 800ba0c:	20008ad1 	.word	0x20008ad1
 800ba10:	2000f808 	.word	0x2000f808
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1d4      	bne.n	800b9ca <tcp_process+0x58e>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	60da      	str	r2, [r3, #12]
 800ba26:	4b77      	ldr	r3, [pc, #476]	; (800bc04 <tcp_process+0x7c8>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	220a      	movs	r2, #10
 800ba30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ba32:	4b75      	ldr	r3, [pc, #468]	; (800bc08 <tcp_process+0x7cc>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60da      	str	r2, [r3, #12]
 800ba3a:	4a73      	ldr	r2, [pc, #460]	; (800bc08 <tcp_process+0x7cc>)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	f003 f962 	bl	800ed08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ba44:	e0d2      	b.n	800bbec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8b5b      	ldrh	r3, [r3, #26]
 800ba4a:	f043 0302 	orr.w	r3, r3, #2
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2208      	movs	r2, #8
 800ba58:	751a      	strb	r2, [r3, #20]
      break;
 800ba5a:	e0c7      	b.n	800bbec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba5c:	4b6b      	ldr	r3, [pc, #428]	; (800bc0c <tcp_process+0x7d0>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	f003 0310 	and.w	r3, r3, #16
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 80c1 	beq.w	800bbec <tcp_process+0x7b0>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba6e:	4b68      	ldr	r3, [pc, #416]	; (800bc10 <tcp_process+0x7d4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	f040 80ba 	bne.w	800bbec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 80b5 	bne.w	800bbec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2206      	movs	r2, #6
 800ba86:	751a      	strb	r2, [r3, #20]
      break;
 800ba88:	e0b0      	b.n	800bbec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f9ca 	bl	800be24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba90:	4b60      	ldr	r3, [pc, #384]	; (800bc14 <tcp_process+0x7d8>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	f003 0320 	and.w	r3, r3, #32
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 80a9 	beq.w	800bbf0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8b5b      	ldrh	r3, [r3, #26]
 800baa2:	f043 0302 	orr.w	r3, r3, #2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7fe fd3b 	bl	800a528 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bab2:	4b59      	ldr	r3, [pc, #356]	; (800bc18 <tcp_process+0x7dc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d105      	bne.n	800bac8 <tcp_process+0x68c>
 800babc:	4b56      	ldr	r3, [pc, #344]	; (800bc18 <tcp_process+0x7dc>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	4a55      	ldr	r2, [pc, #340]	; (800bc18 <tcp_process+0x7dc>)
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	e013      	b.n	800baf0 <tcp_process+0x6b4>
 800bac8:	4b53      	ldr	r3, [pc, #332]	; (800bc18 <tcp_process+0x7dc>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	e00c      	b.n	800baea <tcp_process+0x6ae>
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d104      	bne.n	800bae4 <tcp_process+0x6a8>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	e005      	b.n	800baf0 <tcp_process+0x6b4>
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1ef      	bne.n	800bad0 <tcp_process+0x694>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	60da      	str	r2, [r3, #12]
 800baf6:	4b43      	ldr	r3, [pc, #268]	; (800bc04 <tcp_process+0x7c8>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	220a      	movs	r2, #10
 800bb00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb02:	4b41      	ldr	r3, [pc, #260]	; (800bc08 <tcp_process+0x7cc>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60da      	str	r2, [r3, #12]
 800bb0a:	4a3f      	ldr	r2, [pc, #252]	; (800bc08 <tcp_process+0x7cc>)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	f003 f8fa 	bl	800ed08 <tcp_timer_needed>
      }
      break;
 800bb14:	e06c      	b.n	800bbf0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f984 	bl	800be24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb1c:	4b3b      	ldr	r3, [pc, #236]	; (800bc0c <tcp_process+0x7d0>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 0310 	and.w	r3, r3, #16
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d065      	beq.n	800bbf4 <tcp_process+0x7b8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb2c:	4b38      	ldr	r3, [pc, #224]	; (800bc10 <tcp_process+0x7d4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d15f      	bne.n	800bbf4 <tcp_process+0x7b8>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d15b      	bne.n	800bbf4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7fe fcf3 	bl	800a528 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb42:	4b35      	ldr	r3, [pc, #212]	; (800bc18 <tcp_process+0x7dc>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d105      	bne.n	800bb58 <tcp_process+0x71c>
 800bb4c:	4b32      	ldr	r3, [pc, #200]	; (800bc18 <tcp_process+0x7dc>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	4a31      	ldr	r2, [pc, #196]	; (800bc18 <tcp_process+0x7dc>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	e013      	b.n	800bb80 <tcp_process+0x744>
 800bb58:	4b2f      	ldr	r3, [pc, #188]	; (800bc18 <tcp_process+0x7dc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	e00c      	b.n	800bb7a <tcp_process+0x73e>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d104      	bne.n	800bb74 <tcp_process+0x738>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68da      	ldr	r2, [r3, #12]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	60da      	str	r2, [r3, #12]
 800bb72:	e005      	b.n	800bb80 <tcp_process+0x744>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1ef      	bne.n	800bb60 <tcp_process+0x724>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	60da      	str	r2, [r3, #12]
 800bb86:	4b1f      	ldr	r3, [pc, #124]	; (800bc04 <tcp_process+0x7c8>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	220a      	movs	r2, #10
 800bb90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb92:	4b1d      	ldr	r3, [pc, #116]	; (800bc08 <tcp_process+0x7cc>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	4a1b      	ldr	r2, [pc, #108]	; (800bc08 <tcp_process+0x7cc>)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	f003 f8b2 	bl	800ed08 <tcp_timer_needed>
      }
      break;
 800bba4:	e026      	b.n	800bbf4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f93c 	bl	800be24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bbac:	4b17      	ldr	r3, [pc, #92]	; (800bc0c <tcp_process+0x7d0>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 0310 	and.w	r3, r3, #16
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01f      	beq.n	800bbf8 <tcp_process+0x7bc>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbbc:	4b14      	ldr	r3, [pc, #80]	; (800bc10 <tcp_process+0x7d4>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d119      	bne.n	800bbf8 <tcp_process+0x7bc>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d115      	bne.n	800bbf8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bbcc:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <tcp_process+0x7d8>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f043 0310 	orr.w	r3, r3, #16
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <tcp_process+0x7d8>)
 800bbd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bbda:	e00d      	b.n	800bbf8 <tcp_process+0x7bc>
    default:
      break;
 800bbdc:	bf00      	nop
 800bbde:	e00c      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbe0:	bf00      	nop
 800bbe2:	e00a      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbe4:	bf00      	nop
 800bbe6:	e008      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbe8:	bf00      	nop
 800bbea:	e006      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbec:	bf00      	nop
 800bbee:	e004      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbf0:	bf00      	nop
 800bbf2:	e002      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbf4:	bf00      	nop
 800bbf6:	e000      	b.n	800bbfa <tcp_process+0x7be>
      break;
 800bbf8:	bf00      	nop
  }
  return ERR_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3724      	adds	r7, #36	; 0x24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd90      	pop	{r4, r7, pc}
 800bc04:	2000f804 	.word	0x2000f804
 800bc08:	2000f818 	.word	0x2000f818
 800bc0c:	20008ad0 	.word	0x20008ad0
 800bc10:	20008ac8 	.word	0x20008ac8
 800bc14:	20008ad1 	.word	0x20008ad1
 800bc18:	2000f808 	.word	0x2000f808

0800bc1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <tcp_oos_insert_segment+0x1e>
 800bc2c:	4b3b      	ldr	r3, [pc, #236]	; (800bd1c <tcp_oos_insert_segment+0x100>)
 800bc2e:	f240 421f 	movw	r2, #1055	; 0x41f
 800bc32:	493b      	ldr	r1, [pc, #236]	; (800bd20 <tcp_oos_insert_segment+0x104>)
 800bc34:	483b      	ldr	r0, [pc, #236]	; (800bd24 <tcp_oos_insert_segment+0x108>)
 800bc36:	f006 ffb9 	bl	8012bac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	899b      	ldrh	r3, [r3, #12]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fb fa38 	bl	80070b8 <lwip_htons>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d028      	beq.n	800bca6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bc54:	6838      	ldr	r0, [r7, #0]
 800bc56:	f7fe f9f1 	bl	800a03c <tcp_segs_free>
    next = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	e056      	b.n	800bd0e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	899b      	ldrh	r3, [r3, #12]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fb fa25 	bl	80070b8 <lwip_htons>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00d      	beq.n	800bc96 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	899b      	ldrh	r3, [r3, #12]
 800bc80:	b29c      	uxth	r4, r3
 800bc82:	2001      	movs	r0, #1
 800bc84:	f7fb fa18 	bl	80070b8 <lwip_htons>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	4322      	orrs	r2, r4
 800bc92:	b292      	uxth	r2, r2
 800bc94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f7fe f9df 	bl	800a064 <tcp_seg_free>
    while (next &&
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00e      	beq.n	800bcca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	891b      	ldrh	r3, [r3, #8]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <tcp_oos_insert_segment+0x10c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	441a      	add	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	8909      	ldrh	r1, [r1, #8]
 800bcc2:	440b      	add	r3, r1
 800bcc4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	daca      	bge.n	800bc60 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01e      	beq.n	800bd0e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	891b      	ldrh	r3, [r3, #8]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <tcp_oos_insert_segment+0x10c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	441a      	add	r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd12      	ble.n	800bd0e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <tcp_oos_insert_segment+0x10c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	891b      	ldrh	r3, [r3, #8]
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fc fbf7 	bl	80084fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	601a      	str	r2, [r3, #0]
}
 800bd14:	bf00      	nop
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	080148b4 	.word	0x080148b4
 800bd20:	08014b74 	.word	0x08014b74
 800bd24:	08014900 	.word	0x08014900
 800bd28:	20008ac4 	.word	0x20008ac4

0800bd2c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bd2c:	b5b0      	push	{r4, r5, r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bd3a:	e03e      	b.n	800bdba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fc fdea 	bl	8008924 <pbuf_clen>
 800bd50:	4603      	mov	r3, r0
 800bd52:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd5a:	8a7a      	ldrh	r2, [r7, #18]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d906      	bls.n	800bd6e <tcp_free_acked_segments+0x42>
 800bd60:	4b2a      	ldr	r3, [pc, #168]	; (800be0c <tcp_free_acked_segments+0xe0>)
 800bd62:	f240 4257 	movw	r2, #1111	; 0x457
 800bd66:	492a      	ldr	r1, [pc, #168]	; (800be10 <tcp_free_acked_segments+0xe4>)
 800bd68:	482a      	ldr	r0, [pc, #168]	; (800be14 <tcp_free_acked_segments+0xe8>)
 800bd6a:	f006 ff1f 	bl	8012bac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bd74:	8a7b      	ldrh	r3, [r7, #18]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	891a      	ldrh	r2, [r3, #8]
 800bd84:	4b24      	ldr	r3, [pc, #144]	; (800be18 <tcp_free_acked_segments+0xec>)
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	4413      	add	r3, r2
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	4b22      	ldr	r3, [pc, #136]	; (800be18 <tcp_free_acked_segments+0xec>)
 800bd8e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bd90:	6978      	ldr	r0, [r7, #20]
 800bd92:	f7fe f967 	bl	800a064 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00c      	beq.n	800bdba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <tcp_free_acked_segments+0x8e>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d106      	bne.n	800bdba <tcp_free_acked_segments+0x8e>
 800bdac:	4b17      	ldr	r3, [pc, #92]	; (800be0c <tcp_free_acked_segments+0xe0>)
 800bdae:	f240 4262 	movw	r2, #1122	; 0x462
 800bdb2:	491a      	ldr	r1, [pc, #104]	; (800be1c <tcp_free_acked_segments+0xf0>)
 800bdb4:	4817      	ldr	r0, [pc, #92]	; (800be14 <tcp_free_acked_segments+0xe8>)
 800bdb6:	f006 fef9 	bl	8012bac <iprintf>
  while (seg_list != NULL &&
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d020      	beq.n	800be02 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fb f98b 	bl	80070e2 <lwip_htonl>
 800bdcc:	4604      	mov	r4, r0
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	891b      	ldrh	r3, [r3, #8]
 800bdd2:	461d      	mov	r5, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	899b      	ldrh	r3, [r3, #12]
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fb f96b 	bl	80070b8 <lwip_htons>
 800bde2:	4603      	mov	r3, r0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <tcp_free_acked_segments+0xc6>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e000      	b.n	800bdf4 <tcp_free_acked_segments+0xc8>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	442b      	add	r3, r5
 800bdf6:	18e2      	adds	r2, r4, r3
 800bdf8:	4b09      	ldr	r3, [pc, #36]	; (800be20 <tcp_free_acked_segments+0xf4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd9c      	ble.n	800bd3c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800be02:	68bb      	ldr	r3, [r7, #8]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bdb0      	pop	{r4, r5, r7, pc}
 800be0c:	080148b4 	.word	0x080148b4
 800be10:	08014b9c 	.word	0x08014b9c
 800be14:	08014900 	.word	0x08014900
 800be18:	20008acc 	.word	0x20008acc
 800be1c:	08014bc4 	.word	0x08014bc4
 800be20:	20008ac8 	.word	0x20008ac8

0800be24 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be24:	b5b0      	push	{r4, r5, r7, lr}
 800be26:	b094      	sub	sp, #80	; 0x50
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <tcp_receive+0x20>
 800be36:	4ba6      	ldr	r3, [pc, #664]	; (800c0d0 <tcp_receive+0x2ac>)
 800be38:	f240 427b 	movw	r2, #1147	; 0x47b
 800be3c:	49a5      	ldr	r1, [pc, #660]	; (800c0d4 <tcp_receive+0x2b0>)
 800be3e:	48a6      	ldr	r0, [pc, #664]	; (800c0d8 <tcp_receive+0x2b4>)
 800be40:	f006 feb4 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7d1b      	ldrb	r3, [r3, #20]
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d806      	bhi.n	800be5a <tcp_receive+0x36>
 800be4c:	4ba0      	ldr	r3, [pc, #640]	; (800c0d0 <tcp_receive+0x2ac>)
 800be4e:	f240 427c 	movw	r2, #1148	; 0x47c
 800be52:	49a2      	ldr	r1, [pc, #648]	; (800c0dc <tcp_receive+0x2b8>)
 800be54:	48a0      	ldr	r0, [pc, #640]	; (800c0d8 <tcp_receive+0x2b4>)
 800be56:	f006 fea9 	bl	8012bac <iprintf>

  if (flags & TCP_ACK) {
 800be5a:	4ba1      	ldr	r3, [pc, #644]	; (800c0e0 <tcp_receive+0x2bc>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 0310 	and.w	r3, r3, #16
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 8263 	beq.w	800c32e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be6e:	461a      	mov	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be74:	4413      	add	r3, r2
 800be76:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be7c:	4b99      	ldr	r3, [pc, #612]	; (800c0e4 <tcp_receive+0x2c0>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	db1b      	blt.n	800bebe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be8a:	4b96      	ldr	r3, [pc, #600]	; (800c0e4 <tcp_receive+0x2c0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be8e:	429a      	cmp	r2, r3
 800be90:	d106      	bne.n	800bea0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be96:	4b94      	ldr	r3, [pc, #592]	; (800c0e8 <tcp_receive+0x2c4>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	db0e      	blt.n	800bebe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bea4:	4b90      	ldr	r3, [pc, #576]	; (800c0e8 <tcp_receive+0x2c4>)
 800bea6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d125      	bne.n	800bef8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800beac:	4b8f      	ldr	r3, [pc, #572]	; (800c0ec <tcp_receive+0x2c8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	89db      	ldrh	r3, [r3, #14]
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800beba:	429a      	cmp	r2, r3
 800bebc:	d91c      	bls.n	800bef8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bebe:	4b8b      	ldr	r3, [pc, #556]	; (800c0ec <tcp_receive+0x2c8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	89db      	ldrh	r3, [r3, #14]
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bed8:	429a      	cmp	r2, r3
 800beda:	d205      	bcs.n	800bee8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bee8:	4b7e      	ldr	r3, [pc, #504]	; (800c0e4 <tcp_receive+0x2c0>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bef0:	4b7d      	ldr	r3, [pc, #500]	; (800c0e8 <tcp_receive+0x2c4>)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bef8:	4b7b      	ldr	r3, [pc, #492]	; (800c0e8 <tcp_receive+0x2c4>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dc58      	bgt.n	800bfb8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bf06:	4b7a      	ldr	r3, [pc, #488]	; (800c0f0 <tcp_receive+0x2cc>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d14b      	bne.n	800bfa6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bf18:	4413      	add	r3, r2
 800bf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d142      	bne.n	800bfa6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	db3d      	blt.n	800bfa6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf2e:	4b6e      	ldr	r3, [pc, #440]	; (800c0e8 <tcp_receive+0x2c4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d137      	bne.n	800bfa6 <tcp_receive+0x182>
              found_dupack = 1;
 800bf36:	2301      	movs	r3, #1
 800bf38:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf40:	2bff      	cmp	r3, #255	; 0xff
 800bf42:	d007      	beq.n	800bf54 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d91b      	bls.n	800bf96 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf68:	4413      	add	r3, r2
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d30a      	bcc.n	800bf8c <tcp_receive+0x168>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf80:	4413      	add	r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bf8a:	e004      	b.n	800bf96 <tcp_receive+0x172>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d902      	bls.n	800bfa6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f002 fb47 	bl	800e634 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f040 8160 	bne.w	800c26e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfb6:	e15a      	b.n	800c26e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfb8:	4b4b      	ldr	r3, [pc, #300]	; (800c0e8 <tcp_receive+0x2c4>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f2c0 814d 	blt.w	800c264 <tcp_receive+0x440>
 800bfca:	4b47      	ldr	r3, [pc, #284]	; (800c0e8 <tcp_receive+0x2c4>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f300 8145 	bgt.w	800c264 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8b5b      	ldrh	r3, [r3, #26]
 800bfde:	f003 0304 	and.w	r3, r3, #4
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d010      	beq.n	800c008 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	8b5b      	ldrh	r3, [r3, #26]
 800bfea:	f023 0304 	bic.w	r3, r3, #4
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c016:	10db      	asrs	r3, r3, #3
 800c018:	b21b      	sxth	r3, r3
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c022:	b29b      	uxth	r3, r3
 800c024:	4413      	add	r3, r2
 800c026:	b29b      	uxth	r3, r3
 800c028:	b21a      	sxth	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c030:	4b2d      	ldr	r3, [pc, #180]	; (800c0e8 <tcp_receive+0x2c4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	b29a      	uxth	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c048:	4b27      	ldr	r3, [pc, #156]	; (800c0e8 <tcp_receive+0x2c4>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	7d1b      	ldrb	r3, [r3, #20]
 800c054:	2b03      	cmp	r3, #3
 800c056:	f240 8096 	bls.w	800c186 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c066:	429a      	cmp	r2, r3
 800c068:	d244      	bcs.n	800c0f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	8b5b      	ldrh	r3, [r3, #26]
 800c06e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <tcp_receive+0x256>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <tcp_receive+0x258>
 800c07a:	2302      	movs	r3, #2
 800c07c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c08a:	fb12 f303 	smulbb	r3, r2, r3
 800c08e:	b29b      	uxth	r3, r3
 800c090:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c092:	4293      	cmp	r3, r2
 800c094:	bf28      	it	cs
 800c096:	4613      	movcs	r3, r2
 800c098:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0a2:	4413      	add	r3, r2
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d309      	bcc.n	800c0c4 <tcp_receive+0x2a0>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0c2:	e060      	b.n	800c186 <tcp_receive+0x362>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0ce:	e05a      	b.n	800c186 <tcp_receive+0x362>
 800c0d0:	080148b4 	.word	0x080148b4
 800c0d4:	08014be4 	.word	0x08014be4
 800c0d8:	08014900 	.word	0x08014900
 800c0dc:	08014c00 	.word	0x08014c00
 800c0e0:	20008ad0 	.word	0x20008ad0
 800c0e4:	20008ac4 	.word	0x20008ac4
 800c0e8:	20008ac8 	.word	0x20008ac8
 800c0ec:	20008ab4 	.word	0x20008ab4
 800c0f0:	20008ace 	.word	0x20008ace
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c0fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0fc:	4413      	add	r3, r2
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c106:	429a      	cmp	r2, r3
 800c108:	d309      	bcc.n	800c11e <tcp_receive+0x2fa>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c112:	4413      	add	r3, r2
 800c114:	b29a      	uxth	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c11c:	e004      	b.n	800c128 <tcp_receive+0x304>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c134:	429a      	cmp	r2, r3
 800c136:	d326      	bcc.n	800c186 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	b29a      	uxth	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c158:	4413      	add	r3, r2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c162:	429a      	cmp	r2, r3
 800c164:	d30a      	bcc.n	800c17c <tcp_receive+0x358>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c170:	4413      	add	r3, r2
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c17a:	e004      	b.n	800c186 <tcp_receive+0x362>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c18e:	4a98      	ldr	r2, [pc, #608]	; (800c3f0 <tcp_receive+0x5cc>)
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fdcb 	bl	800bd2c <tcp_free_acked_segments>
 800c196:	4602      	mov	r2, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a4:	4a93      	ldr	r2, [pc, #588]	; (800c3f4 <tcp_receive+0x5d0>)
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fdc0 	bl	800bd2c <tcp_free_acked_segments>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d104      	bne.n	800c1c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1c0:	861a      	strh	r2, [r3, #48]	; 0x30
 800c1c2:	e002      	b.n	800c1ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d103      	bne.n	800c1e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c1e6:	4b84      	ldr	r3, [pc, #528]	; (800c3f8 <tcp_receive+0x5d4>)
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	8b5b      	ldrh	r3, [r3, #26]
 800c1f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d035      	beq.n	800c26c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c204:	2b00      	cmp	r3, #0
 800c206:	d118      	bne.n	800c23a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00c      	beq.n	800c22a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fa ff60 	bl	80070e2 <lwip_htonl>
 800c222:	4603      	mov	r3, r0
 800c224:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c226:	2b00      	cmp	r3, #0
 800c228:	dc20      	bgt.n	800c26c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	8b5b      	ldrh	r3, [r3, #26]
 800c22e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c232:	b29a      	uxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c238:	e018      	b.n	800c26c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4618      	mov	r0, r3
 800c248:	f7fa ff4b 	bl	80070e2 <lwip_htonl>
 800c24c:	4603      	mov	r3, r0
 800c24e:	1ae3      	subs	r3, r4, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	dc0b      	bgt.n	800c26c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8b5b      	ldrh	r3, [r3, #26]
 800c258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c262:	e003      	b.n	800c26c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f002 fbdf 	bl	800ea28 <tcp_send_empty_ack>
 800c26a:	e000      	b.n	800c26e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c26c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c272:	2b00      	cmp	r3, #0
 800c274:	d05b      	beq.n	800c32e <tcp_receive+0x50a>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c27a:	4b60      	ldr	r3, [pc, #384]	; (800c3fc <tcp_receive+0x5d8>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	2b00      	cmp	r3, #0
 800c282:	da54      	bge.n	800c32e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c284:	4b5e      	ldr	r3, [pc, #376]	; (800c400 <tcp_receive+0x5dc>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28e:	b29b      	uxth	r3, r3
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29b      	uxth	r3, r3
 800c294:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c298:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c2a2:	10db      	asrs	r3, r3, #3
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2bc:	4413      	add	r3, r2
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	b21a      	sxth	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c2c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	da05      	bge.n	800c2da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c2ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2d2:	425b      	negs	r3, r3
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c2da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c2e4:	109b      	asrs	r3, r3, #2
 800c2e6:	b21b      	sxth	r3, r3
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2fe:	4413      	add	r3, r2
 800c300:	b29b      	uxth	r3, r3
 800c302:	b21a      	sxth	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c30e:	10db      	asrs	r3, r3, #3
 800c310:	b21b      	sxth	r3, r3
 800c312:	b29a      	uxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	4413      	add	r3, r2
 800c31e:	b29b      	uxth	r3, r3
 800c320:	b21a      	sxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c32e:	4b35      	ldr	r3, [pc, #212]	; (800c404 <tcp_receive+0x5e0>)
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 84e1 	beq.w	800ccfa <tcp_receive+0xed6>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7d1b      	ldrb	r3, [r3, #20]
 800c33c:	2b06      	cmp	r3, #6
 800c33e:	f200 84dc 	bhi.w	800ccfa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c346:	4b30      	ldr	r3, [pc, #192]	; (800c408 <tcp_receive+0x5e4>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	3b01      	subs	r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f2c0 808e 	blt.w	800c470 <tcp_receive+0x64c>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c358:	4b2a      	ldr	r3, [pc, #168]	; (800c404 <tcp_receive+0x5e0>)
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	4619      	mov	r1, r3
 800c35e:	4b2a      	ldr	r3, [pc, #168]	; (800c408 <tcp_receive+0x5e4>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	440b      	add	r3, r1
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	3301      	adds	r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f300 8081 	bgt.w	800c470 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c36e:	4b27      	ldr	r3, [pc, #156]	; (800c40c <tcp_receive+0x5e8>)
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c378:	4b23      	ldr	r3, [pc, #140]	; (800c408 <tcp_receive+0x5e4>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c380:	4b22      	ldr	r3, [pc, #136]	; (800c40c <tcp_receive+0x5e8>)
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <tcp_receive+0x572>
 800c388:	4b21      	ldr	r3, [pc, #132]	; (800c410 <tcp_receive+0x5ec>)
 800c38a:	f240 5294 	movw	r2, #1428	; 0x594
 800c38e:	4921      	ldr	r1, [pc, #132]	; (800c414 <tcp_receive+0x5f0>)
 800c390:	4821      	ldr	r0, [pc, #132]	; (800c418 <tcp_receive+0x5f4>)
 800c392:	f006 fc0b 	bl	8012bac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d906      	bls.n	800c3ae <tcp_receive+0x58a>
 800c3a0:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <tcp_receive+0x5ec>)
 800c3a2:	f240 5295 	movw	r2, #1429	; 0x595
 800c3a6:	491d      	ldr	r1, [pc, #116]	; (800c41c <tcp_receive+0x5f8>)
 800c3a8:	481b      	ldr	r0, [pc, #108]	; (800c418 <tcp_receive+0x5f4>)
 800c3aa:	f006 fbff 	bl	8012bac <iprintf>
      off = (u16_t)off32;
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <tcp_receive+0x5e8>)
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	891b      	ldrh	r3, [r3, #8]
 800c3ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d906      	bls.n	800c3d0 <tcp_receive+0x5ac>
 800c3c2:	4b13      	ldr	r3, [pc, #76]	; (800c410 <tcp_receive+0x5ec>)
 800c3c4:	f240 5297 	movw	r2, #1431	; 0x597
 800c3c8:	4915      	ldr	r1, [pc, #84]	; (800c420 <tcp_receive+0x5fc>)
 800c3ca:	4813      	ldr	r0, [pc, #76]	; (800c418 <tcp_receive+0x5f4>)
 800c3cc:	f006 fbee 	bl	8012bac <iprintf>
      inseg.len -= off;
 800c3d0:	4b0e      	ldr	r3, [pc, #56]	; (800c40c <tcp_receive+0x5e8>)
 800c3d2:	891a      	ldrh	r2, [r3, #8]
 800c3d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <tcp_receive+0x5e8>)
 800c3de:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <tcp_receive+0x5e8>)
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	891a      	ldrh	r2, [r3, #8]
 800c3e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c3ee:	e029      	b.n	800c444 <tcp_receive+0x620>
 800c3f0:	08014c1c 	.word	0x08014c1c
 800c3f4:	08014c24 	.word	0x08014c24
 800c3f8:	20008acc 	.word	0x20008acc
 800c3fc:	20008ac8 	.word	0x20008ac8
 800c400:	2000f80c 	.word	0x2000f80c
 800c404:	20008ace 	.word	0x20008ace
 800c408:	20008ac4 	.word	0x20008ac4
 800c40c:	20008aa4 	.word	0x20008aa4
 800c410:	080148b4 	.word	0x080148b4
 800c414:	08014c2c 	.word	0x08014c2c
 800c418:	08014900 	.word	0x08014900
 800c41c:	08014c3c 	.word	0x08014c3c
 800c420:	08014c4c 	.word	0x08014c4c
        off -= p->len;
 800c424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c426:	895b      	ldrh	r3, [r3, #10]
 800c428:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c434:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c436:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c43a:	2200      	movs	r2, #0
 800c43c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d8e9      	bhi.n	800c424 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c454:	4619      	mov	r1, r3
 800c456:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c458:	f7fc f950 	bl	80086fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	4a91      	ldr	r2, [pc, #580]	; (800c6a8 <tcp_receive+0x884>)
 800c462:	6013      	str	r3, [r2, #0]
 800c464:	4b91      	ldr	r3, [pc, #580]	; (800c6ac <tcp_receive+0x888>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	4a8f      	ldr	r2, [pc, #572]	; (800c6a8 <tcp_receive+0x884>)
 800c46a:	6812      	ldr	r2, [r2, #0]
 800c46c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c46e:	e00d      	b.n	800c48c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c470:	4b8d      	ldr	r3, [pc, #564]	; (800c6a8 <tcp_receive+0x884>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	da06      	bge.n	800c48c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8b5b      	ldrh	r3, [r3, #26]
 800c482:	f043 0302 	orr.w	r3, r3, #2
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c48c:	4b86      	ldr	r3, [pc, #536]	; (800c6a8 <tcp_receive+0x884>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	f2c0 842a 	blt.w	800ccf0 <tcp_receive+0xecc>
 800c49c:	4b82      	ldr	r3, [pc, #520]	; (800c6a8 <tcp_receive+0x884>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4a8:	440b      	add	r3, r1
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f300 841e 	bgt.w	800ccf0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4b8:	4b7b      	ldr	r3, [pc, #492]	; (800c6a8 <tcp_receive+0x884>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	f040 829a 	bne.w	800c9f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c4c2:	4b7a      	ldr	r3, [pc, #488]	; (800c6ac <tcp_receive+0x888>)
 800c4c4:	891c      	ldrh	r4, [r3, #8]
 800c4c6:	4b79      	ldr	r3, [pc, #484]	; (800c6ac <tcp_receive+0x888>)
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	899b      	ldrh	r3, [r3, #12]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fa fdf2 	bl	80070b8 <lwip_htons>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <tcp_receive+0x6c0>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <tcp_receive+0x6c2>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4423      	add	r3, r4
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	4b71      	ldr	r3, [pc, #452]	; (800c6b0 <tcp_receive+0x88c>)
 800c4ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4f2:	4b6f      	ldr	r3, [pc, #444]	; (800c6b0 <tcp_receive+0x88c>)
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d275      	bcs.n	800c5e6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4fa:	4b6c      	ldr	r3, [pc, #432]	; (800c6ac <tcp_receive+0x888>)
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	899b      	ldrh	r3, [r3, #12]
 800c500:	b29b      	uxth	r3, r3
 800c502:	4618      	mov	r0, r3
 800c504:	f7fa fdd8 	bl	80070b8 <lwip_htons>
 800c508:	4603      	mov	r3, r0
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d01f      	beq.n	800c554 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c514:	4b65      	ldr	r3, [pc, #404]	; (800c6ac <tcp_receive+0x888>)
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	b21b      	sxth	r3, r3
 800c51e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c522:	b21c      	sxth	r4, r3
 800c524:	4b61      	ldr	r3, [pc, #388]	; (800c6ac <tcp_receive+0x888>)
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	899b      	ldrh	r3, [r3, #12]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fa fdc3 	bl	80070b8 <lwip_htons>
 800c532:	4603      	mov	r3, r0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	b29b      	uxth	r3, r3
 800c538:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fa fdba 	bl	80070b8 <lwip_htons>
 800c544:	4603      	mov	r3, r0
 800c546:	b21b      	sxth	r3, r3
 800c548:	4323      	orrs	r3, r4
 800c54a:	b21a      	sxth	r2, r3
 800c54c:	4b57      	ldr	r3, [pc, #348]	; (800c6ac <tcp_receive+0x888>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	b292      	uxth	r2, r2
 800c552:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c558:	4b54      	ldr	r3, [pc, #336]	; (800c6ac <tcp_receive+0x888>)
 800c55a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c55c:	4b53      	ldr	r3, [pc, #332]	; (800c6ac <tcp_receive+0x888>)
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	899b      	ldrh	r3, [r3, #12]
 800c562:	b29b      	uxth	r3, r3
 800c564:	4618      	mov	r0, r3
 800c566:	f7fa fda7 	bl	80070b8 <lwip_htons>
 800c56a:	4603      	mov	r3, r0
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c576:	4b4d      	ldr	r3, [pc, #308]	; (800c6ac <tcp_receive+0x888>)
 800c578:	891b      	ldrh	r3, [r3, #8]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	4b4b      	ldr	r3, [pc, #300]	; (800c6ac <tcp_receive+0x888>)
 800c580:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c582:	4b4a      	ldr	r3, [pc, #296]	; (800c6ac <tcp_receive+0x888>)
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	4b49      	ldr	r3, [pc, #292]	; (800c6ac <tcp_receive+0x888>)
 800c588:	891b      	ldrh	r3, [r3, #8]
 800c58a:	4619      	mov	r1, r3
 800c58c:	4610      	mov	r0, r2
 800c58e:	f7fb ffb5 	bl	80084fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c592:	4b46      	ldr	r3, [pc, #280]	; (800c6ac <tcp_receive+0x888>)
 800c594:	891c      	ldrh	r4, [r3, #8]
 800c596:	4b45      	ldr	r3, [pc, #276]	; (800c6ac <tcp_receive+0x888>)
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	899b      	ldrh	r3, [r3, #12]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fa fd8a 	bl	80070b8 <lwip_htons>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 0303 	and.w	r3, r3, #3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <tcp_receive+0x790>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <tcp_receive+0x792>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4423      	add	r3, r4
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	4b3d      	ldr	r3, [pc, #244]	; (800c6b0 <tcp_receive+0x88c>)
 800c5bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5be:	4b3c      	ldr	r3, [pc, #240]	; (800c6b0 <tcp_receive+0x88c>)
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4b38      	ldr	r3, [pc, #224]	; (800c6a8 <tcp_receive+0x884>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	441a      	add	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ce:	6879      	ldr	r1, [r7, #4]
 800c5d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5d2:	440b      	add	r3, r1
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d006      	beq.n	800c5e6 <tcp_receive+0x7c2>
 800c5d8:	4b36      	ldr	r3, [pc, #216]	; (800c6b4 <tcp_receive+0x890>)
 800c5da:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800c5de:	4936      	ldr	r1, [pc, #216]	; (800c6b8 <tcp_receive+0x894>)
 800c5e0:	4836      	ldr	r0, [pc, #216]	; (800c6bc <tcp_receive+0x898>)
 800c5e2:	f006 fae3 	bl	8012bac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80e7 	beq.w	800c7be <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5f0:	4b2e      	ldr	r3, [pc, #184]	; (800c6ac <tcp_receive+0x888>)
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	899b      	ldrh	r3, [r3, #12]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fa fd5d 	bl	80070b8 <lwip_htons>
 800c5fe:	4603      	mov	r3, r0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d010      	beq.n	800c62c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c60a:	e00a      	b.n	800c622 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c610:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7fd fd21 	bl	800a064 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1f0      	bne.n	800c60c <tcp_receive+0x7e8>
 800c62a:	e0c8      	b.n	800c7be <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c632:	e052      	b.n	800c6da <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	899b      	ldrh	r3, [r3, #12]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fa fd3b 	bl	80070b8 <lwip_htons>
 800c642:	4603      	mov	r3, r0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d03d      	beq.n	800c6ca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c64e:	4b17      	ldr	r3, [pc, #92]	; (800c6ac <tcp_receive+0x888>)
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	899b      	ldrh	r3, [r3, #12]
 800c654:	b29b      	uxth	r3, r3
 800c656:	4618      	mov	r0, r3
 800c658:	f7fa fd2e 	bl	80070b8 <lwip_htons>
 800c65c:	4603      	mov	r3, r0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c664:	2b00      	cmp	r3, #0
 800c666:	d130      	bne.n	800c6ca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c668:	4b10      	ldr	r3, [pc, #64]	; (800c6ac <tcp_receive+0x888>)
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	899b      	ldrh	r3, [r3, #12]
 800c66e:	b29c      	uxth	r4, r3
 800c670:	2001      	movs	r0, #1
 800c672:	f7fa fd21 	bl	80070b8 <lwip_htons>
 800c676:	4603      	mov	r3, r0
 800c678:	461a      	mov	r2, r3
 800c67a:	4b0c      	ldr	r3, [pc, #48]	; (800c6ac <tcp_receive+0x888>)
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	4322      	orrs	r2, r4
 800c680:	b292      	uxth	r2, r2
 800c682:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <tcp_receive+0x888>)
 800c686:	891c      	ldrh	r4, [r3, #8]
 800c688:	4b08      	ldr	r3, [pc, #32]	; (800c6ac <tcp_receive+0x888>)
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	899b      	ldrh	r3, [r3, #12]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	4618      	mov	r0, r3
 800c692:	f7fa fd11 	bl	80070b8 <lwip_htons>
 800c696:	4603      	mov	r3, r0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	f003 0303 	and.w	r3, r3, #3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00e      	beq.n	800c6c0 <tcp_receive+0x89c>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e00d      	b.n	800c6c2 <tcp_receive+0x89e>
 800c6a6:	bf00      	nop
 800c6a8:	20008ac4 	.word	0x20008ac4
 800c6ac:	20008aa4 	.word	0x20008aa4
 800c6b0:	20008ace 	.word	0x20008ace
 800c6b4:	080148b4 	.word	0x080148b4
 800c6b8:	08014c5c 	.word	0x08014c5c
 800c6bc:	08014900 	.word	0x08014900
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4423      	add	r3, r4
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	4b98      	ldr	r3, [pc, #608]	; (800c928 <tcp_receive+0xb04>)
 800c6c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c6d4:	6938      	ldr	r0, [r7, #16]
 800c6d6:	f7fd fcc5 	bl	800a064 <tcp_seg_free>
            while (next &&
 800c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00e      	beq.n	800c6fe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c6e0:	4b91      	ldr	r3, [pc, #580]	; (800c928 <tcp_receive+0xb04>)
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b91      	ldr	r3, [pc, #580]	; (800c92c <tcp_receive+0xb08>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	441a      	add	r2, r3
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6f4:	8909      	ldrh	r1, [r1, #8]
 800c6f6:	440b      	add	r3, r1
 800c6f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da9a      	bge.n	800c634 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c700:	2b00      	cmp	r3, #0
 800c702:	d059      	beq.n	800c7b8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c704:	4b88      	ldr	r3, [pc, #544]	; (800c928 <tcp_receive+0xb04>)
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	4b88      	ldr	r3, [pc, #544]	; (800c92c <tcp_receive+0xb08>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	441a      	add	r2, r3
 800c710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dd4d      	ble.n	800c7b8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	b29a      	uxth	r2, r3
 800c724:	4b81      	ldr	r3, [pc, #516]	; (800c92c <tcp_receive+0xb08>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	4b80      	ldr	r3, [pc, #512]	; (800c930 <tcp_receive+0xb0c>)
 800c730:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c732:	4b7f      	ldr	r3, [pc, #508]	; (800c930 <tcp_receive+0xb0c>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	899b      	ldrh	r3, [r3, #12]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fa fcbc 	bl	80070b8 <lwip_htons>
 800c740:	4603      	mov	r3, r0
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0302 	and.w	r3, r3, #2
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d005      	beq.n	800c758 <tcp_receive+0x934>
                inseg.len -= 1;
 800c74c:	4b78      	ldr	r3, [pc, #480]	; (800c930 <tcp_receive+0xb0c>)
 800c74e:	891b      	ldrh	r3, [r3, #8]
 800c750:	3b01      	subs	r3, #1
 800c752:	b29a      	uxth	r2, r3
 800c754:	4b76      	ldr	r3, [pc, #472]	; (800c930 <tcp_receive+0xb0c>)
 800c756:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c758:	4b75      	ldr	r3, [pc, #468]	; (800c930 <tcp_receive+0xb0c>)
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	4b74      	ldr	r3, [pc, #464]	; (800c930 <tcp_receive+0xb0c>)
 800c75e:	891b      	ldrh	r3, [r3, #8]
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f7fb feca 	bl	80084fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c768:	4b71      	ldr	r3, [pc, #452]	; (800c930 <tcp_receive+0xb0c>)
 800c76a:	891c      	ldrh	r4, [r3, #8]
 800c76c:	4b70      	ldr	r3, [pc, #448]	; (800c930 <tcp_receive+0xb0c>)
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	b29b      	uxth	r3, r3
 800c774:	4618      	mov	r0, r3
 800c776:	f7fa fc9f 	bl	80070b8 <lwip_htons>
 800c77a:	4603      	mov	r3, r0
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <tcp_receive+0x966>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <tcp_receive+0x968>
 800c78a:	2300      	movs	r3, #0
 800c78c:	4423      	add	r3, r4
 800c78e:	b29a      	uxth	r2, r3
 800c790:	4b65      	ldr	r3, [pc, #404]	; (800c928 <tcp_receive+0xb04>)
 800c792:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c794:	4b64      	ldr	r3, [pc, #400]	; (800c928 <tcp_receive+0xb04>)
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	461a      	mov	r2, r3
 800c79a:	4b64      	ldr	r3, [pc, #400]	; (800c92c <tcp_receive+0xb08>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	441a      	add	r2, r3
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d006      	beq.n	800c7b8 <tcp_receive+0x994>
 800c7aa:	4b62      	ldr	r3, [pc, #392]	; (800c934 <tcp_receive+0xb10>)
 800c7ac:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800c7b0:	4961      	ldr	r1, [pc, #388]	; (800c938 <tcp_receive+0xb14>)
 800c7b2:	4862      	ldr	r0, [pc, #392]	; (800c93c <tcp_receive+0xb18>)
 800c7b4:	f006 f9fa 	bl	8012bac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7bc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c7be:	4b5a      	ldr	r3, [pc, #360]	; (800c928 <tcp_receive+0xb04>)
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4b59      	ldr	r3, [pc, #356]	; (800c92c <tcp_receive+0xb08>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	441a      	add	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7d2:	4b55      	ldr	r3, [pc, #340]	; (800c928 <tcp_receive+0xb04>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d206      	bcs.n	800c7e8 <tcp_receive+0x9c4>
 800c7da:	4b56      	ldr	r3, [pc, #344]	; (800c934 <tcp_receive+0xb10>)
 800c7dc:	f240 6207 	movw	r2, #1543	; 0x607
 800c7e0:	4957      	ldr	r1, [pc, #348]	; (800c940 <tcp_receive+0xb1c>)
 800c7e2:	4856      	ldr	r0, [pc, #344]	; (800c93c <tcp_receive+0xb18>)
 800c7e4:	f006 f9e2 	bl	8012bac <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7ec:	4b4e      	ldr	r3, [pc, #312]	; (800c928 <tcp_receive+0xb04>)
 800c7ee:	881b      	ldrh	r3, [r3, #0]
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7fc ff11 	bl	8009620 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c7fe:	4b4c      	ldr	r3, [pc, #304]	; (800c930 <tcp_receive+0xb0c>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	891b      	ldrh	r3, [r3, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d006      	beq.n	800c816 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c808:	4b49      	ldr	r3, [pc, #292]	; (800c930 <tcp_receive+0xb0c>)
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4a4d      	ldr	r2, [pc, #308]	; (800c944 <tcp_receive+0xb20>)
 800c80e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c810:	4b47      	ldr	r3, [pc, #284]	; (800c930 <tcp_receive+0xb0c>)
 800c812:	2200      	movs	r2, #0
 800c814:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c816:	4b46      	ldr	r3, [pc, #280]	; (800c930 <tcp_receive+0xb0c>)
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	899b      	ldrh	r3, [r3, #12]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fa fc4a 	bl	80070b8 <lwip_htons>
 800c824:	4603      	mov	r3, r0
 800c826:	b2db      	uxtb	r3, r3
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 80b8 	beq.w	800c9a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c832:	4b45      	ldr	r3, [pc, #276]	; (800c948 <tcp_receive+0xb24>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	f043 0320 	orr.w	r3, r3, #32
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	4b42      	ldr	r3, [pc, #264]	; (800c948 <tcp_receive+0xb24>)
 800c83e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c840:	e0af      	b.n	800c9a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c846:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	4a36      	ldr	r2, [pc, #216]	; (800c92c <tcp_receive+0xb08>)
 800c852:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	891b      	ldrh	r3, [r3, #8]
 800c858:	461c      	mov	r4, r3
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	899b      	ldrh	r3, [r3, #12]
 800c860:	b29b      	uxth	r3, r3
 800c862:	4618      	mov	r0, r3
 800c864:	f7fa fc28 	bl	80070b8 <lwip_htons>
 800c868:	4603      	mov	r3, r0
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <tcp_receive+0xa54>
 800c874:	2301      	movs	r3, #1
 800c876:	e000      	b.n	800c87a <tcp_receive+0xa56>
 800c878:	2300      	movs	r3, #0
 800c87a:	191a      	adds	r2, r3, r4
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	441a      	add	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c88a:	461c      	mov	r4, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	891b      	ldrh	r3, [r3, #8]
 800c890:	461d      	mov	r5, r3
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	899b      	ldrh	r3, [r3, #12]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fa fc0c 	bl	80070b8 <lwip_htons>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0303 	and.w	r3, r3, #3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <tcp_receive+0xa8c>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e000      	b.n	800c8b2 <tcp_receive+0xa8e>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	442b      	add	r3, r5
 800c8b4:	429c      	cmp	r4, r3
 800c8b6:	d206      	bcs.n	800c8c6 <tcp_receive+0xaa2>
 800c8b8:	4b1e      	ldr	r3, [pc, #120]	; (800c934 <tcp_receive+0xb10>)
 800c8ba:	f240 622c 	movw	r2, #1580	; 0x62c
 800c8be:	4923      	ldr	r1, [pc, #140]	; (800c94c <tcp_receive+0xb28>)
 800c8c0:	481e      	ldr	r0, [pc, #120]	; (800c93c <tcp_receive+0xb18>)
 800c8c2:	f006 f973 	bl	8012bac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	891b      	ldrh	r3, [r3, #8]
 800c8ca:	461c      	mov	r4, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	899b      	ldrh	r3, [r3, #12]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fa fbef 	bl	80070b8 <lwip_htons>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 0303 	and.w	r3, r3, #3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <tcp_receive+0xac6>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e000      	b.n	800c8ec <tcp_receive+0xac8>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	1919      	adds	r1, r3, r4
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8f2:	b28b      	uxth	r3, r1
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7fc fe8f 	bl	8009620 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	891b      	ldrh	r3, [r3, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d028      	beq.n	800c95e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <tcp_receive+0xb20>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01d      	beq.n	800c950 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c914:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <tcp_receive+0xb20>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	4619      	mov	r1, r3
 800c91e:	4610      	mov	r0, r2
 800c920:	f7fc f840 	bl	80089a4 <pbuf_cat>
 800c924:	e018      	b.n	800c958 <tcp_receive+0xb34>
 800c926:	bf00      	nop
 800c928:	20008ace 	.word	0x20008ace
 800c92c:	20008ac4 	.word	0x20008ac4
 800c930:	20008aa4 	.word	0x20008aa4
 800c934:	080148b4 	.word	0x080148b4
 800c938:	08014c94 	.word	0x08014c94
 800c93c:	08014900 	.word	0x08014900
 800c940:	08014cd0 	.word	0x08014cd0
 800c944:	20008ad4 	.word	0x20008ad4
 800c948:	20008ad1 	.word	0x20008ad1
 800c94c:	08014cf0 	.word	0x08014cf0
            } else {
              recv_data = cseg->p;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	4a70      	ldr	r2, [pc, #448]	; (800cb18 <tcp_receive+0xcf4>)
 800c956:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	899b      	ldrh	r3, [r3, #12]
 800c964:	b29b      	uxth	r3, r3
 800c966:	4618      	mov	r0, r3
 800c968:	f7fa fba6 	bl	80070b8 <lwip_htons>
 800c96c:	4603      	mov	r3, r0
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00d      	beq.n	800c994 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c978:	4b68      	ldr	r3, [pc, #416]	; (800cb1c <tcp_receive+0xcf8>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	b2da      	uxtb	r2, r3
 800c982:	4b66      	ldr	r3, [pc, #408]	; (800cb1c <tcp_receive+0xcf8>)
 800c984:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7d1b      	ldrb	r3, [r3, #20]
 800c98a:	2b04      	cmp	r3, #4
 800c98c:	d102      	bne.n	800c994 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2207      	movs	r2, #7
 800c992:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c99c:	68b8      	ldr	r0, [r7, #8]
 800c99e:	f7fd fb61 	bl	800a064 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	f43f af43 	beq.w	800c842 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	8b5b      	ldrh	r3, [r3, #26]
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00e      	beq.n	800c9e6 <tcp_receive+0xbc2>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	8b5b      	ldrh	r3, [r3, #26]
 800c9cc:	f023 0301 	bic.w	r3, r3, #1
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	835a      	strh	r2, [r3, #26]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	8b5b      	ldrh	r3, [r3, #26]
 800c9da:	f043 0302 	orr.w	r3, r3, #2
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9e4:	e188      	b.n	800ccf8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ea:	f043 0301 	orr.w	r3, r3, #1
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9f4:	e180      	b.n	800ccf8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c9fe:	4848      	ldr	r0, [pc, #288]	; (800cb20 <tcp_receive+0xcfc>)
 800ca00:	f7fd fb48 	bl	800a094 <tcp_seg_copy>
 800ca04:	4602      	mov	r2, r0
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	675a      	str	r2, [r3, #116]	; 0x74
 800ca0a:	e16d      	b.n	800cce8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca16:	e157      	b.n	800ccc8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	4b41      	ldr	r3, [pc, #260]	; (800cb24 <tcp_receive+0xd00>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d11d      	bne.n	800ca62 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ca26:	4b3e      	ldr	r3, [pc, #248]	; (800cb20 <tcp_receive+0xcfc>)
 800ca28:	891a      	ldrh	r2, [r3, #8]
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	891b      	ldrh	r3, [r3, #8]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	f240 814f 	bls.w	800ccd2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca34:	483a      	ldr	r0, [pc, #232]	; (800cb20 <tcp_receive+0xcfc>)
 800ca36:	f7fd fb2d 	bl	800a094 <tcp_seg_copy>
 800ca3a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8149 	beq.w	800ccd6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ca44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	e002      	b.n	800ca58 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ca58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca5a:	6978      	ldr	r0, [r7, #20]
 800ca5c:	f7ff f8de 	bl	800bc1c <tcp_oos_insert_segment>
                }
                break;
 800ca60:	e139      	b.n	800ccd6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d117      	bne.n	800ca98 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ca68:	4b2e      	ldr	r3, [pc, #184]	; (800cb24 <tcp_receive+0xd00>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	da57      	bge.n	800cb28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca78:	4829      	ldr	r0, [pc, #164]	; (800cb20 <tcp_receive+0xcfc>)
 800ca7a:	f7fd fb0b 	bl	800a094 <tcp_seg_copy>
 800ca7e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 8129 	beq.w	800ccda <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	69ba      	ldr	r2, [r7, #24]
 800ca8c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ca8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca90:	69b8      	ldr	r0, [r7, #24]
 800ca92:	f7ff f8c3 	bl	800bc1c <tcp_oos_insert_segment>
                  }
                  break;
 800ca96:	e120      	b.n	800ccda <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ca98:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <tcp_receive+0xd00>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	3b01      	subs	r3, #1
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	db3e      	blt.n	800cb28 <tcp_receive+0xd04>
 800caaa:	4b1e      	ldr	r3, [pc, #120]	; (800cb24 <tcp_receive+0xd00>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	3301      	adds	r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	dc35      	bgt.n	800cb28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cabc:	4818      	ldr	r0, [pc, #96]	; (800cb20 <tcp_receive+0xcfc>)
 800cabe:	f7fd fae9 	bl	800a094 <tcp_seg_copy>
 800cac2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 8109 	beq.w	800ccde <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cad4:	8912      	ldrh	r2, [r2, #8]
 800cad6:	441a      	add	r2, r3
 800cad8:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <tcp_receive+0xd00>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd12      	ble.n	800cb08 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cae2:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <tcp_receive+0xd00>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800caf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	891b      	ldrh	r3, [r3, #8]
 800cb00:	4619      	mov	r1, r3
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7fb fcfa 	bl	80084fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	69fa      	ldr	r2, [r7, #28]
 800cb0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cb0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb10:	69f8      	ldr	r0, [r7, #28]
 800cb12:	f7ff f883 	bl	800bc1c <tcp_oos_insert_segment>
                  }
                  break;
 800cb16:	e0e2      	b.n	800ccde <tcp_receive+0xeba>
 800cb18:	20008ad4 	.word	0x20008ad4
 800cb1c:	20008ad1 	.word	0x20008ad1
 800cb20:	20008aa4 	.word	0x20008aa4
 800cb24:	20008ac4 	.word	0x20008ac4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f040 80c6 	bne.w	800ccc2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cb36:	4b80      	ldr	r3, [pc, #512]	; (800cd38 <tcp_receive+0xf14>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f340 80bd 	ble.w	800ccc2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	899b      	ldrh	r3, [r3, #12]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fa fab1 	bl	80070b8 <lwip_htons>
 800cb56:	4603      	mov	r3, r0
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f040 80bf 	bne.w	800cce2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cb64:	4875      	ldr	r0, [pc, #468]	; (800cd3c <tcp_receive+0xf18>)
 800cb66:	f7fd fa95 	bl	800a094 <tcp_seg_copy>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 80b6 	beq.w	800cce6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb82:	8912      	ldrh	r2, [r2, #8]
 800cb84:	441a      	add	r2, r3
 800cb86:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <tcp_receive+0xf14>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	dd12      	ble.n	800cbb6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cb90:	4b69      	ldr	r3, [pc, #420]	; (800cd38 <tcp_receive+0xf14>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	891b      	ldrh	r3, [r3, #8]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	f7fb fca3 	bl	80084fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cbb6:	4b62      	ldr	r3, [pc, #392]	; (800cd40 <tcp_receive+0xf1c>)
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	4b5e      	ldr	r3, [pc, #376]	; (800cd38 <tcp_receive+0xf14>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	441a      	add	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbca:	440b      	add	r3, r1
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f340 8089 	ble.w	800cce6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	899b      	ldrh	r3, [r3, #12]
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fa fa6a 	bl	80070b8 <lwip_htons>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d022      	beq.n	800cc36 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	899b      	ldrh	r3, [r3, #12]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	b21b      	sxth	r3, r3
 800cbfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc00:	b21c      	sxth	r4, r3
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	899b      	ldrh	r3, [r3, #12]
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fa fa53 	bl	80070b8 <lwip_htons>
 800cc12:	4603      	mov	r3, r0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fa fa4a 	bl	80070b8 <lwip_htons>
 800cc24:	4603      	mov	r3, r0
 800cc26:	b21b      	sxth	r3, r3
 800cc28:	4323      	orrs	r3, r4
 800cc2a:	b21a      	sxth	r2, r3
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	b292      	uxth	r2, r2
 800cc34:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc40:	4413      	add	r3, r2
 800cc42:	b299      	uxth	r1, r3
 800cc44:	4b3c      	ldr	r3, [pc, #240]	; (800cd38 <tcp_receive+0xf14>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	1a8a      	subs	r2, r1, r2
 800cc50:	b292      	uxth	r2, r2
 800cc52:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	891b      	ldrh	r3, [r3, #8]
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	f7fb fc4a 	bl	80084fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	891c      	ldrh	r4, [r3, #8]
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	899b      	ldrh	r3, [r3, #12]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fa fa1d 	bl	80070b8 <lwip_htons>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <tcp_receive+0xe6a>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <tcp_receive+0xe6c>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4423      	add	r3, r4
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	4b2a      	ldr	r3, [pc, #168]	; (800cd40 <tcp_receive+0xf1c>)
 800cc96:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc98:	4b29      	ldr	r3, [pc, #164]	; (800cd40 <tcp_receive+0xf1c>)
 800cc9a:	881b      	ldrh	r3, [r3, #0]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <tcp_receive+0xf14>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	441a      	add	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccac:	440b      	add	r3, r1
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d019      	beq.n	800cce6 <tcp_receive+0xec2>
 800ccb2:	4b24      	ldr	r3, [pc, #144]	; (800cd44 <tcp_receive+0xf20>)
 800ccb4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ccb8:	4923      	ldr	r1, [pc, #140]	; (800cd48 <tcp_receive+0xf24>)
 800ccba:	4824      	ldr	r0, [pc, #144]	; (800cd4c <tcp_receive+0xf28>)
 800ccbc:	f005 ff76 	bl	8012bac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ccc0:	e011      	b.n	800cce6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f47f aea4 	bne.w	800ca18 <tcp_receive+0xbf4>
 800ccd0:	e00a      	b.n	800cce8 <tcp_receive+0xec4>
                break;
 800ccd2:	bf00      	nop
 800ccd4:	e008      	b.n	800cce8 <tcp_receive+0xec4>
                break;
 800ccd6:	bf00      	nop
 800ccd8:	e006      	b.n	800cce8 <tcp_receive+0xec4>
                  break;
 800ccda:	bf00      	nop
 800ccdc:	e004      	b.n	800cce8 <tcp_receive+0xec4>
                  break;
 800ccde:	bf00      	nop
 800cce0:	e002      	b.n	800cce8 <tcp_receive+0xec4>
                  break;
 800cce2:	bf00      	nop
 800cce4:	e000      	b.n	800cce8 <tcp_receive+0xec4>
                break;
 800cce6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 fe9d 	bl	800ea28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ccee:	e003      	b.n	800ccf8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f001 fe99 	bl	800ea28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ccf6:	e01a      	b.n	800cd2e <tcp_receive+0xf0a>
 800ccf8:	e019      	b.n	800cd2e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <tcp_receive+0xf14>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	db0a      	blt.n	800cd1e <tcp_receive+0xefa>
 800cd08:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <tcp_receive+0xf14>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd14:	440b      	add	r3, r1
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	3301      	adds	r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd07      	ble.n	800cd2e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8b5b      	ldrh	r3, [r3, #26]
 800cd22:	f043 0302 	orr.w	r3, r3, #2
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cd2c:	e7ff      	b.n	800cd2e <tcp_receive+0xf0a>
 800cd2e:	bf00      	nop
 800cd30:	3750      	adds	r7, #80	; 0x50
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bdb0      	pop	{r4, r5, r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20008ac4 	.word	0x20008ac4
 800cd3c:	20008aa4 	.word	0x20008aa4
 800cd40:	20008ace 	.word	0x20008ace
 800cd44:	080148b4 	.word	0x080148b4
 800cd48:	08014c5c 	.word	0x08014c5c
 800cd4c:	08014900 	.word	0x08014900

0800cd50 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cd56:	4b15      	ldr	r3, [pc, #84]	; (800cdac <tcp_get_next_optbyte+0x5c>)
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	b291      	uxth	r1, r2
 800cd5e:	4a13      	ldr	r2, [pc, #76]	; (800cdac <tcp_get_next_optbyte+0x5c>)
 800cd60:	8011      	strh	r1, [r2, #0]
 800cd62:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd64:	4b12      	ldr	r3, [pc, #72]	; (800cdb0 <tcp_get_next_optbyte+0x60>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <tcp_get_next_optbyte+0x26>
 800cd6c:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <tcp_get_next_optbyte+0x64>)
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	88fa      	ldrh	r2, [r7, #6]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d208      	bcs.n	800cd88 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <tcp_get_next_optbyte+0x68>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cd7e:	88fb      	ldrh	r3, [r7, #6]
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	4413      	add	r3, r2
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	e00b      	b.n	800cda0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd88:	88fb      	ldrh	r3, [r7, #6]
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <tcp_get_next_optbyte+0x64>)
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	1ad3      	subs	r3, r2, r3
 800cd94:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cd96:	4b06      	ldr	r3, [pc, #24]	; (800cdb0 <tcp_get_next_optbyte+0x60>)
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	797b      	ldrb	r3, [r7, #5]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	20008ac0 	.word	0x20008ac0
 800cdb0:	20008abc 	.word	0x20008abc
 800cdb4:	20008aba 	.word	0x20008aba
 800cdb8:	20008ab4 	.word	0x20008ab4

0800cdbc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <tcp_parseopt+0x1c>
 800cdca:	4b31      	ldr	r3, [pc, #196]	; (800ce90 <tcp_parseopt+0xd4>)
 800cdcc:	f240 727d 	movw	r2, #1917	; 0x77d
 800cdd0:	4930      	ldr	r1, [pc, #192]	; (800ce94 <tcp_parseopt+0xd8>)
 800cdd2:	4831      	ldr	r0, [pc, #196]	; (800ce98 <tcp_parseopt+0xdc>)
 800cdd4:	f005 feea 	bl	8012bac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cdd8:	4b30      	ldr	r3, [pc, #192]	; (800ce9c <tcp_parseopt+0xe0>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d053      	beq.n	800ce88 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cde0:	4b2f      	ldr	r3, [pc, #188]	; (800cea0 <tcp_parseopt+0xe4>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	e043      	b.n	800ce70 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800cde8:	f7ff ffb2 	bl	800cd50 <tcp_get_next_optbyte>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d03c      	beq.n	800ce70 <tcp_parseopt+0xb4>
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d002      	beq.n	800ce00 <tcp_parseopt+0x44>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d03f      	beq.n	800ce7e <tcp_parseopt+0xc2>
 800cdfe:	e026      	b.n	800ce4e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ce00:	f7ff ffa6 	bl	800cd50 <tcp_get_next_optbyte>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d13b      	bne.n	800ce82 <tcp_parseopt+0xc6>
 800ce0a:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <tcp_parseopt+0xe4>)
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	3302      	adds	r3, #2
 800ce10:	4a22      	ldr	r2, [pc, #136]	; (800ce9c <tcp_parseopt+0xe0>)
 800ce12:	8812      	ldrh	r2, [r2, #0]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	dc34      	bgt.n	800ce82 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce18:	f7ff ff9a 	bl	800cd50 <tcp_get_next_optbyte>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ce24:	f7ff ff94 	bl	800cd50 <tcp_get_next_optbyte>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	89bb      	ldrh	r3, [r7, #12]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ce32:	89bb      	ldrh	r3, [r7, #12]
 800ce34:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce38:	d804      	bhi.n	800ce44 <tcp_parseopt+0x88>
 800ce3a:	89bb      	ldrh	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <tcp_parseopt+0x88>
 800ce40:	89ba      	ldrh	r2, [r7, #12]
 800ce42:	e001      	b.n	800ce48 <tcp_parseopt+0x8c>
 800ce44:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ce4c:	e010      	b.n	800ce70 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ce4e:	f7ff ff7f 	bl	800cd50 <tcp_get_next_optbyte>
 800ce52:	4603      	mov	r3, r0
 800ce54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d914      	bls.n	800ce86 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ce5c:	7afb      	ldrb	r3, [r7, #11]
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <tcp_parseopt+0xe4>)
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	4413      	add	r3, r2
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	3b02      	subs	r3, #2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	4b0c      	ldr	r3, [pc, #48]	; (800cea0 <tcp_parseopt+0xe4>)
 800ce6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce70:	4b0b      	ldr	r3, [pc, #44]	; (800cea0 <tcp_parseopt+0xe4>)
 800ce72:	881a      	ldrh	r2, [r3, #0]
 800ce74:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <tcp_parseopt+0xe0>)
 800ce76:	881b      	ldrh	r3, [r3, #0]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3b5      	bcc.n	800cde8 <tcp_parseopt+0x2c>
 800ce7c:	e004      	b.n	800ce88 <tcp_parseopt+0xcc>
          return;
 800ce7e:	bf00      	nop
 800ce80:	e002      	b.n	800ce88 <tcp_parseopt+0xcc>
            return;
 800ce82:	bf00      	nop
 800ce84:	e000      	b.n	800ce88 <tcp_parseopt+0xcc>
            return;
 800ce86:	bf00      	nop
      }
    }
  }
}
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	080148b4 	.word	0x080148b4
 800ce94:	08014d18 	.word	0x08014d18
 800ce98:	08014900 	.word	0x08014900
 800ce9c:	20008ab8 	.word	0x20008ab8
 800cea0:	20008ac0 	.word	0x20008ac0

0800cea4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cea4:	b480      	push	{r7}
 800cea6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cea8:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <tcp_trigger_input_pcb_close+0x1c>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f043 0310 	orr.w	r3, r3, #16
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <tcp_trigger_input_pcb_close+0x1c>)
 800ceb4:	701a      	strb	r2, [r3, #0]
}
 800ceb6:	bf00      	nop
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	20008ad1 	.word	0x20008ad1

0800cec4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00a      	beq.n	800ceec <tcp_route+0x28>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	7a1b      	ldrb	r3, [r3, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d006      	beq.n	800ceec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	7a1b      	ldrb	r3, [r3, #8]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fb f906 	bl	80080f4 <netif_get_by_index>
 800cee8:	4603      	mov	r3, r0
 800ceea:	e003      	b.n	800cef4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f003 fb17 	bl	8010520 <ip4_route>
 800cef2:	4603      	mov	r3, r0
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <tcp_create_segment+0x22>
 800cf12:	4b44      	ldr	r3, [pc, #272]	; (800d024 <tcp_create_segment+0x128>)
 800cf14:	22a3      	movs	r2, #163	; 0xa3
 800cf16:	4944      	ldr	r1, [pc, #272]	; (800d028 <tcp_create_segment+0x12c>)
 800cf18:	4844      	ldr	r0, [pc, #272]	; (800d02c <tcp_create_segment+0x130>)
 800cf1a:	f005 fe47 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <tcp_create_segment+0x34>
 800cf24:	4b3f      	ldr	r3, [pc, #252]	; (800d024 <tcp_create_segment+0x128>)
 800cf26:	22a4      	movs	r2, #164	; 0xa4
 800cf28:	4941      	ldr	r1, [pc, #260]	; (800d030 <tcp_create_segment+0x134>)
 800cf2a:	4840      	ldr	r0, [pc, #256]	; (800d02c <tcp_create_segment+0x130>)
 800cf2c:	f005 fe3e 	bl	8012bac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cf3e:	2003      	movs	r0, #3
 800cf40:	f7fa fd70 	bl	8007a24 <memp_malloc>
 800cf44:	6138      	str	r0, [r7, #16]
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cf4c:	68b8      	ldr	r0, [r7, #8]
 800cf4e:	f7fb fc5b 	bl	8008808 <pbuf_free>
    return NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e061      	b.n	800d01a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cf5c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	891a      	ldrh	r2, [r3, #8]
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d205      	bcs.n	800cf82 <tcp_create_segment+0x86>
 800cf76:	4b2b      	ldr	r3, [pc, #172]	; (800d024 <tcp_create_segment+0x128>)
 800cf78:	22b0      	movs	r2, #176	; 0xb0
 800cf7a:	492e      	ldr	r1, [pc, #184]	; (800d034 <tcp_create_segment+0x138>)
 800cf7c:	482b      	ldr	r0, [pc, #172]	; (800d02c <tcp_create_segment+0x130>)
 800cf7e:	f005 fe15 	bl	8012bac <iprintf>
  seg->len = p->tot_len - optlen;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	891a      	ldrh	r2, [r3, #8]
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cf92:	2114      	movs	r1, #20
 800cf94:	68b8      	ldr	r0, [r7, #8]
 800cf96:	f7fb fba1 	bl	80086dc <pbuf_add_header>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d004      	beq.n	800cfaa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cfa0:	6938      	ldr	r0, [r7, #16]
 800cfa2:	f7fd f85f 	bl	800a064 <tcp_seg_free>
    return NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e037      	b.n	800d01a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	8ada      	ldrh	r2, [r3, #22]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	68dc      	ldr	r4, [r3, #12]
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7fa f87b 	bl	80070b8 <lwip_htons>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	8b1a      	ldrh	r2, [r3, #24]
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	68dc      	ldr	r4, [r3, #12]
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fa f872 	bl	80070b8 <lwip_htons>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	68dc      	ldr	r4, [r3, #12]
 800cfdc:	6838      	ldr	r0, [r7, #0]
 800cfde:	f7fa f880 	bl	80070e2 <lwip_htonl>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	089b      	lsrs	r3, r3, #2
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3305      	adds	r3, #5
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	031b      	lsls	r3, r3, #12
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	68dc      	ldr	r4, [r3, #12]
 800d002:	4610      	mov	r0, r2
 800d004:	f7fa f858 	bl	80070b8 <lwip_htons>
 800d008:	4603      	mov	r3, r0
 800d00a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	749a      	strb	r2, [r3, #18]
 800d014:	2200      	movs	r2, #0
 800d016:	74da      	strb	r2, [r3, #19]
  return seg;
 800d018:	693b      	ldr	r3, [r7, #16]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	371c      	adds	r7, #28
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd90      	pop	{r4, r7, pc}
 800d022:	bf00      	nop
 800d024:	08014d34 	.word	0x08014d34
 800d028:	08014d68 	.word	0x08014d68
 800d02c:	08014d88 	.word	0x08014d88
 800d030:	08014db0 	.word	0x08014db0
 800d034:	08014dd4 	.word	0x08014dd4

0800d038 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	607b      	str	r3, [r7, #4]
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]
 800d044:	460b      	mov	r3, r1
 800d046:	81bb      	strh	r3, [r7, #12]
 800d048:	4613      	mov	r3, r2
 800d04a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d04c:	89bb      	ldrh	r3, [r7, #12]
 800d04e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d105      	bne.n	800d062 <tcp_pbuf_prealloc+0x2a>
 800d056:	4b30      	ldr	r3, [pc, #192]	; (800d118 <tcp_pbuf_prealloc+0xe0>)
 800d058:	22e8      	movs	r2, #232	; 0xe8
 800d05a:	4930      	ldr	r1, [pc, #192]	; (800d11c <tcp_pbuf_prealloc+0xe4>)
 800d05c:	4830      	ldr	r0, [pc, #192]	; (800d120 <tcp_pbuf_prealloc+0xe8>)
 800d05e:	f005 fda5 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d105      	bne.n	800d074 <tcp_pbuf_prealloc+0x3c>
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <tcp_pbuf_prealloc+0xe0>)
 800d06a:	22e9      	movs	r2, #233	; 0xe9
 800d06c:	492d      	ldr	r1, [pc, #180]	; (800d124 <tcp_pbuf_prealloc+0xec>)
 800d06e:	482c      	ldr	r0, [pc, #176]	; (800d120 <tcp_pbuf_prealloc+0xe8>)
 800d070:	f005 fd9c 	bl	8012bac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d074:	89ba      	ldrh	r2, [r7, #12]
 800d076:	897b      	ldrh	r3, [r7, #10]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d221      	bcs.n	800d0c0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d07c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d111      	bne.n	800d0ac <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	8b5b      	ldrh	r3, [r3, #26]
 800d08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d090:	2b00      	cmp	r3, #0
 800d092:	d115      	bne.n	800d0c0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d094:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d007      	beq.n	800d0ac <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d009      	beq.n	800d0c0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d0ac:	89bb      	ldrh	r3, [r7, #12]
 800d0ae:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d0b2:	f023 0203 	bic.w	r2, r3, #3
 800d0b6:	897b      	ldrh	r3, [r7, #10]
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	bf28      	it	cs
 800d0bc:	4613      	movcs	r3, r2
 800d0be:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d0c0:	8af9      	ldrh	r1, [r7, #22]
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fb f8bd 	bl	8008248 <pbuf_alloc>
 800d0ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e019      	b.n	800d10e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d006      	beq.n	800d0f0 <tcp_pbuf_prealloc+0xb8>
 800d0e2:	4b0d      	ldr	r3, [pc, #52]	; (800d118 <tcp_pbuf_prealloc+0xe0>)
 800d0e4:	f240 120b 	movw	r2, #267	; 0x10b
 800d0e8:	490f      	ldr	r1, [pc, #60]	; (800d128 <tcp_pbuf_prealloc+0xf0>)
 800d0ea:	480d      	ldr	r0, [pc, #52]	; (800d120 <tcp_pbuf_prealloc+0xe8>)
 800d0ec:	f005 fd5e 	bl	8012bac <iprintf>
  *oversize = p->len - length;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	895a      	ldrh	r2, [r3, #10]
 800d0f4:	89bb      	ldrh	r3, [r7, #12]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	89ba      	ldrh	r2, [r7, #12]
 800d102:	811a      	strh	r2, [r3, #8]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	891a      	ldrh	r2, [r3, #8]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	815a      	strh	r2, [r3, #10]
  return p;
 800d10c:	693b      	ldr	r3, [r7, #16]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	08014d34 	.word	0x08014d34
 800d11c:	08014dec 	.word	0x08014dec
 800d120:	08014d88 	.word	0x08014d88
 800d124:	08014e10 	.word	0x08014e10
 800d128:	08014e30 	.word	0x08014e30

0800d12c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <tcp_write_checks+0x20>
 800d13e:	4b33      	ldr	r3, [pc, #204]	; (800d20c <tcp_write_checks+0xe0>)
 800d140:	f240 1233 	movw	r2, #307	; 0x133
 800d144:	4932      	ldr	r1, [pc, #200]	; (800d210 <tcp_write_checks+0xe4>)
 800d146:	4833      	ldr	r0, [pc, #204]	; (800d214 <tcp_write_checks+0xe8>)
 800d148:	f005 fd30 	bl	8012bac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7d1b      	ldrb	r3, [r3, #20]
 800d150:	2b04      	cmp	r3, #4
 800d152:	d00e      	beq.n	800d172 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d158:	2b07      	cmp	r3, #7
 800d15a:	d00a      	beq.n	800d172 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d160:	2b02      	cmp	r3, #2
 800d162:	d006      	beq.n	800d172 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d002      	beq.n	800d172 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d16c:	f06f 030a 	mvn.w	r3, #10
 800d170:	e048      	b.n	800d204 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d172:	887b      	ldrh	r3, [r7, #2]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <tcp_write_checks+0x50>
    return ERR_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	e043      	b.n	800d204 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d182:	887a      	ldrh	r2, [r7, #2]
 800d184:	429a      	cmp	r2, r3
 800d186:	d909      	bls.n	800d19c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	8b5b      	ldrh	r3, [r3, #26]
 800d18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d190:	b29a      	uxth	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d196:	f04f 33ff 	mov.w	r3, #4294967295
 800d19a:	e033      	b.n	800d204 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1a2:	2b08      	cmp	r3, #8
 800d1a4:	d909      	bls.n	800d1ba <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8b5b      	ldrh	r3, [r3, #26]
 800d1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b8:	e024      	b.n	800d204 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00f      	beq.n	800d1e4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d11a      	bne.n	800d202 <tcp_write_checks+0xd6>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d116      	bne.n	800d202 <tcp_write_checks+0xd6>
 800d1d4:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <tcp_write_checks+0xe0>)
 800d1d6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d1da:	490f      	ldr	r1, [pc, #60]	; (800d218 <tcp_write_checks+0xec>)
 800d1dc:	480d      	ldr	r0, [pc, #52]	; (800d214 <tcp_write_checks+0xe8>)
 800d1de:	f005 fce5 	bl	8012bac <iprintf>
 800d1e2:	e00e      	b.n	800d202 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d103      	bne.n	800d1f4 <tcp_write_checks+0xc8>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d006      	beq.n	800d202 <tcp_write_checks+0xd6>
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <tcp_write_checks+0xe0>)
 800d1f6:	f240 1259 	movw	r2, #345	; 0x159
 800d1fa:	4908      	ldr	r1, [pc, #32]	; (800d21c <tcp_write_checks+0xf0>)
 800d1fc:	4805      	ldr	r0, [pc, #20]	; (800d214 <tcp_write_checks+0xe8>)
 800d1fe:	f005 fcd5 	bl	8012bac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	08014d34 	.word	0x08014d34
 800d210:	08014e44 	.word	0x08014e44
 800d214:	08014d88 	.word	0x08014d88
 800d218:	08014e64 	.word	0x08014e64
 800d21c:	08014ea0 	.word	0x08014ea0

0800d220 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d220:	b590      	push	{r4, r7, lr}
 800d222:	b09b      	sub	sp, #108	; 0x6c
 800d224:	af04      	add	r7, sp, #16
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	4611      	mov	r1, r2
 800d22c:	461a      	mov	r2, r3
 800d22e:	460b      	mov	r3, r1
 800d230:	80fb      	strh	r3, [r7, #6]
 800d232:	4613      	mov	r3, r2
 800d234:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	653b      	str	r3, [r7, #80]	; 0x50
 800d23e:	2300      	movs	r3, #0
 800d240:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d242:	2300      	movs	r3, #0
 800d244:	64bb      	str	r3, [r7, #72]	; 0x48
 800d246:	2300      	movs	r3, #0
 800d248:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d24a:	2300      	movs	r3, #0
 800d24c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d109      	bne.n	800d27c <tcp_write+0x5c>
 800d268:	4ba5      	ldr	r3, [pc, #660]	; (800d500 <tcp_write+0x2e0>)
 800d26a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d26e:	49a5      	ldr	r1, [pc, #660]	; (800d504 <tcp_write+0x2e4>)
 800d270:	48a5      	ldr	r0, [pc, #660]	; (800d508 <tcp_write+0x2e8>)
 800d272:	f005 fc9b 	bl	8012bac <iprintf>
 800d276:	f06f 030f 	mvn.w	r3, #15
 800d27a:	e32c      	b.n	800d8d6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d282:	085b      	lsrs	r3, r3, #1
 800d284:	b29a      	uxth	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d28a:	4293      	cmp	r3, r2
 800d28c:	bf28      	it	cs
 800d28e:	4613      	movcs	r3, r2
 800d290:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <tcp_write+0x7e>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d29c:	e000      	b.n	800d2a0 <tcp_write+0x80>
 800d29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d109      	bne.n	800d2bc <tcp_write+0x9c>
 800d2a8:	4b95      	ldr	r3, [pc, #596]	; (800d500 <tcp_write+0x2e0>)
 800d2aa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800d2ae:	4997      	ldr	r1, [pc, #604]	; (800d50c <tcp_write+0x2ec>)
 800d2b0:	4895      	ldr	r0, [pc, #596]	; (800d508 <tcp_write+0x2e8>)
 800d2b2:	f005 fc7b 	bl	8012bac <iprintf>
 800d2b6:	f06f 030f 	mvn.w	r3, #15
 800d2ba:	e30c      	b.n	800d8d6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d2bc:	88fb      	ldrh	r3, [r7, #6]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff ff33 	bl	800d12c <tcp_write_checks>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d2cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <tcp_write+0xba>
    return err;
 800d2d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2d8:	e2fd      	b.n	800d8d6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80f7 	beq.w	800d4e2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f8:	653b      	str	r3, [r7, #80]	; 0x50
 800d2fa:	e002      	b.n	800d302 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1f8      	bne.n	800d2fc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d30c:	7a9b      	ldrb	r3, [r3, #10]
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	b29b      	uxth	r3, r3
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d318:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d31c:	891b      	ldrh	r3, [r3, #8]
 800d31e:	4619      	mov	r1, r3
 800d320:	8c3b      	ldrh	r3, [r7, #32]
 800d322:	440b      	add	r3, r1
 800d324:	429a      	cmp	r2, r3
 800d326:	da06      	bge.n	800d336 <tcp_write+0x116>
 800d328:	4b75      	ldr	r3, [pc, #468]	; (800d500 <tcp_write+0x2e0>)
 800d32a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d32e:	4978      	ldr	r1, [pc, #480]	; (800d510 <tcp_write+0x2f0>)
 800d330:	4875      	ldr	r0, [pc, #468]	; (800d508 <tcp_write+0x2e8>)
 800d332:	f005 fc3b 	bl	8012bac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d338:	891a      	ldrh	r2, [r3, #8]
 800d33a:	8c3b      	ldrh	r3, [r7, #32]
 800d33c:	4413      	add	r3, r2
 800d33e:	b29b      	uxth	r3, r3
 800d340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d34c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d34e:	8a7b      	ldrh	r3, [r7, #18]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d027      	beq.n	800d3a4 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d354:	8a7b      	ldrh	r3, [r7, #18]
 800d356:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d358:	429a      	cmp	r2, r3
 800d35a:	d206      	bcs.n	800d36a <tcp_write+0x14a>
 800d35c:	4b68      	ldr	r3, [pc, #416]	; (800d500 <tcp_write+0x2e0>)
 800d35e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d362:	496c      	ldr	r1, [pc, #432]	; (800d514 <tcp_write+0x2f4>)
 800d364:	4868      	ldr	r0, [pc, #416]	; (800d508 <tcp_write+0x2e8>)
 800d366:	f005 fc21 	bl	8012bac <iprintf>
      seg = last_unsent;
 800d36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d36c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d36e:	8a7b      	ldrh	r3, [r7, #18]
 800d370:	88fa      	ldrh	r2, [r7, #6]
 800d372:	429a      	cmp	r2, r3
 800d374:	d901      	bls.n	800d37a <tcp_write+0x15a>
 800d376:	8a7b      	ldrh	r3, [r7, #18]
 800d378:	e000      	b.n	800d37c <tcp_write+0x15c>
 800d37a:	88fb      	ldrh	r3, [r7, #6]
 800d37c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d37e:	4293      	cmp	r3, r2
 800d380:	bfa8      	it	ge
 800d382:	4613      	movge	r3, r2
 800d384:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d386:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d38a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d38c:	4413      	add	r3, r2
 800d38e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d392:	8a7a      	ldrh	r2, [r7, #18]
 800d394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	b29b      	uxth	r3, r3
 800d39a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d39c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d39e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d3a4:	8a7b      	ldrh	r3, [r7, #18]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00b      	beq.n	800d3c2 <tcp_write+0x1a2>
 800d3aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3ae:	88fb      	ldrh	r3, [r7, #6]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d006      	beq.n	800d3c2 <tcp_write+0x1a2>
 800d3b4:	4b52      	ldr	r3, [pc, #328]	; (800d500 <tcp_write+0x2e0>)
 800d3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3ba:	4957      	ldr	r1, [pc, #348]	; (800d518 <tcp_write+0x2f8>)
 800d3bc:	4852      	ldr	r0, [pc, #328]	; (800d508 <tcp_write+0x2e8>)
 800d3be:	f005 fbf5 	bl	8012bac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d3c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3c6:	88fb      	ldrh	r3, [r7, #6]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	f080 8168 	bcs.w	800d69e <tcp_write+0x47e>
 800d3ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 8164 	beq.w	800d69e <tcp_write+0x47e>
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d8:	891b      	ldrh	r3, [r3, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 815f 	beq.w	800d69e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d3e0:	88fa      	ldrh	r2, [r7, #6]
 800d3e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3e6:	1ad2      	subs	r2, r2, r3
 800d3e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	bfa8      	it	ge
 800d3ee:	4613      	movge	r3, r2
 800d3f0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d3f6:	797b      	ldrb	r3, [r7, #5]
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d027      	beq.n	800d450 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d400:	f107 0012 	add.w	r0, r7, #18
 800d404:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d406:	8bf9      	ldrh	r1, [r7, #30]
 800d408:	2301      	movs	r3, #1
 800d40a:	9302      	str	r3, [sp, #8]
 800d40c:	797b      	ldrb	r3, [r7, #5]
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	4603      	mov	r3, r0
 800d416:	2000      	movs	r0, #0
 800d418:	f7ff fe0e 	bl	800d038 <tcp_pbuf_prealloc>
 800d41c:	6578      	str	r0, [r7, #84]	; 0x54
 800d41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 8226 	beq.w	800d872 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d428:	6858      	ldr	r0, [r3, #4]
 800d42a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	4413      	add	r3, r2
 800d432:	8bfa      	ldrh	r2, [r7, #30]
 800d434:	4619      	mov	r1, r3
 800d436:	f005 f8de 	bl	80125f6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d43a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d43c:	f7fb fa72 	bl	8008924 <pbuf_clen>
 800d440:	4603      	mov	r3, r0
 800d442:	461a      	mov	r2, r3
 800d444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d448:	4413      	add	r3, r2
 800d44a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d44e:	e041      	b.n	800d4d4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
 800d456:	e002      	b.n	800d45e <tcp_write+0x23e>
 800d458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	637b      	str	r3, [r7, #52]	; 0x34
 800d45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f8      	bne.n	800d458 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d468:	7b1b      	ldrb	r3, [r3, #12]
 800d46a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d115      	bne.n	800d49e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d478:	8952      	ldrh	r2, [r2, #10]
 800d47a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d10d      	bne.n	800d49e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <tcp_write+0x278>
 800d48a:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <tcp_write+0x2e0>)
 800d48c:	f240 2231 	movw	r2, #561	; 0x231
 800d490:	4922      	ldr	r1, [pc, #136]	; (800d51c <tcp_write+0x2fc>)
 800d492:	481d      	ldr	r0, [pc, #116]	; (800d508 <tcp_write+0x2e8>)
 800d494:	f005 fb8a 	bl	8012bac <iprintf>
          extendlen = seglen;
 800d498:	8bfb      	ldrh	r3, [r7, #30]
 800d49a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d49c:	e01a      	b.n	800d4d4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d49e:	8bfb      	ldrh	r3, [r7, #30]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	f7fa fecf 	bl	8008248 <pbuf_alloc>
 800d4aa:	6578      	str	r0, [r7, #84]	; 0x54
 800d4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 81e1 	beq.w	800d876 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d4b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	441a      	add	r2, r3
 800d4bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4be:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d4c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d4c2:	f7fb fa2f 	bl	8008924 <pbuf_clen>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d4d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4d8:	8bfb      	ldrh	r3, [r7, #30]
 800d4da:	4413      	add	r3, r2
 800d4dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d4e0:	e0dd      	b.n	800d69e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 80d8 	beq.w	800d69e <tcp_write+0x47e>
 800d4ee:	4b04      	ldr	r3, [pc, #16]	; (800d500 <tcp_write+0x2e0>)
 800d4f0:	f240 224b 	movw	r2, #587	; 0x24b
 800d4f4:	490a      	ldr	r1, [pc, #40]	; (800d520 <tcp_write+0x300>)
 800d4f6:	4804      	ldr	r0, [pc, #16]	; (800d508 <tcp_write+0x2e8>)
 800d4f8:	f005 fb58 	bl	8012bac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d4fc:	e0cf      	b.n	800d69e <tcp_write+0x47e>
 800d4fe:	bf00      	nop
 800d500:	08014d34 	.word	0x08014d34
 800d504:	08014ed4 	.word	0x08014ed4
 800d508:	08014d88 	.word	0x08014d88
 800d50c:	08014eec 	.word	0x08014eec
 800d510:	08014f20 	.word	0x08014f20
 800d514:	08014f38 	.word	0x08014f38
 800d518:	08014f58 	.word	0x08014f58
 800d51c:	08014f78 	.word	0x08014f78
 800d520:	08014fa4 	.word	0x08014fa4
    struct pbuf *p;
    u16_t left = len - pos;
 800d524:	88fa      	ldrh	r2, [r7, #6]
 800d526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d52e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d532:	b29b      	uxth	r3, r3
 800d534:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d53a:	8b7a      	ldrh	r2, [r7, #26]
 800d53c:	8bbb      	ldrh	r3, [r7, #28]
 800d53e:	4293      	cmp	r3, r2
 800d540:	bf28      	it	cs
 800d542:	4613      	movcs	r3, r2
 800d544:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d546:	797b      	ldrb	r3, [r7, #5]
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d036      	beq.n	800d5be <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d554:	b29a      	uxth	r2, r3
 800d556:	8b3b      	ldrh	r3, [r7, #24]
 800d558:	4413      	add	r3, r2
 800d55a:	b299      	uxth	r1, r3
 800d55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bf0c      	ite	eq
 800d562:	2301      	moveq	r3, #1
 800d564:	2300      	movne	r3, #0
 800d566:	b2db      	uxtb	r3, r3
 800d568:	f107 0012 	add.w	r0, r7, #18
 800d56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d56e:	9302      	str	r3, [sp, #8]
 800d570:	797b      	ldrb	r3, [r7, #5]
 800d572:	9301      	str	r3, [sp, #4]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	4603      	mov	r3, r0
 800d57a:	2036      	movs	r0, #54	; 0x36
 800d57c:	f7ff fd5c 	bl	800d038 <tcp_pbuf_prealloc>
 800d580:	6338      	str	r0, [r7, #48]	; 0x30
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 8178 	beq.w	800d87a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	895b      	ldrh	r3, [r3, #10]
 800d58e:	8b3a      	ldrh	r2, [r7, #24]
 800d590:	429a      	cmp	r2, r3
 800d592:	d906      	bls.n	800d5a2 <tcp_write+0x382>
 800d594:	4b8c      	ldr	r3, [pc, #560]	; (800d7c8 <tcp_write+0x5a8>)
 800d596:	f240 2267 	movw	r2, #615	; 0x267
 800d59a:	498c      	ldr	r1, [pc, #560]	; (800d7cc <tcp_write+0x5ac>)
 800d59c:	488c      	ldr	r0, [pc, #560]	; (800d7d0 <tcp_write+0x5b0>)
 800d59e:	f005 fb05 	bl	8012bac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d5aa:	18d0      	adds	r0, r2, r3
 800d5ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	8b3a      	ldrh	r2, [r7, #24]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	f005 f81d 	bl	80125f6 <memcpy>
 800d5bc:	e02f      	b.n	800d61e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d5be:	8a7b      	ldrh	r3, [r7, #18]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <tcp_write+0x3b2>
 800d5c4:	4b80      	ldr	r3, [pc, #512]	; (800d7c8 <tcp_write+0x5a8>)
 800d5c6:	f240 2271 	movw	r2, #625	; 0x271
 800d5ca:	4982      	ldr	r1, [pc, #520]	; (800d7d4 <tcp_write+0x5b4>)
 800d5cc:	4880      	ldr	r0, [pc, #512]	; (800d7d0 <tcp_write+0x5b0>)
 800d5ce:	f005 faed 	bl	8012bac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d5d2:	8b3b      	ldrh	r3, [r7, #24]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	2036      	movs	r0, #54	; 0x36
 800d5da:	f7fa fe35 	bl	8008248 <pbuf_alloc>
 800d5de:	6178      	str	r0, [r7, #20]
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f000 814b 	beq.w	800d87e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d5e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	441a      	add	r2, r3
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5fe:	4619      	mov	r1, r3
 800d600:	2036      	movs	r0, #54	; 0x36
 800d602:	f7fa fe21 	bl	8008248 <pbuf_alloc>
 800d606:	6338      	str	r0, [r7, #48]	; 0x30
 800d608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d103      	bne.n	800d616 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d60e:	6978      	ldr	r0, [r7, #20]
 800d610:	f7fb f8fa 	bl	8008808 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d614:	e136      	b.n	800d884 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d616:	6979      	ldr	r1, [r7, #20]
 800d618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61a:	f7fb f9c3 	bl	80089a4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d620:	f7fb f980 	bl	8008924 <pbuf_clen>
 800d624:	4603      	mov	r3, r0
 800d626:	461a      	mov	r2, r3
 800d628:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d62c:	4413      	add	r3, r2
 800d62e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d636:	2b09      	cmp	r3, #9
 800d638:	d903      	bls.n	800d642 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d63c:	f7fb f8e4 	bl	8008808 <pbuf_free>
      goto memerr;
 800d640:	e120      	b.n	800d884 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d64a:	441a      	add	r2, r3
 800d64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	4613      	mov	r3, r2
 800d654:	2200      	movs	r2, #0
 800d656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f7ff fc4f 	bl	800cefc <tcp_create_segment>
 800d65e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 810d 	beq.w	800d882 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <tcp_write+0x454>
      queue = seg;
 800d66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d670:	647b      	str	r3, [r7, #68]	; 0x44
 800d672:	e00c      	b.n	800d68e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d676:	2b00      	cmp	r3, #0
 800d678:	d106      	bne.n	800d688 <tcp_write+0x468>
 800d67a:	4b53      	ldr	r3, [pc, #332]	; (800d7c8 <tcp_write+0x5a8>)
 800d67c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d680:	4955      	ldr	r1, [pc, #340]	; (800d7d8 <tcp_write+0x5b8>)
 800d682:	4853      	ldr	r0, [pc, #332]	; (800d7d0 <tcp_write+0x5b0>)
 800d684:	f005 fa92 	bl	8012bac <iprintf>
      prev_seg->next = seg;
 800d688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d68a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d68c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d690:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d692:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d696:	8b3b      	ldrh	r3, [r7, #24]
 800d698:	4413      	add	r3, r2
 800d69a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d69e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	f4ff af3d 	bcc.w	800d524 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d6aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d02c      	beq.n	800d70a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6b6:	e01e      	b.n	800d6f6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	891a      	ldrh	r2, [r3, #8]
 800d6bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6be:	4413      	add	r3, r2
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d110      	bne.n	800d6f0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6d4:	8952      	ldrh	r2, [r2, #10]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f004 ff8a 	bl	80125f6 <memcpy>
        p->len += oversize_used;
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	895a      	ldrh	r2, [r3, #10]
 800d6e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6e8:	4413      	add	r3, r2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1dd      	bne.n	800d6b8 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800d6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fe:	891a      	ldrh	r2, [r3, #8]
 800d700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d702:	4413      	add	r3, r2
 800d704:	b29a      	uxth	r2, r3
 800d706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d708:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d70a:	8a7a      	ldrh	r2, [r7, #18]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d714:	2b00      	cmp	r3, #0
 800d716:	d018      	beq.n	800d74a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <tcp_write+0x50c>
 800d71e:	4b2a      	ldr	r3, [pc, #168]	; (800d7c8 <tcp_write+0x5a8>)
 800d720:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d724:	492d      	ldr	r1, [pc, #180]	; (800d7dc <tcp_write+0x5bc>)
 800d726:	482a      	ldr	r0, [pc, #168]	; (800d7d0 <tcp_write+0x5b0>)
 800d728:	f005 fa40 	bl	8012bac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d732:	4618      	mov	r0, r3
 800d734:	f7fb f936 	bl	80089a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73a:	891a      	ldrh	r2, [r3, #8]
 800d73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d73e:	891b      	ldrh	r3, [r3, #8]
 800d740:	4413      	add	r3, r2
 800d742:	b29a      	uxth	r2, r3
 800d744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d746:	811a      	strh	r2, [r3, #8]
 800d748:	e037      	b.n	800d7ba <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800d74a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d034      	beq.n	800d7ba <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <tcp_write+0x53e>
 800d756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <tcp_write+0x54c>
 800d75e:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <tcp_write+0x5a8>)
 800d760:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d764:	491e      	ldr	r1, [pc, #120]	; (800d7e0 <tcp_write+0x5c0>)
 800d766:	481a      	ldr	r0, [pc, #104]	; (800d7d0 <tcp_write+0x5b0>)
 800d768:	f005 fa20 	bl	8012bac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	62bb      	str	r3, [r7, #40]	; 0x28
 800d772:	e009      	b.n	800d788 <tcp_write+0x568>
      p->tot_len += extendlen;
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	891a      	ldrh	r2, [r3, #8]
 800d778:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d77a:	4413      	add	r3, r2
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	62bb      	str	r3, [r7, #40]	; 0x28
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1f1      	bne.n	800d774 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	891a      	ldrh	r2, [r3, #8]
 800d794:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d796:	4413      	add	r3, r2
 800d798:	b29a      	uxth	r2, r3
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	895a      	ldrh	r2, [r3, #10]
 800d7a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7a4:	4413      	add	r3, r2
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7ae:	891a      	ldrh	r2, [r3, #8]
 800d7b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d111      	bne.n	800d7e4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7c6:	e010      	b.n	800d7ea <tcp_write+0x5ca>
 800d7c8:	08014d34 	.word	0x08014d34
 800d7cc:	08014fd4 	.word	0x08014fd4
 800d7d0:	08014d88 	.word	0x08014d88
 800d7d4:	08015014 	.word	0x08015014
 800d7d8:	08015024 	.word	0x08015024
 800d7dc:	08015038 	.word	0x08015038
 800d7e0:	08015070 	.word	0x08015070
  } else {
    last_unsent->next = queue;
 800d7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7ee:	88fb      	ldrh	r3, [r7, #6]
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d7fc:	88fb      	ldrh	r3, [r7, #6]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	b29a      	uxth	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d80e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00e      	beq.n	800d83a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <tcp_write+0x61a>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <tcp_write+0x61a>
 800d82c:	4b2c      	ldr	r3, [pc, #176]	; (800d8e0 <tcp_write+0x6c0>)
 800d82e:	f240 3213 	movw	r2, #787	; 0x313
 800d832:	492c      	ldr	r1, [pc, #176]	; (800d8e4 <tcp_write+0x6c4>)
 800d834:	482c      	ldr	r0, [pc, #176]	; (800d8e8 <tcp_write+0x6c8>)
 800d836:	f005 f9b9 	bl	8012bac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d016      	beq.n	800d86e <tcp_write+0x64e>
 800d840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d012      	beq.n	800d86e <tcp_write+0x64e>
 800d848:	797b      	ldrb	r3, [r7, #5]
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10d      	bne.n	800d86e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	899b      	ldrh	r3, [r3, #12]
 800d858:	b29c      	uxth	r4, r3
 800d85a:	2008      	movs	r0, #8
 800d85c:	f7f9 fc2c 	bl	80070b8 <lwip_htons>
 800d860:	4603      	mov	r3, r0
 800d862:	461a      	mov	r2, r3
 800d864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	4322      	orrs	r2, r4
 800d86a:	b292      	uxth	r2, r2
 800d86c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	e031      	b.n	800d8d6 <tcp_write+0x6b6>
          goto memerr;
 800d872:	bf00      	nop
 800d874:	e006      	b.n	800d884 <tcp_write+0x664>
            goto memerr;
 800d876:	bf00      	nop
 800d878:	e004      	b.n	800d884 <tcp_write+0x664>
        goto memerr;
 800d87a:	bf00      	nop
 800d87c:	e002      	b.n	800d884 <tcp_write+0x664>
        goto memerr;
 800d87e:	bf00      	nop
 800d880:	e000      	b.n	800d884 <tcp_write+0x664>
      goto memerr;
 800d882:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8b5b      	ldrh	r3, [r3, #26]
 800d888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <tcp_write+0x67e>
    pbuf_free(concat_p);
 800d898:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d89a:	f7fa ffb5 	bl	8008808 <pbuf_free>
  }
  if (queue != NULL) {
 800d89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <tcp_write+0x68a>
    tcp_segs_free(queue);
 800d8a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8a6:	f7fc fbc9 	bl	800a03c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00e      	beq.n	800d8d2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10a      	bne.n	800d8d2 <tcp_write+0x6b2>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <tcp_write+0x6b2>
 800d8c4:	4b06      	ldr	r3, [pc, #24]	; (800d8e0 <tcp_write+0x6c0>)
 800d8c6:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d8ca:	4906      	ldr	r1, [pc, #24]	; (800d8e4 <tcp_write+0x6c4>)
 800d8cc:	4806      	ldr	r0, [pc, #24]	; (800d8e8 <tcp_write+0x6c8>)
 800d8ce:	f005 f96d 	bl	8012bac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d8d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	375c      	adds	r7, #92	; 0x5c
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd90      	pop	{r4, r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	08014d34 	.word	0x08014d34
 800d8e4:	080150a8 	.word	0x080150a8
 800d8e8:	08014d88 	.word	0x08014d88

0800d8ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d8ec:	b590      	push	{r4, r7, lr}
 800d8ee:	b08b      	sub	sp, #44	; 0x2c
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	61fb      	str	r3, [r7, #28]
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d900:	2300      	movs	r3, #0
 800d902:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d106      	bne.n	800d918 <tcp_split_unsent_seg+0x2c>
 800d90a:	4b95      	ldr	r3, [pc, #596]	; (800db60 <tcp_split_unsent_seg+0x274>)
 800d90c:	f240 324b 	movw	r2, #843	; 0x34b
 800d910:	4994      	ldr	r1, [pc, #592]	; (800db64 <tcp_split_unsent_seg+0x278>)
 800d912:	4895      	ldr	r0, [pc, #596]	; (800db68 <tcp_split_unsent_seg+0x27c>)
 800d914:	f005 f94a 	bl	8012bac <iprintf>

  useg = pcb->unsent;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d91c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d924:	f04f 33ff 	mov.w	r3, #4294967295
 800d928:	e116      	b.n	800db58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d92a:	887b      	ldrh	r3, [r7, #2]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d109      	bne.n	800d944 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d930:	4b8b      	ldr	r3, [pc, #556]	; (800db60 <tcp_split_unsent_seg+0x274>)
 800d932:	f240 3253 	movw	r2, #851	; 0x353
 800d936:	498d      	ldr	r1, [pc, #564]	; (800db6c <tcp_split_unsent_seg+0x280>)
 800d938:	488b      	ldr	r0, [pc, #556]	; (800db68 <tcp_split_unsent_seg+0x27c>)
 800d93a:	f005 f937 	bl	8012bac <iprintf>
    return ERR_VAL;
 800d93e:	f06f 0305 	mvn.w	r3, #5
 800d942:	e109      	b.n	800db58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	891b      	ldrh	r3, [r3, #8]
 800d948:	887a      	ldrh	r2, [r7, #2]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d301      	bcc.n	800d952 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	e102      	b.n	800db58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d956:	887a      	ldrh	r2, [r7, #2]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d906      	bls.n	800d96a <tcp_split_unsent_seg+0x7e>
 800d95c:	4b80      	ldr	r3, [pc, #512]	; (800db60 <tcp_split_unsent_seg+0x274>)
 800d95e:	f240 325b 	movw	r2, #859	; 0x35b
 800d962:	4983      	ldr	r1, [pc, #524]	; (800db70 <tcp_split_unsent_seg+0x284>)
 800d964:	4880      	ldr	r0, [pc, #512]	; (800db68 <tcp_split_unsent_seg+0x27c>)
 800d966:	f005 f921 	bl	8012bac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	891b      	ldrh	r3, [r3, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <tcp_split_unsent_seg+0x94>
 800d972:	4b7b      	ldr	r3, [pc, #492]	; (800db60 <tcp_split_unsent_seg+0x274>)
 800d974:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d978:	497e      	ldr	r1, [pc, #504]	; (800db74 <tcp_split_unsent_seg+0x288>)
 800d97a:	487b      	ldr	r0, [pc, #492]	; (800db68 <tcp_split_unsent_seg+0x27c>)
 800d97c:	f005 f916 	bl	8012bac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	7a9b      	ldrb	r3, [r3, #10]
 800d984:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	891a      	ldrh	r2, [r3, #8]
 800d996:	887b      	ldrh	r3, [r7, #2]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	89bb      	ldrh	r3, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	2036      	movs	r0, #54	; 0x36
 800d9ae:	f7fa fc4b 	bl	8008248 <pbuf_alloc>
 800d9b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 80b7 	beq.w	800db2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	891a      	ldrh	r2, [r3, #8]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	891b      	ldrh	r3, [r3, #8]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	887b      	ldrh	r3, [r7, #2]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	6858      	ldr	r0, [r3, #4]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	18d1      	adds	r1, r2, r3
 800d9dc:	897b      	ldrh	r3, [r7, #10]
 800d9de:	89ba      	ldrh	r2, [r7, #12]
 800d9e0:	f7fb f908 	bl	8008bf4 <pbuf_copy_partial>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	89bb      	ldrh	r3, [r7, #12]
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	f040 809f 	bne.w	800db2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	899b      	ldrh	r3, [r3, #12]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7f9 fb5d 	bl	80070b8 <lwip_htons>
 800d9fe:	4603      	mov	r3, r0
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800da08:	2300      	movs	r3, #0
 800da0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800da0c:	7efb      	ldrb	r3, [r7, #27]
 800da0e:	f003 0308 	and.w	r3, r3, #8
 800da12:	2b00      	cmp	r3, #0
 800da14:	d007      	beq.n	800da26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800da16:	7efb      	ldrb	r3, [r7, #27]
 800da18:	f023 0308 	bic.w	r3, r3, #8
 800da1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da1e:	7ebb      	ldrb	r3, [r7, #26]
 800da20:	f043 0308 	orr.w	r3, r3, #8
 800da24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da26:	7efb      	ldrb	r3, [r7, #27]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d007      	beq.n	800da40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800da30:	7efb      	ldrb	r3, [r7, #27]
 800da32:	f023 0301 	bic.w	r3, r3, #1
 800da36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800da38:	7ebb      	ldrb	r3, [r7, #26]
 800da3a:	f043 0301 	orr.w	r3, r3, #1
 800da3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	4618      	mov	r0, r3
 800da48:	f7f9 fb4b 	bl	80070e2 <lwip_htonl>
 800da4c:	4602      	mov	r2, r0
 800da4e:	887b      	ldrh	r3, [r7, #2]
 800da50:	18d1      	adds	r1, r2, r3
 800da52:	7eba      	ldrb	r2, [r7, #26]
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	460b      	mov	r3, r1
 800da5a:	6939      	ldr	r1, [r7, #16]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff fa4d 	bl	800cefc <tcp_create_segment>
 800da62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d063      	beq.n	800db32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fa ff58 	bl	8008924 <pbuf_clen>
 800da74:	4603      	mov	r3, r0
 800da76:	461a      	mov	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	6858      	ldr	r0, [r3, #4]
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	891a      	ldrh	r2, [r3, #8]
 800da92:	89bb      	ldrh	r3, [r7, #12]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	b29b      	uxth	r3, r3
 800da98:	4619      	mov	r1, r3
 800da9a:	f7fa fd2f 	bl	80084fc <pbuf_realloc>
  useg->len -= remainder;
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	891a      	ldrh	r2, [r3, #8]
 800daa2:	89bb      	ldrh	r3, [r7, #12]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	899b      	ldrh	r3, [r3, #12]
 800dab2:	b29c      	uxth	r4, r3
 800dab4:	7efb      	ldrb	r3, [r7, #27]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f9 fafd 	bl	80070b8 <lwip_htons>
 800dabe:	4603      	mov	r3, r0
 800dac0:	461a      	mov	r2, r3
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	4322      	orrs	r2, r4
 800dac8:	b292      	uxth	r2, r2
 800daca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fa ff27 	bl	8008924 <pbuf_clen>
 800dad6:	4603      	mov	r3, r0
 800dad8:	461a      	mov	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dae0:	4413      	add	r3, r2
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fa ff18 	bl	8008924 <pbuf_clen>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461a      	mov	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dafe:	4413      	add	r3, r2
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d103      	bne.n	800db26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	e016      	b.n	800db58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db2a:	bf00      	nop
 800db2c:	e002      	b.n	800db34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db2e:	bf00      	nop
 800db30:	e000      	b.n	800db34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d006      	beq.n	800db48 <tcp_split_unsent_seg+0x25c>
 800db3a:	4b09      	ldr	r3, [pc, #36]	; (800db60 <tcp_split_unsent_seg+0x274>)
 800db3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800db40:	490d      	ldr	r1, [pc, #52]	; (800db78 <tcp_split_unsent_seg+0x28c>)
 800db42:	4809      	ldr	r0, [pc, #36]	; (800db68 <tcp_split_unsent_seg+0x27c>)
 800db44:	f005 f832 	bl	8012bac <iprintf>
  if (p != NULL) {
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800db4e:	6938      	ldr	r0, [r7, #16]
 800db50:	f7fa fe5a 	bl	8008808 <pbuf_free>
  }

  return ERR_MEM;
 800db54:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3724      	adds	r7, #36	; 0x24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd90      	pop	{r4, r7, pc}
 800db60:	08014d34 	.word	0x08014d34
 800db64:	080150c8 	.word	0x080150c8
 800db68:	08014d88 	.word	0x08014d88
 800db6c:	080150ec 	.word	0x080150ec
 800db70:	08015110 	.word	0x08015110
 800db74:	08015120 	.word	0x08015120
 800db78:	08015130 	.word	0x08015130

0800db7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800db7c:	b590      	push	{r4, r7, lr}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <tcp_send_fin+0x1c>
 800db8a:	4b21      	ldr	r3, [pc, #132]	; (800dc10 <tcp_send_fin+0x94>)
 800db8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800db90:	4920      	ldr	r1, [pc, #128]	; (800dc14 <tcp_send_fin+0x98>)
 800db92:	4821      	ldr	r0, [pc, #132]	; (800dc18 <tcp_send_fin+0x9c>)
 800db94:	f005 f80a 	bl	8012bac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d02e      	beq.n	800dbfe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	e002      	b.n	800dbae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1f8      	bne.n	800dba8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	899b      	ldrh	r3, [r3, #12]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f9 fa7a 	bl	80070b8 <lwip_htons>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 0307 	and.w	r3, r3, #7
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d116      	bne.n	800dbfe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	899b      	ldrh	r3, [r3, #12]
 800dbd6:	b29c      	uxth	r4, r3
 800dbd8:	2001      	movs	r0, #1
 800dbda:	f7f9 fa6d 	bl	80070b8 <lwip_htons>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	4322      	orrs	r2, r4
 800dbe8:	b292      	uxth	r2, r2
 800dbea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	8b5b      	ldrh	r3, [r3, #26]
 800dbf0:	f043 0320 	orr.w	r3, r3, #32
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e004      	b.n	800dc08 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dbfe:	2101      	movs	r1, #1
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f80b 	bl	800dc1c <tcp_enqueue_flags>
 800dc06:	4603      	mov	r3, r0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}
 800dc10:	08014d34 	.word	0x08014d34
 800dc14:	0801513c 	.word	0x0801513c
 800dc18:	08014d88 	.word	0x08014d88

0800dc1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08a      	sub	sp, #40	; 0x28
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d106      	bne.n	800dc48 <tcp_enqueue_flags+0x2c>
 800dc3a:	4b67      	ldr	r3, [pc, #412]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800dc3c:	f240 4212 	movw	r2, #1042	; 0x412
 800dc40:	4966      	ldr	r1, [pc, #408]	; (800dddc <tcp_enqueue_flags+0x1c0>)
 800dc42:	4867      	ldr	r0, [pc, #412]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800dc44:	f004 ffb2 	bl	8012bac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <tcp_enqueue_flags+0x40>
 800dc4e:	4b62      	ldr	r3, [pc, #392]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800dc50:	f240 4213 	movw	r2, #1043	; 0x413
 800dc54:	4963      	ldr	r1, [pc, #396]	; (800dde4 <tcp_enqueue_flags+0x1c8>)
 800dc56:	4862      	ldr	r0, [pc, #392]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800dc58:	f004 ffa8 	bl	8012bac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dc5c:	78fb      	ldrb	r3, [r7, #3]
 800dc5e:	f003 0302 	and.w	r3, r3, #2
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dc66:	2301      	movs	r3, #1
 800dc68:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc6a:	7ffb      	ldrb	r3, [r7, #31]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc7e:	4619      	mov	r1, r3
 800dc80:	2036      	movs	r0, #54	; 0x36
 800dc82:	f7fa fae1 	bl	8008248 <pbuf_alloc>
 800dc86:	6138      	str	r0, [r7, #16]
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d109      	bne.n	800dca2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8b5b      	ldrh	r3, [r3, #26]
 800dc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dca0:	e095      	b.n	800ddce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	895a      	ldrh	r2, [r3, #10]
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d206      	bcs.n	800dcbc <tcp_enqueue_flags+0xa0>
 800dcae:	4b4a      	ldr	r3, [pc, #296]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800dcb0:	f240 423a 	movw	r2, #1082	; 0x43a
 800dcb4:	494c      	ldr	r1, [pc, #304]	; (800dde8 <tcp_enqueue_flags+0x1cc>)
 800dcb6:	484a      	ldr	r0, [pc, #296]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800dcb8:	f004 ff78 	bl	8012bac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	7ffb      	ldrb	r3, [r7, #31]
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	6939      	ldr	r1, [r7, #16]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff f916 	bl	800cefc <tcp_create_segment>
 800dcd0:	60f8      	str	r0, [r7, #12]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d109      	bne.n	800dcec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8b5b      	ldrh	r3, [r3, #26]
 800dcdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcea:	e070      	b.n	800ddce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	f003 0303 	and.w	r3, r3, #3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d006      	beq.n	800dd06 <tcp_enqueue_flags+0xea>
 800dcf8:	4b37      	ldr	r3, [pc, #220]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800dcfa:	f240 4242 	movw	r2, #1090	; 0x442
 800dcfe:	493b      	ldr	r1, [pc, #236]	; (800ddec <tcp_enqueue_flags+0x1d0>)
 800dd00:	4837      	ldr	r0, [pc, #220]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800dd02:	f004 ff53 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	891b      	ldrh	r3, [r3, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d006      	beq.n	800dd1c <tcp_enqueue_flags+0x100>
 800dd0e:	4b32      	ldr	r3, [pc, #200]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800dd10:	f240 4243 	movw	r2, #1091	; 0x443
 800dd14:	4936      	ldr	r1, [pc, #216]	; (800ddf0 <tcp_enqueue_flags+0x1d4>)
 800dd16:	4832      	ldr	r0, [pc, #200]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800dd18:	f004 ff48 	bl	8012bac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d103      	bne.n	800dd2c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd2a:	e00d      	b.n	800dd48 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd30:	61bb      	str	r3, [r7, #24]
 800dd32:	e002      	b.n	800dd3a <tcp_enqueue_flags+0x11e>
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f8      	bne.n	800dd34 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	f003 0302 	and.w	r3, r3, #2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <tcp_enqueue_flags+0x148>
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d004      	beq.n	800dd6e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd6e:	78fb      	ldrb	r3, [r7, #3]
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d006      	beq.n	800dd86 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8b5b      	ldrh	r3, [r3, #26]
 800dd7c:	f043 0320 	orr.w	r3, r3, #32
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fa fdca 	bl	8008924 <pbuf_clen>
 800dd90:	4603      	mov	r3, r0
 800dd92:	461a      	mov	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd9a:	4413      	add	r3, r2
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00e      	beq.n	800ddcc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10a      	bne.n	800ddcc <tcp_enqueue_flags+0x1b0>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <tcp_enqueue_flags+0x1b0>
 800ddbe:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <tcp_enqueue_flags+0x1bc>)
 800ddc0:	f240 4266 	movw	r2, #1126	; 0x466
 800ddc4:	490b      	ldr	r1, [pc, #44]	; (800ddf4 <tcp_enqueue_flags+0x1d8>)
 800ddc6:	4806      	ldr	r0, [pc, #24]	; (800dde0 <tcp_enqueue_flags+0x1c4>)
 800ddc8:	f004 fef0 	bl	8012bac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3720      	adds	r7, #32
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	08014d34 	.word	0x08014d34
 800dddc:	08015158 	.word	0x08015158
 800dde0:	08014d88 	.word	0x08014d88
 800dde4:	080151b0 	.word	0x080151b0
 800dde8:	080151d0 	.word	0x080151d0
 800ddec:	0801520c 	.word	0x0801520c
 800ddf0:	08015224 	.word	0x08015224
 800ddf4:	08015250 	.word	0x08015250

0800ddf8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ddf8:	b5b0      	push	{r4, r5, r7, lr}
 800ddfa:	b08a      	sub	sp, #40	; 0x28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <tcp_output+0x1c>
 800de06:	4ba0      	ldr	r3, [pc, #640]	; (800e088 <tcp_output+0x290>)
 800de08:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800de0c:	499f      	ldr	r1, [pc, #636]	; (800e08c <tcp_output+0x294>)
 800de0e:	48a0      	ldr	r0, [pc, #640]	; (800e090 <tcp_output+0x298>)
 800de10:	f004 fecc 	bl	8012bac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d106      	bne.n	800de2a <tcp_output+0x32>
 800de1c:	4b9a      	ldr	r3, [pc, #616]	; (800e088 <tcp_output+0x290>)
 800de1e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800de22:	499c      	ldr	r1, [pc, #624]	; (800e094 <tcp_output+0x29c>)
 800de24:	489a      	ldr	r0, [pc, #616]	; (800e090 <tcp_output+0x298>)
 800de26:	f004 fec1 	bl	8012bac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de2a:	4b9b      	ldr	r3, [pc, #620]	; (800e098 <tcp_output+0x2a0>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	d101      	bne.n	800de38 <tcp_output+0x40>
    return ERR_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	e1d2      	b.n	800e1de <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de44:	429a      	cmp	r2, r3
 800de46:	d203      	bcs.n	800de50 <tcp_output+0x58>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de4e:	e002      	b.n	800de56 <tcp_output+0x5e>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de56:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10b      	bne.n	800de7c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	8b5b      	ldrh	r3, [r3, #26]
 800de68:	f003 0302 	and.w	r3, r3, #2
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 81a9 	beq.w	800e1c4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fdd8 	bl	800ea28 <tcp_send_empty_ack>
 800de78:	4603      	mov	r3, r0
 800de7a:	e1b0      	b.n	800e1de <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3304      	adds	r3, #4
 800de82:	461a      	mov	r2, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff f81d 	bl	800cec4 <tcp_route>
 800de8a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <tcp_output+0xa0>
    return ERR_RTE;
 800de92:	f06f 0303 	mvn.w	r3, #3
 800de96:	e1a2      	b.n	800e1de <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <tcp_output+0xae>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d111      	bne.n	800deca <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <tcp_output+0xba>
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	3304      	adds	r3, #4
 800deb0:	e000      	b.n	800deb4 <tcp_output+0xbc>
 800deb2:	2300      	movs	r3, #0
 800deb4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <tcp_output+0xca>
      return ERR_RTE;
 800debc:	f06f 0303 	mvn.w	r3, #3
 800dec0:	e18d      	b.n	800e1de <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7f9 f906 	bl	80070e2 <lwip_htonl>
 800ded6:	4602      	mov	r2, r0
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee0:	8912      	ldrh	r2, [r2, #8]
 800dee2:	4413      	add	r3, r2
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d227      	bcs.n	800df3a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800def0:	461a      	mov	r2, r3
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	4293      	cmp	r3, r2
 800def6:	d114      	bne.n	800df22 <tcp_output+0x12a>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defc:	2b00      	cmp	r3, #0
 800defe:	d110      	bne.n	800df22 <tcp_output+0x12a>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10b      	bne.n	800df22 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	8b5b      	ldrh	r3, [r3, #26]
 800df26:	f003 0302 	and.w	r3, r3, #2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 814c 	beq.w	800e1c8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fd79 	bl	800ea28 <tcp_send_empty_ack>
 800df36:	4603      	mov	r3, r0
 800df38:	e151      	b.n	800e1de <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df46:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 811b 	beq.w	800e186 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800df50:	e002      	b.n	800df58 <tcp_output+0x160>
 800df52:	6a3b      	ldr	r3, [r7, #32]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	623b      	str	r3, [r7, #32]
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1f8      	bne.n	800df52 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800df60:	e111      	b.n	800e186 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	899b      	ldrh	r3, [r3, #12]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7f9 f8a4 	bl	80070b8 <lwip_htons>
 800df70:	4603      	mov	r3, r0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 0304 	and.w	r3, r3, #4
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d006      	beq.n	800df8a <tcp_output+0x192>
 800df7c:	4b42      	ldr	r3, [pc, #264]	; (800e088 <tcp_output+0x290>)
 800df7e:	f240 5237 	movw	r2, #1335	; 0x537
 800df82:	4946      	ldr	r1, [pc, #280]	; (800e09c <tcp_output+0x2a4>)
 800df84:	4842      	ldr	r0, [pc, #264]	; (800e090 <tcp_output+0x298>)
 800df86:	f004 fe11 	bl	8012bac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d01f      	beq.n	800dfd2 <tcp_output+0x1da>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	8b5b      	ldrh	r3, [r3, #26]
 800df96:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d119      	bne.n	800dfd2 <tcp_output+0x1da>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <tcp_output+0x1c6>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d110      	bne.n	800dfd2 <tcp_output+0x1da>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb4:	891a      	ldrh	r2, [r3, #8]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d209      	bcs.n	800dfd2 <tcp_output+0x1da>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d004      	beq.n	800dfd2 <tcp_output+0x1da>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfce:	2b08      	cmp	r3, #8
 800dfd0:	d901      	bls.n	800dfd6 <tcp_output+0x1de>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e000      	b.n	800dfd8 <tcp_output+0x1e0>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d106      	bne.n	800dfea <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	8b5b      	ldrh	r3, [r3, #26]
 800dfe0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80e3 	beq.w	800e1b0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	7d1b      	ldrb	r3, [r3, #20]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d00d      	beq.n	800e00e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	899b      	ldrh	r3, [r3, #12]
 800dff8:	b29c      	uxth	r4, r3
 800dffa:	2010      	movs	r0, #16
 800dffc:	f7f9 f85c 	bl	80070b8 <lwip_htons>
 800e000:	4603      	mov	r3, r0
 800e002:	461a      	mov	r2, r3
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	4322      	orrs	r2, r4
 800e00a:	b292      	uxth	r2, r2
 800e00c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	6879      	ldr	r1, [r7, #4]
 800e012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e014:	f000 f908 	bl	800e228 <tcp_output_segment>
 800e018:	4603      	mov	r3, r0
 800e01a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d009      	beq.n	800e038 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	8b5b      	ldrh	r3, [r3, #26]
 800e028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	835a      	strh	r2, [r3, #26]
      return err;
 800e032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e036:	e0d2      	b.n	800e1de <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	2b02      	cmp	r3, #2
 800e046:	d006      	beq.n	800e056 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	8b5b      	ldrh	r3, [r3, #26]
 800e04c:	f023 0303 	bic.w	r3, r3, #3
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f9 f840 	bl	80070e2 <lwip_htonl>
 800e062:	4604      	mov	r4, r0
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	891b      	ldrh	r3, [r3, #8]
 800e068:	461d      	mov	r5, r3
 800e06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	899b      	ldrh	r3, [r3, #12]
 800e070:	b29b      	uxth	r3, r3
 800e072:	4618      	mov	r0, r3
 800e074:	f7f9 f820 	bl	80070b8 <lwip_htons>
 800e078:	4603      	mov	r3, r0
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00d      	beq.n	800e0a0 <tcp_output+0x2a8>
 800e084:	2301      	movs	r3, #1
 800e086:	e00c      	b.n	800e0a2 <tcp_output+0x2aa>
 800e088:	08014d34 	.word	0x08014d34
 800e08c:	08015278 	.word	0x08015278
 800e090:	08014d88 	.word	0x08014d88
 800e094:	08015290 	.word	0x08015290
 800e098:	2000f81c 	.word	0x2000f81c
 800e09c:	080152b8 	.word	0x080152b8
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	442b      	add	r3, r5
 800e0a4:	4423      	add	r3, r4
 800e0a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	da02      	bge.n	800e0ba <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	891b      	ldrh	r3, [r3, #8]
 800e0be:	461c      	mov	r4, r3
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	899b      	ldrh	r3, [r3, #12]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7f8 fff5 	bl	80070b8 <lwip_htons>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <tcp_output+0x2e6>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e000      	b.n	800e0e0 <tcp_output+0x2e8>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	4423      	add	r3, r4
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d049      	beq.n	800e17a <tcp_output+0x382>
      seg->next = NULL;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d105      	bne.n	800e100 <tcp_output+0x308>
        pcb->unacked = seg;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	623b      	str	r3, [r7, #32]
 800e0fe:	e03f      	b.n	800e180 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	4618      	mov	r0, r3
 800e108:	f7f8 ffeb 	bl	80070e2 <lwip_htonl>
 800e10c:	4604      	mov	r4, r0
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	f7f8 ffe4 	bl	80070e2 <lwip_htonl>
 800e11a:	4603      	mov	r3, r0
 800e11c:	1ae3      	subs	r3, r4, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	da24      	bge.n	800e16c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3370      	adds	r3, #112	; 0x70
 800e126:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e128:	e002      	b.n	800e130 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d011      	beq.n	800e15c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	f7f8 ffce 	bl	80070e2 <lwip_htonl>
 800e146:	4604      	mov	r4, r0
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	4618      	mov	r0, r3
 800e150:	f7f8 ffc7 	bl	80070e2 <lwip_htonl>
 800e154:	4603      	mov	r3, r0
 800e156:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dbe6      	blt.n	800e12a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	e009      	b.n	800e180 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e170:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	623b      	str	r3, [r7, #32]
 800e178:	e002      	b.n	800e180 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e17a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e17c:	f7fb ff72 	bl	800a064 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d012      	beq.n	800e1b2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	4618      	mov	r0, r3
 800e194:	f7f8 ffa5 	bl	80070e2 <lwip_htonl>
 800e198:	4602      	mov	r2, r0
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a2:	8912      	ldrh	r2, [r2, #8]
 800e1a4:	4413      	add	r3, r2
  while (seg != NULL &&
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	f4bf aeda 	bcs.w	800df62 <tcp_output+0x16a>
 800e1ae:	e000      	b.n	800e1b2 <tcp_output+0x3ba>
      break;
 800e1b0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d108      	bne.n	800e1cc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e1c2:	e004      	b.n	800e1ce <tcp_output+0x3d6>
    goto output_done;
 800e1c4:	bf00      	nop
 800e1c6:	e002      	b.n	800e1ce <tcp_output+0x3d6>
    goto output_done;
 800e1c8:	bf00      	nop
 800e1ca:	e000      	b.n	800e1ce <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e1cc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	8b5b      	ldrh	r3, [r3, #26]
 800e1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3728      	adds	r7, #40	; 0x28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e1e6:	bf00      	nop

0800e1e8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <tcp_output_segment_busy+0x1c>
 800e1f6:	4b09      	ldr	r3, [pc, #36]	; (800e21c <tcp_output_segment_busy+0x34>)
 800e1f8:	f240 529a 	movw	r2, #1434	; 0x59a
 800e1fc:	4908      	ldr	r1, [pc, #32]	; (800e220 <tcp_output_segment_busy+0x38>)
 800e1fe:	4809      	ldr	r0, [pc, #36]	; (800e224 <tcp_output_segment_busy+0x3c>)
 800e200:	f004 fcd4 	bl	8012bac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	7b9b      	ldrb	r3, [r3, #14]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d001      	beq.n	800e212 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e20e:	2301      	movs	r3, #1
 800e210:	e000      	b.n	800e214 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	08014d34 	.word	0x08014d34
 800e220:	080152d0 	.word	0x080152d0
 800e224:	08014d88 	.word	0x08014d88

0800e228 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e228:	b5b0      	push	{r4, r5, r7, lr}
 800e22a:	b08c      	sub	sp, #48	; 0x30
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_output_segment+0x20>
 800e23a:	4b64      	ldr	r3, [pc, #400]	; (800e3cc <tcp_output_segment+0x1a4>)
 800e23c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e240:	4963      	ldr	r1, [pc, #396]	; (800e3d0 <tcp_output_segment+0x1a8>)
 800e242:	4864      	ldr	r0, [pc, #400]	; (800e3d4 <tcp_output_segment+0x1ac>)
 800e244:	f004 fcb2 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <tcp_output_segment+0x34>
 800e24e:	4b5f      	ldr	r3, [pc, #380]	; (800e3cc <tcp_output_segment+0x1a4>)
 800e250:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e254:	4960      	ldr	r1, [pc, #384]	; (800e3d8 <tcp_output_segment+0x1b0>)
 800e256:	485f      	ldr	r0, [pc, #380]	; (800e3d4 <tcp_output_segment+0x1ac>)
 800e258:	f004 fca8 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_output_segment+0x48>
 800e262:	4b5a      	ldr	r3, [pc, #360]	; (800e3cc <tcp_output_segment+0x1a4>)
 800e264:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e268:	495c      	ldr	r1, [pc, #368]	; (800e3dc <tcp_output_segment+0x1b4>)
 800e26a:	485a      	ldr	r0, [pc, #360]	; (800e3d4 <tcp_output_segment+0x1ac>)
 800e26c:	f004 fc9e 	bl	8012bac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7ff ffb9 	bl	800e1e8 <tcp_output_segment_busy>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e0a0      	b.n	800e3c2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68dc      	ldr	r4, [r3, #12]
 800e288:	4610      	mov	r0, r2
 800e28a:	f7f8 ff2a 	bl	80070e2 <lwip_htonl>
 800e28e:	4603      	mov	r3, r0
 800e290:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68dc      	ldr	r4, [r3, #12]
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7f8 ff0c 	bl	80070b8 <lwip_htons>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e2ac:	441a      	add	r2, r3
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	3314      	adds	r3, #20
 800e2b8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	7a9b      	ldrb	r3, [r3, #10]
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d015      	beq.n	800e2f2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e2d2:	f7fc fa33 	bl	800a73c <tcp_eff_send_mss_netif>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2da:	8b7b      	ldrh	r3, [r7, #26]
 800e2dc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f8 fefe 	bl	80070e2 <lwip_htonl>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da02      	bge.n	800e302 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	2200      	movs	r2, #0
 800e300:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10c      	bne.n	800e324 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e30a:	4b35      	ldr	r3, [pc, #212]	; (800e3e0 <tcp_output_segment+0x1b8>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	4618      	mov	r0, r3
 800e31a:	f7f8 fee2 	bl	80070e2 <lwip_htonl>
 800e31e:	4602      	mov	r2, r0
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	461a      	mov	r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	8959      	ldrh	r1, [r3, #10]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	8b3a      	ldrh	r2, [r7, #24]
 800e340:	1a8a      	subs	r2, r1, r2
 800e342:	b292      	uxth	r2, r2
 800e344:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	8919      	ldrh	r1, [r3, #8]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	8b3a      	ldrh	r2, [r7, #24]
 800e352:	1a8a      	subs	r2, r1, r2
 800e354:	b292      	uxth	r2, r2
 800e356:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	68d2      	ldr	r2, [r2, #12]
 800e360:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	741a      	strb	r2, [r3, #16]
 800e36a:	2200      	movs	r2, #0
 800e36c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f103 0214 	add.w	r2, r3, #20
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	7a9b      	ldrb	r3, [r3, #10]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	f003 0304 	and.w	r3, r3, #4
 800e380:	4413      	add	r3, r2
 800e382:	69fa      	ldr	r2, [r7, #28]
 800e384:	429a      	cmp	r2, r3
 800e386:	d006      	beq.n	800e396 <tcp_output_segment+0x16e>
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <tcp_output_segment+0x1a4>)
 800e38a:	f240 621c 	movw	r2, #1564	; 0x61c
 800e38e:	4915      	ldr	r1, [pc, #84]	; (800e3e4 <tcp_output_segment+0x1bc>)
 800e390:	4810      	ldr	r0, [pc, #64]	; (800e3d4 <tcp_output_segment+0x1ac>)
 800e392:	f004 fc0b 	bl	8012bac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6858      	ldr	r0, [r3, #4]
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	1d1c      	adds	r4, r3, #4
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	7add      	ldrb	r5, [r3, #11]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	7a9b      	ldrb	r3, [r3, #10]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	9202      	str	r2, [sp, #8]
 800e3ac:	2206      	movs	r2, #6
 800e3ae:	9201      	str	r2, [sp, #4]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	f002 fa6f 	bl	8010898 <ip4_output_if>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	08014d34 	.word	0x08014d34
 800e3d0:	080152f8 	.word	0x080152f8
 800e3d4:	08014d88 	.word	0x08014d88
 800e3d8:	08015318 	.word	0x08015318
 800e3dc:	08015338 	.word	0x08015338
 800e3e0:	2000f80c 	.word	0x2000f80c
 800e3e4:	0801535c 	.word	0x0801535c

0800e3e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e3e8:	b5b0      	push	{r4, r5, r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <tcp_rexmit_rto_prepare+0x1c>
 800e3f6:	4b31      	ldr	r3, [pc, #196]	; (800e4bc <tcp_rexmit_rto_prepare+0xd4>)
 800e3f8:	f240 6263 	movw	r2, #1635	; 0x663
 800e3fc:	4930      	ldr	r1, [pc, #192]	; (800e4c0 <tcp_rexmit_rto_prepare+0xd8>)
 800e3fe:	4831      	ldr	r0, [pc, #196]	; (800e4c4 <tcp_rexmit_rto_prepare+0xdc>)
 800e400:	f004 fbd4 	bl	8012bac <iprintf>

  if (pcb->unacked == NULL) {
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d102      	bne.n	800e412 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e40c:	f06f 0305 	mvn.w	r3, #5
 800e410:	e050      	b.n	800e4b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e416:	60fb      	str	r3, [r7, #12]
 800e418:	e00b      	b.n	800e432 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7ff fee4 	bl	800e1e8 <tcp_output_segment_busy>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e426:	f06f 0305 	mvn.w	r3, #5
 800e42a:	e043      	b.n	800e4b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1ef      	bne.n	800e41a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f7ff fed4 	bl	800e1e8 <tcp_output_segment_busy>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e446:	f06f 0305 	mvn.w	r3, #5
 800e44a:	e033      	b.n	800e4b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8b5b      	ldrh	r3, [r3, #26]
 800e466:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	4618      	mov	r0, r3
 800e478:	f7f8 fe33 	bl	80070e2 <lwip_htonl>
 800e47c:	4604      	mov	r4, r0
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	891b      	ldrh	r3, [r3, #8]
 800e482:	461d      	mov	r5, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	899b      	ldrh	r3, [r3, #12]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f8 fe13 	bl	80070b8 <lwip_htons>
 800e492:	4603      	mov	r3, r0
 800e494:	b2db      	uxtb	r3, r3
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <tcp_rexmit_rto_prepare+0xba>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e000      	b.n	800e4a4 <tcp_rexmit_rto_prepare+0xbc>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	442b      	add	r3, r5
 800e4a6:	18e2      	adds	r2, r4, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e4bc:	08014d34 	.word	0x08014d34
 800e4c0:	08015370 	.word	0x08015370
 800e4c4:	08014d88 	.word	0x08014d88

0800e4c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <tcp_rexmit_rto_commit+0x1c>
 800e4d6:	4b0d      	ldr	r3, [pc, #52]	; (800e50c <tcp_rexmit_rto_commit+0x44>)
 800e4d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4dc:	490c      	ldr	r1, [pc, #48]	; (800e510 <tcp_rexmit_rto_commit+0x48>)
 800e4de:	480d      	ldr	r0, [pc, #52]	; (800e514 <tcp_rexmit_rto_commit+0x4c>)
 800e4e0:	f004 fb64 	bl	8012bac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4ea:	2bff      	cmp	r3, #255	; 0xff
 800e4ec:	d007      	beq.n	800e4fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff fc7a 	bl	800ddf8 <tcp_output>
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	08014d34 	.word	0x08014d34
 800e510:	08015394 	.word	0x08015394
 800e514:	08014d88 	.word	0x08014d88

0800e518 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <tcp_rexmit_rto+0x1c>
 800e526:	4b0a      	ldr	r3, [pc, #40]	; (800e550 <tcp_rexmit_rto+0x38>)
 800e528:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e52c:	4909      	ldr	r1, [pc, #36]	; (800e554 <tcp_rexmit_rto+0x3c>)
 800e52e:	480a      	ldr	r0, [pc, #40]	; (800e558 <tcp_rexmit_rto+0x40>)
 800e530:	f004 fb3c 	bl	8012bac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ff57 	bl	800e3e8 <tcp_rexmit_rto_prepare>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff ffc1 	bl	800e4c8 <tcp_rexmit_rto_commit>
  }
}
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	08014d34 	.word	0x08014d34
 800e554:	080153b8 	.word	0x080153b8
 800e558:	08014d88 	.word	0x08014d88

0800e55c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d106      	bne.n	800e578 <tcp_rexmit+0x1c>
 800e56a:	4b2f      	ldr	r3, [pc, #188]	; (800e628 <tcp_rexmit+0xcc>)
 800e56c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e570:	492e      	ldr	r1, [pc, #184]	; (800e62c <tcp_rexmit+0xd0>)
 800e572:	482f      	ldr	r0, [pc, #188]	; (800e630 <tcp_rexmit+0xd4>)
 800e574:	f004 fb1a 	bl	8012bac <iprintf>

  if (pcb->unacked == NULL) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e580:	f06f 0305 	mvn.w	r3, #5
 800e584:	e04c      	b.n	800e620 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e58c:	68b8      	ldr	r0, [r7, #8]
 800e58e:	f7ff fe2b 	bl	800e1e8 <tcp_output_segment_busy>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e598:	f06f 0305 	mvn.w	r3, #5
 800e59c:	e040      	b.n	800e620 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	336c      	adds	r3, #108	; 0x6c
 800e5aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5ac:	e002      	b.n	800e5b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d011      	beq.n	800e5e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7f8 fd8c 	bl	80070e2 <lwip_htonl>
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7f8 fd85 	bl	80070e2 <lwip_htonl>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dbe6      	blt.n	800e5ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d103      	bne.n	800e5fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e604:	2bff      	cmp	r3, #255	; 0xff
 800e606:	d007      	beq.n	800e618 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e60e:	3301      	adds	r3, #1
 800e610:	b2da      	uxtb	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	bd90      	pop	{r4, r7, pc}
 800e628:	08014d34 	.word	0x08014d34
 800e62c:	080153d4 	.word	0x080153d4
 800e630:	08014d88 	.word	0x08014d88

0800e634 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <tcp_rexmit_fast+0x1c>
 800e642:	4b2f      	ldr	r3, [pc, #188]	; (800e700 <tcp_rexmit_fast+0xcc>)
 800e644:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e648:	492e      	ldr	r1, [pc, #184]	; (800e704 <tcp_rexmit_fast+0xd0>)
 800e64a:	482f      	ldr	r0, [pc, #188]	; (800e708 <tcp_rexmit_fast+0xd4>)
 800e64c:	f004 faae 	bl	8012bac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e654:	2b00      	cmp	r3, #0
 800e656:	d04f      	beq.n	800e6f8 <tcp_rexmit_fast+0xc4>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	8b5b      	ldrh	r3, [r3, #26]
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d149      	bne.n	800e6f8 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff ff79 	bl	800e55c <tcp_rexmit>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d143      	bne.n	800e6f8 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d208      	bcs.n	800e692 <tcp_rexmit_fast+0x5e>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e686:	2b00      	cmp	r3, #0
 800e688:	da00      	bge.n	800e68c <tcp_rexmit_fast+0x58>
 800e68a:	3301      	adds	r3, #1
 800e68c:	105b      	asrs	r3, r3, #1
 800e68e:	b29b      	uxth	r3, r3
 800e690:	e007      	b.n	800e6a2 <tcp_rexmit_fast+0x6e>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e698:	2b00      	cmp	r3, #0
 800e69a:	da00      	bge.n	800e69e <tcp_rexmit_fast+0x6a>
 800e69c:	3301      	adds	r3, #1
 800e69e:	105b      	asrs	r3, r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b4:	005b      	lsls	r3, r3, #1
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d206      	bcs.n	800e6c8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	0049      	lsls	r1, r1, #1
 800e6d6:	440b      	add	r3, r1
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	4413      	add	r3, r2
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	8b5b      	ldrh	r3, [r3, #26]
 800e6e8:	f043 0304 	orr.w	r3, r3, #4
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	08014d34 	.word	0x08014d34
 800e704:	080153ec 	.word	0x080153ec
 800e708:	08014d88 	.word	0x08014d88

0800e70c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	817b      	strh	r3, [r7, #10]
 800e71a:	4613      	mov	r3, r2
 800e71c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e71e:	897a      	ldrh	r2, [r7, #10]
 800e720:	893b      	ldrh	r3, [r7, #8]
 800e722:	4413      	add	r3, r2
 800e724:	b29b      	uxth	r3, r3
 800e726:	3314      	adds	r3, #20
 800e728:	b29b      	uxth	r3, r3
 800e72a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e72e:	4619      	mov	r1, r3
 800e730:	2022      	movs	r0, #34	; 0x22
 800e732:	f7f9 fd89 	bl	8008248 <pbuf_alloc>
 800e736:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d04e      	beq.n	800e7dc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	895b      	ldrh	r3, [r3, #10]
 800e742:	461a      	mov	r2, r3
 800e744:	897b      	ldrh	r3, [r7, #10]
 800e746:	3314      	adds	r3, #20
 800e748:	429a      	cmp	r2, r3
 800e74a:	da06      	bge.n	800e75a <tcp_output_alloc_header_common+0x4e>
 800e74c:	4b26      	ldr	r3, [pc, #152]	; (800e7e8 <tcp_output_alloc_header_common+0xdc>)
 800e74e:	f240 7224 	movw	r2, #1828	; 0x724
 800e752:	4926      	ldr	r1, [pc, #152]	; (800e7ec <tcp_output_alloc_header_common+0xe0>)
 800e754:	4826      	ldr	r0, [pc, #152]	; (800e7f0 <tcp_output_alloc_header_common+0xe4>)
 800e756:	f004 fa29 	bl	8012bac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e760:	8c3b      	ldrh	r3, [r7, #32]
 800e762:	4618      	mov	r0, r3
 800e764:	f7f8 fca8 	bl	80070b8 <lwip_htons>
 800e768:	4603      	mov	r3, r0
 800e76a:	461a      	mov	r2, r3
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e772:	4618      	mov	r0, r3
 800e774:	f7f8 fca0 	bl	80070b8 <lwip_htons>
 800e778:	4603      	mov	r3, r0
 800e77a:	461a      	mov	r2, r3
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7f8 fcab 	bl	80070e2 <lwip_htonl>
 800e78c:	4602      	mov	r2, r0
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	089b      	lsrs	r3, r3, #2
 800e796:	b29b      	uxth	r3, r3
 800e798:	3305      	adds	r3, #5
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	031b      	lsls	r3, r3, #12
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f8 fc84 	bl	80070b8 <lwip_htons>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e7b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f8 fc7c 	bl	80070b8 <lwip_htons>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	741a      	strb	r2, [r3, #16]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	749a      	strb	r2, [r3, #18]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e7dc:	697b      	ldr	r3, [r7, #20]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	08014d34 	.word	0x08014d34
 800e7ec:	0801540c 	.word	0x0801540c
 800e7f0:	08014d88 	.word	0x08014d88

0800e7f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e7f4:	b5b0      	push	{r4, r5, r7, lr}
 800e7f6:	b08a      	sub	sp, #40	; 0x28
 800e7f8:	af04      	add	r7, sp, #16
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	607b      	str	r3, [r7, #4]
 800e7fe:	460b      	mov	r3, r1
 800e800:	817b      	strh	r3, [r7, #10]
 800e802:	4613      	mov	r3, r2
 800e804:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d106      	bne.n	800e81a <tcp_output_alloc_header+0x26>
 800e80c:	4b15      	ldr	r3, [pc, #84]	; (800e864 <tcp_output_alloc_header+0x70>)
 800e80e:	f240 7242 	movw	r2, #1858	; 0x742
 800e812:	4915      	ldr	r1, [pc, #84]	; (800e868 <tcp_output_alloc_header+0x74>)
 800e814:	4815      	ldr	r0, [pc, #84]	; (800e86c <tcp_output_alloc_header+0x78>)
 800e816:	f004 f9c9 	bl	8012bac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	8adb      	ldrh	r3, [r3, #22]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	8b12      	ldrh	r2, [r2, #24]
 800e826:	68f9      	ldr	r1, [r7, #12]
 800e828:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e82a:	893d      	ldrh	r5, [r7, #8]
 800e82c:	897c      	ldrh	r4, [r7, #10]
 800e82e:	9103      	str	r1, [sp, #12]
 800e830:	2110      	movs	r1, #16
 800e832:	9102      	str	r1, [sp, #8]
 800e834:	9201      	str	r2, [sp, #4]
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	462a      	mov	r2, r5
 800e83c:	4621      	mov	r1, r4
 800e83e:	f7ff ff65 	bl	800e70c <tcp_output_alloc_header_common>
 800e842:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d006      	beq.n	800e858 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e852:	441a      	add	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e858:	697b      	ldr	r3, [r7, #20]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bdb0      	pop	{r4, r5, r7, pc}
 800e862:	bf00      	nop
 800e864:	08014d34 	.word	0x08014d34
 800e868:	0801543c 	.word	0x0801543c
 800e86c:	08014d88 	.word	0x08014d88

0800e870 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	4611      	mov	r1, r2
 800e87c:	461a      	mov	r2, r3
 800e87e:	460b      	mov	r3, r1
 800e880:	71fb      	strb	r3, [r7, #7]
 800e882:	4613      	mov	r3, r2
 800e884:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d106      	bne.n	800e89e <tcp_output_fill_options+0x2e>
 800e890:	4b13      	ldr	r3, [pc, #76]	; (800e8e0 <tcp_output_fill_options+0x70>)
 800e892:	f240 7256 	movw	r2, #1878	; 0x756
 800e896:	4913      	ldr	r1, [pc, #76]	; (800e8e4 <tcp_output_fill_options+0x74>)
 800e898:	4813      	ldr	r0, [pc, #76]	; (800e8e8 <tcp_output_fill_options+0x78>)
 800e89a:	f004 f987 	bl	8012bac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	f103 0214 	add.w	r2, r3, #20
 800e8b0:	8bfb      	ldrh	r3, [r7, #30]
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	f003 0304 	and.w	r3, r3, #4
 800e8be:	440b      	add	r3, r1
 800e8c0:	4413      	add	r3, r2
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d006      	beq.n	800e8d6 <tcp_output_fill_options+0x66>
 800e8c8:	4b05      	ldr	r3, [pc, #20]	; (800e8e0 <tcp_output_fill_options+0x70>)
 800e8ca:	f240 7275 	movw	r2, #1909	; 0x775
 800e8ce:	4907      	ldr	r1, [pc, #28]	; (800e8ec <tcp_output_fill_options+0x7c>)
 800e8d0:	4805      	ldr	r0, [pc, #20]	; (800e8e8 <tcp_output_fill_options+0x78>)
 800e8d2:	f004 f96b 	bl	8012bac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e8d6:	bf00      	nop
 800e8d8:	3720      	adds	r7, #32
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	08014d34 	.word	0x08014d34
 800e8e4:	08015464 	.word	0x08015464
 800e8e8:	08014d88 	.word	0x08014d88
 800e8ec:	0801535c 	.word	0x0801535c

0800e8f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08a      	sub	sp, #40	; 0x28
 800e8f4:	af04      	add	r7, sp, #16
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <tcp_output_control_segment+0x22>
 800e904:	4b1c      	ldr	r3, [pc, #112]	; (800e978 <tcp_output_control_segment+0x88>)
 800e906:	f240 7287 	movw	r2, #1927	; 0x787
 800e90a:	491c      	ldr	r1, [pc, #112]	; (800e97c <tcp_output_control_segment+0x8c>)
 800e90c:	481c      	ldr	r0, [pc, #112]	; (800e980 <tcp_output_control_segment+0x90>)
 800e90e:	f004 f94d 	bl	8012bac <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	6879      	ldr	r1, [r7, #4]
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f7fe fad4 	bl	800cec4 <tcp_route>
 800e91c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d102      	bne.n	800e92a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e924:	23fc      	movs	r3, #252	; 0xfc
 800e926:	75fb      	strb	r3, [r7, #23]
 800e928:	e01c      	b.n	800e964 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d006      	beq.n	800e93e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	7adb      	ldrb	r3, [r3, #11]
 800e934:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	7a9b      	ldrb	r3, [r3, #10]
 800e93a:	757b      	strb	r3, [r7, #21]
 800e93c:	e003      	b.n	800e946 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e93e:	23ff      	movs	r3, #255	; 0xff
 800e940:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e942:	2300      	movs	r3, #0
 800e944:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e946:	7dba      	ldrb	r2, [r7, #22]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	9302      	str	r3, [sp, #8]
 800e94c:	2306      	movs	r3, #6
 800e94e:	9301      	str	r3, [sp, #4]
 800e950:	7d7b      	ldrb	r3, [r7, #21]
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	4613      	mov	r3, r2
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	6879      	ldr	r1, [r7, #4]
 800e95a:	68b8      	ldr	r0, [r7, #8]
 800e95c:	f001 ff9c 	bl	8010898 <ip4_output_if>
 800e960:	4603      	mov	r3, r0
 800e962:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e964:	68b8      	ldr	r0, [r7, #8]
 800e966:	f7f9 ff4f 	bl	8008808 <pbuf_free>
  return err;
 800e96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	08014d34 	.word	0x08014d34
 800e97c:	0801548c 	.word	0x0801548c
 800e980:	08014d88 	.word	0x08014d88

0800e984 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b08b      	sub	sp, #44	; 0x2c
 800e988:	af04      	add	r7, sp, #16
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <tcp_rst+0x22>
 800e998:	4b1f      	ldr	r3, [pc, #124]	; (800ea18 <tcp_rst+0x94>)
 800e99a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e99e:	491f      	ldr	r1, [pc, #124]	; (800ea1c <tcp_rst+0x98>)
 800e9a0:	481f      	ldr	r0, [pc, #124]	; (800ea20 <tcp_rst+0x9c>)
 800e9a2:	f004 f903 	bl	8012bac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d106      	bne.n	800e9ba <tcp_rst+0x36>
 800e9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ea18 <tcp_rst+0x94>)
 800e9ae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e9b2:	491c      	ldr	r1, [pc, #112]	; (800ea24 <tcp_rst+0xa0>)
 800e9b4:	481a      	ldr	r0, [pc, #104]	; (800ea20 <tcp_rst+0x9c>)
 800e9b6:	f004 f8f9 	bl	8012bac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e9be:	f246 0308 	movw	r3, #24584	; 0x6008
 800e9c2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e9c4:	7dfb      	ldrb	r3, [r7, #23]
 800e9c6:	b29c      	uxth	r4, r3
 800e9c8:	68b8      	ldr	r0, [r7, #8]
 800e9ca:	f7f8 fb8a 	bl	80070e2 <lwip_htonl>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	8abb      	ldrh	r3, [r7, #20]
 800e9d2:	9303      	str	r3, [sp, #12]
 800e9d4:	2314      	movs	r3, #20
 800e9d6:	9302      	str	r3, [sp, #8]
 800e9d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e9da:	9301      	str	r3, [sp, #4]
 800e9dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fe90 	bl	800e70c <tcp_output_alloc_header_common>
 800e9ec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00c      	beq.n	800ea0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	6939      	ldr	r1, [r7, #16]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f7ff ff38 	bl	800e870 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	683a      	ldr	r2, [r7, #0]
 800ea04:	6939      	ldr	r1, [r7, #16]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7ff ff72 	bl	800e8f0 <tcp_output_control_segment>
 800ea0c:	e000      	b.n	800ea10 <tcp_rst+0x8c>
    return;
 800ea0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea10:	371c      	adds	r7, #28
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd90      	pop	{r4, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	08014d34 	.word	0x08014d34
 800ea1c:	080154b8 	.word	0x080154b8
 800ea20:	08014d88 	.word	0x08014d88
 800ea24:	080154d4 	.word	0x080154d4

0800ea28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ea28:	b590      	push	{r4, r7, lr}
 800ea2a:	b087      	sub	sp, #28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d106      	bne.n	800ea4c <tcp_send_empty_ack+0x24>
 800ea3e:	4b28      	ldr	r3, [pc, #160]	; (800eae0 <tcp_send_empty_ack+0xb8>)
 800ea40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ea44:	4927      	ldr	r1, [pc, #156]	; (800eae4 <tcp_send_empty_ack+0xbc>)
 800ea46:	4828      	ldr	r0, [pc, #160]	; (800eae8 <tcp_send_empty_ack+0xc0>)
 800ea48:	f004 f8b0 	bl	8012bac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	f003 0304 	and.w	r3, r3, #4
 800ea56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ea58:	7d7b      	ldrb	r3, [r7, #21]
 800ea5a:	b29c      	uxth	r4, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f8 fb3e 	bl	80070e2 <lwip_htonl>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2200      	movs	r2, #0
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fec1 	bl	800e7f4 <tcp_output_alloc_header>
 800ea72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d109      	bne.n	800ea8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8b5b      	ldrh	r3, [r3, #26]
 800ea7e:	f043 0303 	orr.w	r3, r3, #3
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ea88:	f06f 0301 	mvn.w	r3, #1
 800ea8c:	e023      	b.n	800ead6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ea8e:	7dbb      	ldrb	r3, [r7, #22]
 800ea90:	7dfa      	ldrb	r2, [r7, #23]
 800ea92:	6939      	ldr	r1, [r7, #16]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff feeb 	bl	800e870 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	6939      	ldr	r1, [r7, #16]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff ff24 	bl	800e8f0 <tcp_output_control_segment>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eaac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d007      	beq.n	800eac4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	8b5b      	ldrh	r3, [r3, #26]
 800eab8:	f043 0303 	orr.w	r3, r3, #3
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	835a      	strh	r2, [r3, #26]
 800eac2:	e006      	b.n	800ead2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	8b5b      	ldrh	r3, [r3, #26]
 800eac8:	f023 0303 	bic.w	r3, r3, #3
 800eacc:	b29a      	uxth	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ead2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	371c      	adds	r7, #28
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd90      	pop	{r4, r7, pc}
 800eade:	bf00      	nop
 800eae0:	08014d34 	.word	0x08014d34
 800eae4:	080154f0 	.word	0x080154f0
 800eae8:	08014d88 	.word	0x08014d88

0800eaec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eaec:	b590      	push	{r4, r7, lr}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d106      	bne.n	800eb0c <tcp_keepalive+0x20>
 800eafe:	4b18      	ldr	r3, [pc, #96]	; (800eb60 <tcp_keepalive+0x74>)
 800eb00:	f640 0224 	movw	r2, #2084	; 0x824
 800eb04:	4917      	ldr	r1, [pc, #92]	; (800eb64 <tcp_keepalive+0x78>)
 800eb06:	4818      	ldr	r0, [pc, #96]	; (800eb68 <tcp_keepalive+0x7c>)
 800eb08:	f004 f850 	bl	8012bac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800eb0c:	7dfb      	ldrb	r3, [r7, #23]
 800eb0e:	b29c      	uxth	r4, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb14:	3b01      	subs	r3, #1
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f8 fae3 	bl	80070e2 <lwip_htonl>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4621      	mov	r1, r4
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7ff fe66 	bl	800e7f4 <tcp_output_alloc_header>
 800eb28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eb30:	f04f 33ff 	mov.w	r3, #4294967295
 800eb34:	e010      	b.n	800eb58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	6939      	ldr	r1, [r7, #16]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff fe97 	bl	800e870 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3304      	adds	r3, #4
 800eb48:	6939      	ldr	r1, [r7, #16]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff fed0 	bl	800e8f0 <tcp_output_control_segment>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	371c      	adds	r7, #28
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd90      	pop	{r4, r7, pc}
 800eb60:	08014d34 	.word	0x08014d34
 800eb64:	08015510 	.word	0x08015510
 800eb68:	08014d88 	.word	0x08014d88

0800eb6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eb6c:	b590      	push	{r4, r7, lr}
 800eb6e:	b08b      	sub	sp, #44	; 0x2c
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb74:	2300      	movs	r3, #0
 800eb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <tcp_zero_window_probe+0x22>
 800eb80:	4b4c      	ldr	r3, [pc, #304]	; (800ecb4 <tcp_zero_window_probe+0x148>)
 800eb82:	f640 024f 	movw	r2, #2127	; 0x84f
 800eb86:	494c      	ldr	r1, [pc, #304]	; (800ecb8 <tcp_zero_window_probe+0x14c>)
 800eb88:	484c      	ldr	r0, [pc, #304]	; (800ecbc <tcp_zero_window_probe+0x150>)
 800eb8a:	f004 f80f 	bl	8012bac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e086      	b.n	800ecac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eba4:	2bff      	cmp	r3, #255	; 0xff
 800eba6:	d007      	beq.n	800ebb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ebae:	3301      	adds	r3, #1
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ebb8:	6a3b      	ldr	r3, [r7, #32]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	899b      	ldrh	r3, [r3, #12]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7f8 fa79 	bl	80070b8 <lwip_htons>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	f003 0301 	and.w	r3, r3, #1
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <tcp_zero_window_probe+0x72>
 800ebd2:	6a3b      	ldr	r3, [r7, #32]
 800ebd4:	891b      	ldrh	r3, [r3, #8]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <tcp_zero_window_probe+0x72>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e000      	b.n	800ebe0 <tcp_zero_window_probe+0x74>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ebe2:	7ffb      	ldrb	r3, [r7, #31]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bf0c      	ite	eq
 800ebe8:	2301      	moveq	r3, #1
 800ebea:	2300      	movne	r3, #0
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ebf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebf4:	b299      	uxth	r1, r3
 800ebf6:	6a3b      	ldr	r3, [r7, #32]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	8bba      	ldrh	r2, [r7, #28]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fdf8 	bl	800e7f4 <tcp_output_alloc_header>
 800ec04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ec0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec10:	e04c      	b.n	800ecac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ec18:	7ffb      	ldrb	r3, [r7, #31]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d011      	beq.n	800ec42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	899b      	ldrh	r3, [r3, #12]
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	b21b      	sxth	r3, r3
 800ec26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec2a:	b21c      	sxth	r4, r3
 800ec2c:	2011      	movs	r0, #17
 800ec2e:	f7f8 fa43 	bl	80070b8 <lwip_htons>
 800ec32:	4603      	mov	r3, r0
 800ec34:	b21b      	sxth	r3, r3
 800ec36:	4323      	orrs	r3, r4
 800ec38:	b21b      	sxth	r3, r3
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	819a      	strh	r2, [r3, #12]
 800ec40:	e010      	b.n	800ec64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	3314      	adds	r3, #20
 800ec48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	6858      	ldr	r0, [r3, #4]
 800ec4e:	6a3b      	ldr	r3, [r7, #32]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	891a      	ldrh	r2, [r3, #8]
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	891b      	ldrh	r3, [r3, #8]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	6939      	ldr	r1, [r7, #16]
 800ec60:	f7f9 ffc8 	bl	8008bf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f8 fa39 	bl	80070e2 <lwip_htonl>
 800ec70:	4603      	mov	r3, r0
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	da02      	bge.n	800ec88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	69b9      	ldr	r1, [r7, #24]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7ff fded 	bl	800e870 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	69b9      	ldr	r1, [r7, #24]
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff fe26 	bl	800e8f0 <tcp_output_control_segment>
 800eca4:	4603      	mov	r3, r0
 800eca6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eca8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	372c      	adds	r7, #44	; 0x2c
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd90      	pop	{r4, r7, pc}
 800ecb4:	08014d34 	.word	0x08014d34
 800ecb8:	0801552c 	.word	0x0801552c
 800ecbc:	08014d88 	.word	0x08014d88

0800ecc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ecc8:	f7fa f882 	bl	8008dd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eccc:	4b0a      	ldr	r3, [pc, #40]	; (800ecf8 <tcpip_tcp_timer+0x38>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d103      	bne.n	800ecdc <tcpip_tcp_timer+0x1c>
 800ecd4:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <tcpip_tcp_timer+0x3c>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d005      	beq.n	800ece8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ecdc:	2200      	movs	r2, #0
 800ecde:	4908      	ldr	r1, [pc, #32]	; (800ed00 <tcpip_tcp_timer+0x40>)
 800ece0:	20fa      	movs	r0, #250	; 0xfa
 800ece2:	f000 f8f1 	bl	800eec8 <sys_timeout>
 800ece6:	e002      	b.n	800ecee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ece8:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <tcpip_tcp_timer+0x44>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]
  }
}
 800ecee:	bf00      	nop
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	2000f808 	.word	0x2000f808
 800ecfc:	2000f818 	.word	0x2000f818
 800ed00:	0800ecc1 	.word	0x0800ecc1
 800ed04:	20008ae0 	.word	0x20008ae0

0800ed08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <tcp_timer_needed+0x30>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10f      	bne.n	800ed34 <tcp_timer_needed+0x2c>
 800ed14:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <tcp_timer_needed+0x34>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d103      	bne.n	800ed24 <tcp_timer_needed+0x1c>
 800ed1c:	4b08      	ldr	r3, [pc, #32]	; (800ed40 <tcp_timer_needed+0x38>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d007      	beq.n	800ed34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ed24:	4b04      	ldr	r3, [pc, #16]	; (800ed38 <tcp_timer_needed+0x30>)
 800ed26:	2201      	movs	r2, #1
 800ed28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	4905      	ldr	r1, [pc, #20]	; (800ed44 <tcp_timer_needed+0x3c>)
 800ed2e:	20fa      	movs	r0, #250	; 0xfa
 800ed30:	f000 f8ca 	bl	800eec8 <sys_timeout>
  }
}
 800ed34:	bf00      	nop
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20008ae0 	.word	0x20008ae0
 800ed3c:	2000f808 	.word	0x2000f808
 800ed40:	2000f818 	.word	0x2000f818
 800ed44:	0800ecc1 	.word	0x0800ecc1

0800ed48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ed54:	200a      	movs	r0, #10
 800ed56:	f7f8 fe65 	bl	8007a24 <memp_malloc>
 800ed5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d109      	bne.n	800ed76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d151      	bne.n	800ee0c <sys_timeout_abs+0xc4>
 800ed68:	4b2a      	ldr	r3, [pc, #168]	; (800ee14 <sys_timeout_abs+0xcc>)
 800ed6a:	22be      	movs	r2, #190	; 0xbe
 800ed6c:	492a      	ldr	r1, [pc, #168]	; (800ee18 <sys_timeout_abs+0xd0>)
 800ed6e:	482b      	ldr	r0, [pc, #172]	; (800ee1c <sys_timeout_abs+0xd4>)
 800ed70:	f003 ff1c 	bl	8012bac <iprintf>
    return;
 800ed74:	e04a      	b.n	800ee0c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ed8e:	4b24      	ldr	r3, [pc, #144]	; (800ee20 <sys_timeout_abs+0xd8>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d103      	bne.n	800ed9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ed96:	4a22      	ldr	r2, [pc, #136]	; (800ee20 <sys_timeout_abs+0xd8>)
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	6013      	str	r3, [r2, #0]
    return;
 800ed9c:	e037      	b.n	800ee0e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	4b1f      	ldr	r3, [pc, #124]	; (800ee20 <sys_timeout_abs+0xd8>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	0fdb      	lsrs	r3, r3, #31
 800edac:	f003 0301 	and.w	r3, r3, #1
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d007      	beq.n	800edc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800edb6:	4b1a      	ldr	r3, [pc, #104]	; (800ee20 <sys_timeout_abs+0xd8>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800edbe:	4a18      	ldr	r2, [pc, #96]	; (800ee20 <sys_timeout_abs+0xd8>)
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6013      	str	r3, [r2, #0]
 800edc4:	e023      	b.n	800ee0e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800edc6:	4b16      	ldr	r3, [pc, #88]	; (800ee20 <sys_timeout_abs+0xd8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	617b      	str	r3, [r7, #20]
 800edcc:	e01a      	b.n	800ee04 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <sys_timeout_abs+0xa6>
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	0fdb      	lsrs	r3, r3, #31
 800ede4:	f003 0301 	and.w	r3, r3, #1
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d007      	beq.n	800edfe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	601a      	str	r2, [r3, #0]
        break;
 800edfc:	e007      	b.n	800ee0e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	617b      	str	r3, [r7, #20]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e1      	bne.n	800edce <sys_timeout_abs+0x86>
 800ee0a:	e000      	b.n	800ee0e <sys_timeout_abs+0xc6>
    return;
 800ee0c:	bf00      	nop
      }
    }
  }
}
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	08015550 	.word	0x08015550
 800ee18:	08015584 	.word	0x08015584
 800ee1c:	080155c4 	.word	0x080155c4
 800ee20:	20008ad8 	.word	0x20008ad8

0800ee24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4798      	blx	r3

  now = sys_now();
 800ee36:	f7f4 ff7f 	bl	8003d38 <sys_now>
 800ee3a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	4b0f      	ldr	r3, [pc, #60]	; (800ee80 <lwip_cyclic_timer+0x5c>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4413      	add	r3, r2
 800ee46:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	0fdb      	lsrs	r3, r3, #31
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d009      	beq.n	800ee6e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	4413      	add	r3, r2
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	4907      	ldr	r1, [pc, #28]	; (800ee84 <lwip_cyclic_timer+0x60>)
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff ff6e 	bl	800ed48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ee6c:	e004      	b.n	800ee78 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	4904      	ldr	r1, [pc, #16]	; (800ee84 <lwip_cyclic_timer+0x60>)
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f7ff ff68 	bl	800ed48 <sys_timeout_abs>
}
 800ee78:	bf00      	nop
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20008adc 	.word	0x20008adc
 800ee84:	0800ee25 	.word	0x0800ee25

0800ee88 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee8e:	2301      	movs	r3, #1
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	e00e      	b.n	800eeb2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ee94:	4a0a      	ldr	r2, [pc, #40]	; (800eec0 <sys_timeouts_init+0x38>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	4a07      	ldr	r2, [pc, #28]	; (800eec0 <sys_timeouts_init+0x38>)
 800eea2:	4413      	add	r3, r2
 800eea4:	461a      	mov	r2, r3
 800eea6:	4907      	ldr	r1, [pc, #28]	; (800eec4 <sys_timeouts_init+0x3c>)
 800eea8:	f000 f80e 	bl	800eec8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	607b      	str	r3, [r7, #4]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d9ed      	bls.n	800ee94 <sys_timeouts_init+0xc>
  }
}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	080161d4 	.word	0x080161d4
 800eec4:	0800ee25 	.word	0x0800ee25

0800eec8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b086      	sub	sp, #24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeda:	d306      	bcc.n	800eeea <sys_timeout+0x22>
 800eedc:	4b0a      	ldr	r3, [pc, #40]	; (800ef08 <sys_timeout+0x40>)
 800eede:	f240 1229 	movw	r2, #297	; 0x129
 800eee2:	490a      	ldr	r1, [pc, #40]	; (800ef0c <sys_timeout+0x44>)
 800eee4:	480a      	ldr	r0, [pc, #40]	; (800ef10 <sys_timeout+0x48>)
 800eee6:	f003 fe61 	bl	8012bac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eeea:	f7f4 ff25 	bl	8003d38 <sys_now>
 800eeee:	4602      	mov	r2, r0
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	4413      	add	r3, r2
 800eef4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	68b9      	ldr	r1, [r7, #8]
 800eefa:	6978      	ldr	r0, [r7, #20]
 800eefc:	f7ff ff24 	bl	800ed48 <sys_timeout_abs>
#endif
}
 800ef00:	bf00      	nop
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	08015550 	.word	0x08015550
 800ef0c:	080155ec 	.word	0x080155ec
 800ef10:	080155c4 	.word	0x080155c4

0800ef14 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ef1a:	f7f4 ff0d 	bl	8003d38 <sys_now>
 800ef1e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ef20:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <sys_check_timeouts+0x6c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d022      	beq.n	800ef72 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	0fdb      	lsrs	r3, r3, #31
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d11a      	bne.n	800ef76 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a0e      	ldr	r2, [pc, #56]	; (800ef80 <sys_check_timeouts+0x6c>)
 800ef46:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	4a0a      	ldr	r2, [pc, #40]	; (800ef84 <sys_check_timeouts+0x70>)
 800ef5a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	200a      	movs	r0, #10
 800ef60:	f7f8 fdb2 	bl	8007ac8 <memp_free>
    if (handler != NULL) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d0da      	beq.n	800ef20 <sys_check_timeouts+0xc>
      handler(arg);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6838      	ldr	r0, [r7, #0]
 800ef6e:	4798      	blx	r3
  do {
 800ef70:	e7d6      	b.n	800ef20 <sys_check_timeouts+0xc>
      return;
 800ef72:	bf00      	nop
 800ef74:	e000      	b.n	800ef78 <sys_check_timeouts+0x64>
      return;
 800ef76:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20008ad8 	.word	0x20008ad8
 800ef84:	20008adc 	.word	0x20008adc

0800ef88 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ef8e:	4b16      	ldr	r3, [pc, #88]	; (800efe8 <sys_timeouts_sleeptime+0x60>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d102      	bne.n	800ef9c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ef96:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9a:	e020      	b.n	800efde <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ef9c:	f7f4 fecc 	bl	8003d38 <sys_now>
 800efa0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <sys_timeouts_sleeptime+0x60>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	0fdb      	lsrs	r3, r3, #31
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d001      	beq.n	800efbc <sys_timeouts_sleeptime+0x34>
    return 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	e010      	b.n	800efde <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800efbc:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <sys_timeouts_sleeptime+0x60>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	da06      	bge.n	800efdc <sys_timeouts_sleeptime+0x54>
 800efce:	4b07      	ldr	r3, [pc, #28]	; (800efec <sys_timeouts_sleeptime+0x64>)
 800efd0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800efd4:	4906      	ldr	r1, [pc, #24]	; (800eff0 <sys_timeouts_sleeptime+0x68>)
 800efd6:	4807      	ldr	r0, [pc, #28]	; (800eff4 <sys_timeouts_sleeptime+0x6c>)
 800efd8:	f003 fde8 	bl	8012bac <iprintf>
    return ret;
 800efdc:	683b      	ldr	r3, [r7, #0]
  }
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20008ad8 	.word	0x20008ad8
 800efec:	08015550 	.word	0x08015550
 800eff0:	08015624 	.word	0x08015624
 800eff4:	080155c4 	.word	0x080155c4

0800eff8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800effc:	f003 fdee 	bl	8012bdc <rand>
 800f000:	4603      	mov	r3, r0
 800f002:	b29b      	uxth	r3, r3
 800f004:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f008:	b29b      	uxth	r3, r3
 800f00a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f00e:	b29a      	uxth	r2, r3
 800f010:	4b01      	ldr	r3, [pc, #4]	; (800f018 <udp_init+0x20>)
 800f012:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f014:	bf00      	nop
 800f016:	bd80      	pop	{r7, pc}
 800f018:	20000018 	.word	0x20000018

0800f01c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	4613      	mov	r3, r2
 800f028:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d105      	bne.n	800f03c <udp_input_local_match+0x20>
 800f030:	4b27      	ldr	r3, [pc, #156]	; (800f0d0 <udp_input_local_match+0xb4>)
 800f032:	2287      	movs	r2, #135	; 0x87
 800f034:	4927      	ldr	r1, [pc, #156]	; (800f0d4 <udp_input_local_match+0xb8>)
 800f036:	4828      	ldr	r0, [pc, #160]	; (800f0d8 <udp_input_local_match+0xbc>)
 800f038:	f003 fdb8 	bl	8012bac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d105      	bne.n	800f04e <udp_input_local_match+0x32>
 800f042:	4b23      	ldr	r3, [pc, #140]	; (800f0d0 <udp_input_local_match+0xb4>)
 800f044:	2288      	movs	r2, #136	; 0x88
 800f046:	4925      	ldr	r1, [pc, #148]	; (800f0dc <udp_input_local_match+0xc0>)
 800f048:	4823      	ldr	r0, [pc, #140]	; (800f0d8 <udp_input_local_match+0xbc>)
 800f04a:	f003 fdaf 	bl	8012bac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	7a1b      	ldrb	r3, [r3, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00b      	beq.n	800f06e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	7a1a      	ldrb	r2, [r3, #8]
 800f05a:	4b21      	ldr	r3, [pc, #132]	; (800f0e0 <udp_input_local_match+0xc4>)
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f062:	3301      	adds	r3, #1
 800f064:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f066:	429a      	cmp	r2, r3
 800f068:	d001      	beq.n	800f06e <udp_input_local_match+0x52>
    return 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	e02b      	b.n	800f0c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d018      	beq.n	800f0a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d013      	beq.n	800f0a2 <udp_input_local_match+0x86>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00f      	beq.n	800f0a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f082:	4b17      	ldr	r3, [pc, #92]	; (800f0e0 <udp_input_local_match+0xc4>)
 800f084:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08a:	d00a      	beq.n	800f0a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	4b13      	ldr	r3, [pc, #76]	; (800f0e0 <udp_input_local_match+0xc4>)
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	405a      	eors	r2, r3
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	3308      	adds	r3, #8
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d110      	bne.n	800f0c4 <udp_input_local_match+0xa8>
          return 1;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e00f      	b.n	800f0c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d009      	beq.n	800f0c0 <udp_input_local_match+0xa4>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <udp_input_local_match+0xa4>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <udp_input_local_match+0xc4>)
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d101      	bne.n	800f0c4 <udp_input_local_match+0xa8>
        return 1;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	08015638 	.word	0x08015638
 800f0d4:	08015668 	.word	0x08015668
 800f0d8:	0801568c 	.word	0x0801568c
 800f0dc:	080156b4 	.word	0x080156b4
 800f0e0:	2000c0d4 	.word	0x2000c0d4

0800f0e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f0e4:	b590      	push	{r4, r7, lr}
 800f0e6:	b08d      	sub	sp, #52	; 0x34
 800f0e8:	af02      	add	r7, sp, #8
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d105      	bne.n	800f104 <udp_input+0x20>
 800f0f8:	4b7c      	ldr	r3, [pc, #496]	; (800f2ec <udp_input+0x208>)
 800f0fa:	22cf      	movs	r2, #207	; 0xcf
 800f0fc:	497c      	ldr	r1, [pc, #496]	; (800f2f0 <udp_input+0x20c>)
 800f0fe:	487d      	ldr	r0, [pc, #500]	; (800f2f4 <udp_input+0x210>)
 800f100:	f003 fd54 	bl	8012bac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d105      	bne.n	800f116 <udp_input+0x32>
 800f10a:	4b78      	ldr	r3, [pc, #480]	; (800f2ec <udp_input+0x208>)
 800f10c:	22d0      	movs	r2, #208	; 0xd0
 800f10e:	497a      	ldr	r1, [pc, #488]	; (800f2f8 <udp_input+0x214>)
 800f110:	4878      	ldr	r0, [pc, #480]	; (800f2f4 <udp_input+0x210>)
 800f112:	f003 fd4b 	bl	8012bac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	895b      	ldrh	r3, [r3, #10]
 800f11a:	2b07      	cmp	r3, #7
 800f11c:	d803      	bhi.n	800f126 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7f9 fb72 	bl	8008808 <pbuf_free>
    goto end;
 800f124:	e0de      	b.n	800f2e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f12c:	4b73      	ldr	r3, [pc, #460]	; (800f2fc <udp_input+0x218>)
 800f12e:	695a      	ldr	r2, [r3, #20]
 800f130:	4b72      	ldr	r3, [pc, #456]	; (800f2fc <udp_input+0x218>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4619      	mov	r1, r3
 800f136:	4610      	mov	r0, r2
 800f138:	f001 fc86 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 800f13c:	4603      	mov	r3, r0
 800f13e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	b29b      	uxth	r3, r3
 800f146:	4618      	mov	r0, r3
 800f148:	f7f7 ffb6 	bl	80070b8 <lwip_htons>
 800f14c:	4603      	mov	r3, r0
 800f14e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	885b      	ldrh	r3, [r3, #2]
 800f154:	b29b      	uxth	r3, r3
 800f156:	4618      	mov	r0, r3
 800f158:	f7f7 ffae 	bl	80070b8 <lwip_htons>
 800f15c:	4603      	mov	r3, r0
 800f15e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f160:	2300      	movs	r3, #0
 800f162:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f164:	2300      	movs	r3, #0
 800f166:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f168:	2300      	movs	r3, #0
 800f16a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f16c:	4b64      	ldr	r3, [pc, #400]	; (800f300 <udp_input+0x21c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	627b      	str	r3, [r7, #36]	; 0x24
 800f172:	e054      	b.n	800f21e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	8a5b      	ldrh	r3, [r3, #18]
 800f178:	89fa      	ldrh	r2, [r7, #14]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d14a      	bne.n	800f214 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f17e:	7cfb      	ldrb	r3, [r7, #19]
 800f180:	461a      	mov	r2, r3
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f186:	f7ff ff49 	bl	800f01c <udp_input_local_match>
 800f18a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d041      	beq.n	800f214 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	7c1b      	ldrb	r3, [r3, #16]
 800f194:	f003 0304 	and.w	r3, r3, #4
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d11d      	bne.n	800f1d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d102      	bne.n	800f1a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	61fb      	str	r3, [r7, #28]
 800f1a6:	e017      	b.n	800f1d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f1a8:	7cfb      	ldrb	r3, [r7, #19]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d014      	beq.n	800f1d8 <udp_input+0xf4>
 800f1ae:	4b53      	ldr	r3, [pc, #332]	; (800f2fc <udp_input+0x218>)
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b6:	d10f      	bne.n	800f1d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	3304      	adds	r3, #4
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d008      	beq.n	800f1d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	3304      	adds	r3, #4
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d101      	bne.n	800f1d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	8a9b      	ldrh	r3, [r3, #20]
 800f1dc:	8a3a      	ldrh	r2, [r7, #16]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d118      	bne.n	800f214 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d005      	beq.n	800f1f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	4b43      	ldr	r3, [pc, #268]	; (800f2fc <udp_input+0x218>)
 800f1f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d10e      	bne.n	800f214 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d014      	beq.n	800f226 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	68da      	ldr	r2, [r3, #12]
 800f200:	6a3b      	ldr	r3, [r7, #32]
 800f202:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f204:	4b3e      	ldr	r3, [pc, #248]	; (800f300 <udp_input+0x21c>)
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f20c:	4a3c      	ldr	r2, [pc, #240]	; (800f300 <udp_input+0x21c>)
 800f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f210:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f212:	e008      	b.n	800f226 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24
 800f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1a7      	bne.n	800f174 <udp_input+0x90>
 800f224:	e000      	b.n	800f228 <udp_input+0x144>
        break;
 800f226:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <udp_input+0x15a>
    for_us = 1;
 800f238:	2301      	movs	r3, #1
 800f23a:	76fb      	strb	r3, [r7, #27]
 800f23c:	e00a      	b.n	800f254 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	3304      	adds	r3, #4
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	4b2d      	ldr	r3, [pc, #180]	; (800f2fc <udp_input+0x218>)
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	429a      	cmp	r2, r3
 800f24a:	bf0c      	ite	eq
 800f24c:	2301      	moveq	r3, #1
 800f24e:	2300      	movne	r3, #0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f254:	7efb      	ldrb	r3, [r7, #27]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d041      	beq.n	800f2de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f25a:	2108      	movs	r1, #8
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7f9 fa4d 	bl	80086fc <pbuf_remove_header>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00a      	beq.n	800f27e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f268:	4b20      	ldr	r3, [pc, #128]	; (800f2ec <udp_input+0x208>)
 800f26a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f26e:	4925      	ldr	r1, [pc, #148]	; (800f304 <udp_input+0x220>)
 800f270:	4820      	ldr	r0, [pc, #128]	; (800f2f4 <udp_input+0x210>)
 800f272:	f003 fc9b 	bl	8012bac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7f9 fac6 	bl	8008808 <pbuf_free>
      goto end;
 800f27c:	e032      	b.n	800f2e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f280:	2b00      	cmp	r3, #0
 800f282:	d012      	beq.n	800f2aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	699c      	ldr	r4, [r3, #24]
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	69d8      	ldr	r0, [r3, #28]
 800f294:	8a3b      	ldrh	r3, [r7, #16]
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	4b1b      	ldr	r3, [pc, #108]	; (800f308 <udp_input+0x224>)
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f29e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f2a0:	e021      	b.n	800f2e6 <udp_input+0x202>
        pbuf_free(p);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7f9 fab0 	bl	8008808 <pbuf_free>
        goto end;
 800f2a8:	e01c      	b.n	800f2e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2aa:	7cfb      	ldrb	r3, [r7, #19]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d112      	bne.n	800f2d6 <udp_input+0x1f2>
 800f2b0:	4b12      	ldr	r3, [pc, #72]	; (800f2fc <udp_input+0x218>)
 800f2b2:	695b      	ldr	r3, [r3, #20]
 800f2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2b8:	2be0      	cmp	r3, #224	; 0xe0
 800f2ba:	d00c      	beq.n	800f2d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f2bc:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <udp_input+0x218>)
 800f2be:	899b      	ldrh	r3, [r3, #12]
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	b21b      	sxth	r3, r3
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7f9 fa8a 	bl	80087e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f2ce:	2103      	movs	r1, #3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 f89b 	bl	801040c <icmp_dest_unreach>
      pbuf_free(p);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7f9 fa96 	bl	8008808 <pbuf_free>
  return;
 800f2dc:	e003      	b.n	800f2e6 <udp_input+0x202>
    pbuf_free(p);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7f9 fa92 	bl	8008808 <pbuf_free>
  return;
 800f2e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f2e6:	372c      	adds	r7, #44	; 0x2c
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd90      	pop	{r4, r7, pc}
 800f2ec:	08015638 	.word	0x08015638
 800f2f0:	080156dc 	.word	0x080156dc
 800f2f4:	0801568c 	.word	0x0801568c
 800f2f8:	080156f4 	.word	0x080156f4
 800f2fc:	2000c0d4 	.word	0x2000c0d4
 800f300:	2000f820 	.word	0x2000f820
 800f304:	08015710 	.word	0x08015710
 800f308:	2000c0e4 	.word	0x2000c0e4

0800f30c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d01e      	beq.n	800f35a <udp_netif_ip_addr_changed+0x4e>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d01a      	beq.n	800f35a <udp_netif_ip_addr_changed+0x4e>
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d017      	beq.n	800f35a <udp_netif_ip_addr_changed+0x4e>
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d013      	beq.n	800f35a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f332:	4b0d      	ldr	r3, [pc, #52]	; (800f368 <udp_netif_ip_addr_changed+0x5c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	60fb      	str	r3, [r7, #12]
 800f338:	e00c      	b.n	800f354 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	429a      	cmp	r2, r3
 800f344:	d103      	bne.n	800f34e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1ef      	bne.n	800f33a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f35a:	bf00      	nop
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	2000f820 	.word	0x2000f820

0800f36c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f374:	4915      	ldr	r1, [pc, #84]	; (800f3cc <etharp_free_entry+0x60>)
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	440b      	add	r3, r1
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d013      	beq.n	800f3b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f388:	4910      	ldr	r1, [pc, #64]	; (800f3cc <etharp_free_entry+0x60>)
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	4613      	mov	r3, r2
 800f38e:	005b      	lsls	r3, r3, #1
 800f390:	4413      	add	r3, r2
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	440b      	add	r3, r1
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4618      	mov	r0, r3
 800f39a:	f7f9 fa35 	bl	8008808 <pbuf_free>
    arp_table[i].q = NULL;
 800f39e:	490b      	ldr	r1, [pc, #44]	; (800f3cc <etharp_free_entry+0x60>)
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	4413      	add	r3, r2
 800f3a8:	00db      	lsls	r3, r3, #3
 800f3aa:	440b      	add	r3, r1
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f3b0:	4906      	ldr	r1, [pc, #24]	; (800f3cc <etharp_free_entry+0x60>)
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	005b      	lsls	r3, r3, #1
 800f3b8:	4413      	add	r3, r2
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	440b      	add	r3, r1
 800f3be:	3314      	adds	r3, #20
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f3c4:	bf00      	nop
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	20008ae4 	.word	0x20008ae4

0800f3d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	607b      	str	r3, [r7, #4]
 800f3da:	e096      	b.n	800f50a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f3dc:	494f      	ldr	r1, [pc, #316]	; (800f51c <etharp_tmr+0x14c>)
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	440b      	add	r3, r1
 800f3ea:	3314      	adds	r3, #20
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f3f0:	78fb      	ldrb	r3, [r7, #3]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 8086 	beq.w	800f504 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f3f8:	4948      	ldr	r1, [pc, #288]	; (800f51c <etharp_tmr+0x14c>)
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	4413      	add	r3, r2
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	440b      	add	r3, r1
 800f406:	3312      	adds	r3, #18
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	3301      	adds	r3, #1
 800f40c:	b298      	uxth	r0, r3
 800f40e:	4943      	ldr	r1, [pc, #268]	; (800f51c <etharp_tmr+0x14c>)
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	4613      	mov	r3, r2
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	4413      	add	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	440b      	add	r3, r1
 800f41c:	3312      	adds	r3, #18
 800f41e:	4602      	mov	r2, r0
 800f420:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f422:	493e      	ldr	r1, [pc, #248]	; (800f51c <etharp_tmr+0x14c>)
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	00db      	lsls	r3, r3, #3
 800f42e:	440b      	add	r3, r1
 800f430:	3312      	adds	r3, #18
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f438:	d215      	bcs.n	800f466 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f43a:	4938      	ldr	r1, [pc, #224]	; (800f51c <etharp_tmr+0x14c>)
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	4613      	mov	r3, r2
 800f440:	005b      	lsls	r3, r3, #1
 800f442:	4413      	add	r3, r2
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	440b      	add	r3, r1
 800f448:	3314      	adds	r3, #20
 800f44a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d10e      	bne.n	800f46e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f450:	4932      	ldr	r1, [pc, #200]	; (800f51c <etharp_tmr+0x14c>)
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	4613      	mov	r3, r2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	4413      	add	r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	440b      	add	r3, r1
 800f45e:	3312      	adds	r3, #18
 800f460:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f462:	2b04      	cmp	r3, #4
 800f464:	d903      	bls.n	800f46e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff ff80 	bl	800f36c <etharp_free_entry>
 800f46c:	e04a      	b.n	800f504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f46e:	492b      	ldr	r1, [pc, #172]	; (800f51c <etharp_tmr+0x14c>)
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4613      	mov	r3, r2
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	4413      	add	r3, r2
 800f478:	00db      	lsls	r3, r3, #3
 800f47a:	440b      	add	r3, r1
 800f47c:	3314      	adds	r3, #20
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b03      	cmp	r3, #3
 800f482:	d10a      	bne.n	800f49a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f484:	4925      	ldr	r1, [pc, #148]	; (800f51c <etharp_tmr+0x14c>)
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	4613      	mov	r3, r2
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	440b      	add	r3, r1
 800f492:	3314      	adds	r3, #20
 800f494:	2204      	movs	r2, #4
 800f496:	701a      	strb	r2, [r3, #0]
 800f498:	e034      	b.n	800f504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f49a:	4920      	ldr	r1, [pc, #128]	; (800f51c <etharp_tmr+0x14c>)
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	440b      	add	r3, r1
 800f4a8:	3314      	adds	r3, #20
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b04      	cmp	r3, #4
 800f4ae:	d10a      	bne.n	800f4c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f4b0:	491a      	ldr	r1, [pc, #104]	; (800f51c <etharp_tmr+0x14c>)
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	005b      	lsls	r3, r3, #1
 800f4b8:	4413      	add	r3, r2
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	440b      	add	r3, r1
 800f4be:	3314      	adds	r3, #20
 800f4c0:	2202      	movs	r2, #2
 800f4c2:	701a      	strb	r2, [r3, #0]
 800f4c4:	e01e      	b.n	800f504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f4c6:	4915      	ldr	r1, [pc, #84]	; (800f51c <etharp_tmr+0x14c>)
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	005b      	lsls	r3, r3, #1
 800f4ce:	4413      	add	r3, r2
 800f4d0:	00db      	lsls	r3, r3, #3
 800f4d2:	440b      	add	r3, r1
 800f4d4:	3314      	adds	r3, #20
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d113      	bne.n	800f504 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f4dc:	490f      	ldr	r1, [pc, #60]	; (800f51c <etharp_tmr+0x14c>)
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	440b      	add	r3, r1
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	6818      	ldr	r0, [r3, #0]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	4413      	add	r3, r2
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	4a08      	ldr	r2, [pc, #32]	; (800f51c <etharp_tmr+0x14c>)
 800f4fa:	4413      	add	r3, r2
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4619      	mov	r1, r3
 800f500:	f000 fe6e 	bl	80101e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3301      	adds	r3, #1
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b09      	cmp	r3, #9
 800f50e:	f77f af65 	ble.w	800f3dc <etharp_tmr+0xc>
      }
    }
  }
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	20008ae4 	.word	0x20008ae4

0800f520 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08a      	sub	sp, #40	; 0x28
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	460b      	mov	r3, r1
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f52e:	230a      	movs	r3, #10
 800f530:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f532:	230a      	movs	r3, #10
 800f534:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f536:	230a      	movs	r3, #10
 800f538:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f53e:	230a      	movs	r3, #10
 800f540:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	83bb      	strh	r3, [r7, #28]
 800f546:	2300      	movs	r3, #0
 800f548:	837b      	strh	r3, [r7, #26]
 800f54a:	2300      	movs	r3, #0
 800f54c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f54e:	2300      	movs	r3, #0
 800f550:	843b      	strh	r3, [r7, #32]
 800f552:	e0ae      	b.n	800f6b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f558:	49a6      	ldr	r1, [pc, #664]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f55a:	4613      	mov	r3, r2
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	4413      	add	r3, r2
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	440b      	add	r3, r1
 800f564:	3314      	adds	r3, #20
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f56a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f56e:	2b0a      	cmp	r3, #10
 800f570:	d105      	bne.n	800f57e <etharp_find_entry+0x5e>
 800f572:	7dfb      	ldrb	r3, [r7, #23]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f578:	8c3b      	ldrh	r3, [r7, #32]
 800f57a:	847b      	strh	r3, [r7, #34]	; 0x22
 800f57c:	e095      	b.n	800f6aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 8092 	beq.w	800f6aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d009      	beq.n	800f5a0 <etharp_find_entry+0x80>
 800f58c:	7dfb      	ldrb	r3, [r7, #23]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d806      	bhi.n	800f5a0 <etharp_find_entry+0x80>
 800f592:	4b99      	ldr	r3, [pc, #612]	; (800f7f8 <etharp_find_entry+0x2d8>)
 800f594:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f598:	4998      	ldr	r1, [pc, #608]	; (800f7fc <etharp_find_entry+0x2dc>)
 800f59a:	4899      	ldr	r0, [pc, #612]	; (800f800 <etharp_find_entry+0x2e0>)
 800f59c:	f003 fb06 	bl	8012bac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d020      	beq.n	800f5e8 <etharp_find_entry+0xc8>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6819      	ldr	r1, [r3, #0]
 800f5aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5ae:	4891      	ldr	r0, [pc, #580]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	4413      	add	r3, r2
 800f5b6:	00db      	lsls	r3, r3, #3
 800f5b8:	4403      	add	r3, r0
 800f5ba:	3304      	adds	r3, #4
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4299      	cmp	r1, r3
 800f5c0:	d112      	bne.n	800f5e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00c      	beq.n	800f5e2 <etharp_find_entry+0xc2>
 800f5c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5cc:	4989      	ldr	r1, [pc, #548]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	4413      	add	r3, r2
 800f5d4:	00db      	lsls	r3, r3, #3
 800f5d6:	440b      	add	r3, r1
 800f5d8:	3308      	adds	r3, #8
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d102      	bne.n	800f5e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f5e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f5e6:	e100      	b.n	800f7ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f5e8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d140      	bne.n	800f670 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5f2:	4980      	ldr	r1, [pc, #512]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	005b      	lsls	r3, r3, #1
 800f5f8:	4413      	add	r3, r2
 800f5fa:	00db      	lsls	r3, r3, #3
 800f5fc:	440b      	add	r3, r1
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d01a      	beq.n	800f63a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f608:	497a      	ldr	r1, [pc, #488]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f60a:	4613      	mov	r3, r2
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	4413      	add	r3, r2
 800f610:	00db      	lsls	r3, r3, #3
 800f612:	440b      	add	r3, r1
 800f614:	3312      	adds	r3, #18
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	8bba      	ldrh	r2, [r7, #28]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d845      	bhi.n	800f6aa <etharp_find_entry+0x18a>
            old_queue = i;
 800f61e:	8c3b      	ldrh	r3, [r7, #32]
 800f620:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f626:	4973      	ldr	r1, [pc, #460]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f628:	4613      	mov	r3, r2
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	4413      	add	r3, r2
 800f62e:	00db      	lsls	r3, r3, #3
 800f630:	440b      	add	r3, r1
 800f632:	3312      	adds	r3, #18
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	83bb      	strh	r3, [r7, #28]
 800f638:	e037      	b.n	800f6aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f63a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f63e:	496d      	ldr	r1, [pc, #436]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f640:	4613      	mov	r3, r2
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	4413      	add	r3, r2
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	440b      	add	r3, r1
 800f64a:	3312      	adds	r3, #18
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	8b7a      	ldrh	r2, [r7, #26]
 800f650:	429a      	cmp	r2, r3
 800f652:	d82a      	bhi.n	800f6aa <etharp_find_entry+0x18a>
            old_pending = i;
 800f654:	8c3b      	ldrh	r3, [r7, #32]
 800f656:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f658:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f65c:	4965      	ldr	r1, [pc, #404]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f65e:	4613      	mov	r3, r2
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	4413      	add	r3, r2
 800f664:	00db      	lsls	r3, r3, #3
 800f666:	440b      	add	r3, r1
 800f668:	3312      	adds	r3, #18
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	837b      	strh	r3, [r7, #26]
 800f66e:	e01c      	b.n	800f6aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f670:	7dfb      	ldrb	r3, [r7, #23]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d919      	bls.n	800f6aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f67a:	495e      	ldr	r1, [pc, #376]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f67c:	4613      	mov	r3, r2
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	4413      	add	r3, r2
 800f682:	00db      	lsls	r3, r3, #3
 800f684:	440b      	add	r3, r1
 800f686:	3312      	adds	r3, #18
 800f688:	881b      	ldrh	r3, [r3, #0]
 800f68a:	8b3a      	ldrh	r2, [r7, #24]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d80c      	bhi.n	800f6aa <etharp_find_entry+0x18a>
            old_stable = i;
 800f690:	8c3b      	ldrh	r3, [r7, #32]
 800f692:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f698:	4956      	ldr	r1, [pc, #344]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f69a:	4613      	mov	r3, r2
 800f69c:	005b      	lsls	r3, r3, #1
 800f69e:	4413      	add	r3, r2
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	440b      	add	r3, r1
 800f6a4:	3312      	adds	r3, #18
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6aa:	8c3b      	ldrh	r3, [r7, #32]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	843b      	strh	r3, [r7, #32]
 800f6b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f6b6:	2b09      	cmp	r3, #9
 800f6b8:	f77f af4c 	ble.w	800f554 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f6bc:	7afb      	ldrb	r3, [r7, #11]
 800f6be:	f003 0302 	and.w	r3, r3, #2
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d108      	bne.n	800f6d8 <etharp_find_entry+0x1b8>
 800f6c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f6ca:	2b0a      	cmp	r3, #10
 800f6cc:	d107      	bne.n	800f6de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f6ce:	7afb      	ldrb	r3, [r7, #11]
 800f6d0:	f003 0301 	and.w	r3, r3, #1
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6dc:	e085      	b.n	800f7ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f6de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f6e2:	2b09      	cmp	r3, #9
 800f6e4:	dc02      	bgt.n	800f6ec <etharp_find_entry+0x1cc>
    i = empty;
 800f6e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6e8:	843b      	strh	r3, [r7, #32]
 800f6ea:	e039      	b.n	800f760 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f6ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f6f0:	2b09      	cmp	r3, #9
 800f6f2:	dc14      	bgt.n	800f71e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f6f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f6f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6fc:	493d      	ldr	r1, [pc, #244]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f6fe:	4613      	mov	r3, r2
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	4413      	add	r3, r2
 800f704:	00db      	lsls	r3, r3, #3
 800f706:	440b      	add	r3, r1
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d018      	beq.n	800f740 <etharp_find_entry+0x220>
 800f70e:	4b3a      	ldr	r3, [pc, #232]	; (800f7f8 <etharp_find_entry+0x2d8>)
 800f710:	f240 126d 	movw	r2, #365	; 0x16d
 800f714:	493b      	ldr	r1, [pc, #236]	; (800f804 <etharp_find_entry+0x2e4>)
 800f716:	483a      	ldr	r0, [pc, #232]	; (800f800 <etharp_find_entry+0x2e0>)
 800f718:	f003 fa48 	bl	8012bac <iprintf>
 800f71c:	e010      	b.n	800f740 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f71e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f722:	2b09      	cmp	r3, #9
 800f724:	dc02      	bgt.n	800f72c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f728:	843b      	strh	r3, [r7, #32]
 800f72a:	e009      	b.n	800f740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f72c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f730:	2b09      	cmp	r3, #9
 800f732:	dc02      	bgt.n	800f73a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f734:	8bfb      	ldrh	r3, [r7, #30]
 800f736:	843b      	strh	r3, [r7, #32]
 800f738:	e002      	b.n	800f740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f73a:	f04f 33ff 	mov.w	r3, #4294967295
 800f73e:	e054      	b.n	800f7ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f740:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f744:	2b09      	cmp	r3, #9
 800f746:	dd06      	ble.n	800f756 <etharp_find_entry+0x236>
 800f748:	4b2b      	ldr	r3, [pc, #172]	; (800f7f8 <etharp_find_entry+0x2d8>)
 800f74a:	f240 127f 	movw	r2, #383	; 0x17f
 800f74e:	492e      	ldr	r1, [pc, #184]	; (800f808 <etharp_find_entry+0x2e8>)
 800f750:	482b      	ldr	r0, [pc, #172]	; (800f800 <etharp_find_entry+0x2e0>)
 800f752:	f003 fa2b 	bl	8012bac <iprintf>
    etharp_free_entry(i);
 800f756:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff fe06 	bl	800f36c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f760:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f764:	2b09      	cmp	r3, #9
 800f766:	dd06      	ble.n	800f776 <etharp_find_entry+0x256>
 800f768:	4b23      	ldr	r3, [pc, #140]	; (800f7f8 <etharp_find_entry+0x2d8>)
 800f76a:	f240 1283 	movw	r2, #387	; 0x183
 800f76e:	4926      	ldr	r1, [pc, #152]	; (800f808 <etharp_find_entry+0x2e8>)
 800f770:	4823      	ldr	r0, [pc, #140]	; (800f800 <etharp_find_entry+0x2e0>)
 800f772:	f003 fa1b 	bl	8012bac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f77a:	491e      	ldr	r1, [pc, #120]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	440b      	add	r3, r1
 800f786:	3314      	adds	r3, #20
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d006      	beq.n	800f79c <etharp_find_entry+0x27c>
 800f78e:	4b1a      	ldr	r3, [pc, #104]	; (800f7f8 <etharp_find_entry+0x2d8>)
 800f790:	f240 1285 	movw	r2, #389	; 0x185
 800f794:	491d      	ldr	r1, [pc, #116]	; (800f80c <etharp_find_entry+0x2ec>)
 800f796:	481a      	ldr	r0, [pc, #104]	; (800f800 <etharp_find_entry+0x2e0>)
 800f798:	f003 fa08 	bl	8012bac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00b      	beq.n	800f7ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6819      	ldr	r1, [r3, #0]
 800f7aa:	4812      	ldr	r0, [pc, #72]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	4403      	add	r3, r0
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7be:	490d      	ldr	r1, [pc, #52]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	4413      	add	r3, r2
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	440b      	add	r3, r1
 800f7ca:	3312      	adds	r3, #18
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f7d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7d4:	4907      	ldr	r1, [pc, #28]	; (800f7f4 <etharp_find_entry+0x2d4>)
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	4413      	add	r3, r2
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	440b      	add	r3, r1
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f7e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3728      	adds	r7, #40	; 0x28
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20008ae4 	.word	0x20008ae4
 800f7f8:	0801599c 	.word	0x0801599c
 800f7fc:	080159d4 	.word	0x080159d4
 800f800:	08015a14 	.word	0x08015a14
 800f804:	08015a3c 	.word	0x08015a3c
 800f808:	08015a54 	.word	0x08015a54
 800f80c:	08015a68 	.word	0x08015a68

0800f810 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af02      	add	r7, sp, #8
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f824:	2b06      	cmp	r3, #6
 800f826:	d006      	beq.n	800f836 <etharp_update_arp_entry+0x26>
 800f828:	4b48      	ldr	r3, [pc, #288]	; (800f94c <etharp_update_arp_entry+0x13c>)
 800f82a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f82e:	4948      	ldr	r1, [pc, #288]	; (800f950 <etharp_update_arp_entry+0x140>)
 800f830:	4848      	ldr	r0, [pc, #288]	; (800f954 <etharp_update_arp_entry+0x144>)
 800f832:	f003 f9bb 	bl	8012bac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d012      	beq.n	800f862 <etharp_update_arp_entry+0x52>
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00e      	beq.n	800f862 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68f9      	ldr	r1, [r7, #12]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f001 f8fc 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 800f850:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f852:	2b00      	cmp	r3, #0
 800f854:	d105      	bne.n	800f862 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f85e:	2be0      	cmp	r3, #224	; 0xe0
 800f860:	d102      	bne.n	800f868 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f862:	f06f 030f 	mvn.w	r3, #15
 800f866:	e06c      	b.n	800f942 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f868:	78fb      	ldrb	r3, [r7, #3]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	4619      	mov	r1, r3
 800f86e:	68b8      	ldr	r0, [r7, #8]
 800f870:	f7ff fe56 	bl	800f520 <etharp_find_entry>
 800f874:	4603      	mov	r3, r0
 800f876:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f878:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	da02      	bge.n	800f886 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f880:	8afb      	ldrh	r3, [r7, #22]
 800f882:	b25b      	sxtb	r3, r3
 800f884:	e05d      	b.n	800f942 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f88a:	4933      	ldr	r1, [pc, #204]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f88c:	4613      	mov	r3, r2
 800f88e:	005b      	lsls	r3, r3, #1
 800f890:	4413      	add	r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	440b      	add	r3, r1
 800f896:	3314      	adds	r3, #20
 800f898:	2202      	movs	r2, #2
 800f89a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f89c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8a0:	492d      	ldr	r1, [pc, #180]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	005b      	lsls	r3, r3, #1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	440b      	add	r3, r1
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f8b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	005b      	lsls	r3, r3, #1
 800f8ba:	4413      	add	r3, r2
 800f8bc:	00db      	lsls	r3, r3, #3
 800f8be:	3308      	adds	r3, #8
 800f8c0:	4a25      	ldr	r2, [pc, #148]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f8c2:	4413      	add	r3, r2
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	2206      	movs	r2, #6
 800f8c8:	6879      	ldr	r1, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f002 fe93 	bl	80125f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8d4:	4920      	ldr	r1, [pc, #128]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	3312      	adds	r3, #18
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f8e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8ea:	491b      	ldr	r1, [pc, #108]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	440b      	add	r3, r1
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d021      	beq.n	800f940 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f8fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f900:	4915      	ldr	r1, [pc, #84]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f902:	4613      	mov	r3, r2
 800f904:	005b      	lsls	r3, r3, #1
 800f906:	4413      	add	r3, r2
 800f908:	00db      	lsls	r3, r3, #3
 800f90a:	440b      	add	r3, r1
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f910:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f914:	4910      	ldr	r1, [pc, #64]	; (800f958 <etharp_update_arp_entry+0x148>)
 800f916:	4613      	mov	r3, r2
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	440b      	add	r3, r1
 800f920:	2200      	movs	r2, #0
 800f922:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f92a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6939      	ldr	r1, [r7, #16]
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f001 ff8b 	bl	8011850 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f93a:	6938      	ldr	r0, [r7, #16]
 800f93c:	f7f8 ff64 	bl	8008808 <pbuf_free>
  }
  return ERR_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3718      	adds	r7, #24
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	0801599c 	.word	0x0801599c
 800f950:	08015a94 	.word	0x08015a94
 800f954:	08015a14 	.word	0x08015a14
 800f958:	20008ae4 	.word	0x20008ae4

0800f95c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	e01e      	b.n	800f9a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f96a:	4913      	ldr	r1, [pc, #76]	; (800f9b8 <etharp_cleanup_netif+0x5c>)
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	4613      	mov	r3, r2
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	4413      	add	r3, r2
 800f974:	00db      	lsls	r3, r3, #3
 800f976:	440b      	add	r3, r1
 800f978:	3314      	adds	r3, #20
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f97e:	7afb      	ldrb	r3, [r7, #11]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00e      	beq.n	800f9a2 <etharp_cleanup_netif+0x46>
 800f984:	490c      	ldr	r1, [pc, #48]	; (800f9b8 <etharp_cleanup_netif+0x5c>)
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	4613      	mov	r3, r2
 800f98a:	005b      	lsls	r3, r3, #1
 800f98c:	4413      	add	r3, r2
 800f98e:	00db      	lsls	r3, r3, #3
 800f990:	440b      	add	r3, r1
 800f992:	3308      	adds	r3, #8
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d102      	bne.n	800f9a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f7ff fce5 	bl	800f36c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	60fb      	str	r3, [r7, #12]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b09      	cmp	r3, #9
 800f9ac:	dddd      	ble.n	800f96a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20008ae4 	.word	0x20008ae4

0800f9bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f9bc:	b5b0      	push	{r4, r5, r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af04      	add	r7, sp, #16
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d107      	bne.n	800f9dc <etharp_input+0x20>
 800f9cc:	4b3d      	ldr	r3, [pc, #244]	; (800fac4 <etharp_input+0x108>)
 800f9ce:	f240 228a 	movw	r2, #650	; 0x28a
 800f9d2:	493d      	ldr	r1, [pc, #244]	; (800fac8 <etharp_input+0x10c>)
 800f9d4:	483d      	ldr	r0, [pc, #244]	; (800facc <etharp_input+0x110>)
 800f9d6:	f003 f8e9 	bl	8012bac <iprintf>
 800f9da:	e06f      	b.n	800fabc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	881b      	ldrh	r3, [r3, #0]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ec:	d10c      	bne.n	800fa08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9f2:	2b06      	cmp	r3, #6
 800f9f4:	d108      	bne.n	800fa08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9fa:	2b04      	cmp	r3, #4
 800f9fc:	d104      	bne.n	800fa08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	885b      	ldrh	r3, [r3, #2]
 800fa02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fa04:	2b08      	cmp	r3, #8
 800fa06:	d003      	beq.n	800fa10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7f8 fefd 	bl	8008808 <pbuf_free>
    return;
 800fa0e:	e055      	b.n	800fabc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	330e      	adds	r3, #14
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	3318      	adds	r3, #24
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	3304      	adds	r3, #4
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d102      	bne.n	800fa30 <etharp_input+0x74>
    for_us = 0;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	75fb      	strb	r3, [r7, #23]
 800fa2e:	e009      	b.n	800fa44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	3304      	adds	r3, #4
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	bf0c      	ite	eq
 800fa3c:	2301      	moveq	r3, #1
 800fa3e:	2300      	movne	r3, #0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	f103 0208 	add.w	r2, r3, #8
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <etharp_input+0x98>
 800fa50:	2301      	movs	r3, #1
 800fa52:	e000      	b.n	800fa56 <etharp_input+0x9a>
 800fa54:	2302      	movs	r3, #2
 800fa56:	f107 010c 	add.w	r1, r7, #12
 800fa5a:	6838      	ldr	r0, [r7, #0]
 800fa5c:	f7ff fed8 	bl	800f810 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	88db      	ldrh	r3, [r3, #6]
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa6a:	d003      	beq.n	800fa74 <etharp_input+0xb8>
 800fa6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa70:	d01e      	beq.n	800fab0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fa72:	e020      	b.n	800fab6 <etharp_input+0xfa>
      if (for_us) {
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d01c      	beq.n	800fab4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fa90:	693a      	ldr	r2, [r7, #16]
 800fa92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fa94:	2102      	movs	r1, #2
 800fa96:	9103      	str	r1, [sp, #12]
 800fa98:	f107 010c 	add.w	r1, r7, #12
 800fa9c:	9102      	str	r1, [sp, #8]
 800fa9e:	9201      	str	r2, [sp, #4]
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	462b      	mov	r3, r5
 800faa4:	4622      	mov	r2, r4
 800faa6:	4601      	mov	r1, r0
 800faa8:	6838      	ldr	r0, [r7, #0]
 800faaa:	f000 faeb 	bl	8010084 <etharp_raw>
      break;
 800faae:	e001      	b.n	800fab4 <etharp_input+0xf8>
      break;
 800fab0:	bf00      	nop
 800fab2:	e000      	b.n	800fab6 <etharp_input+0xfa>
      break;
 800fab4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7f8 fea6 	bl	8008808 <pbuf_free>
}
 800fabc:	3718      	adds	r7, #24
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bdb0      	pop	{r4, r5, r7, pc}
 800fac2:	bf00      	nop
 800fac4:	0801599c 	.word	0x0801599c
 800fac8:	08015aec 	.word	0x08015aec
 800facc:	08015a14 	.word	0x08015a14

0800fad0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af02      	add	r7, sp, #8
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	4613      	mov	r3, r2
 800fadc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fade:	79fa      	ldrb	r2, [r7, #7]
 800fae0:	4944      	ldr	r1, [pc, #272]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fae2:	4613      	mov	r3, r2
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	4413      	add	r3, r2
 800fae8:	00db      	lsls	r3, r3, #3
 800faea:	440b      	add	r3, r1
 800faec:	3314      	adds	r3, #20
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d806      	bhi.n	800fb02 <etharp_output_to_arp_index+0x32>
 800faf4:	4b40      	ldr	r3, [pc, #256]	; (800fbf8 <etharp_output_to_arp_index+0x128>)
 800faf6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800fafa:	4940      	ldr	r1, [pc, #256]	; (800fbfc <etharp_output_to_arp_index+0x12c>)
 800fafc:	4840      	ldr	r0, [pc, #256]	; (800fc00 <etharp_output_to_arp_index+0x130>)
 800fafe:	f003 f855 	bl	8012bac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fb02:	79fa      	ldrb	r2, [r7, #7]
 800fb04:	493b      	ldr	r1, [pc, #236]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb06:	4613      	mov	r3, r2
 800fb08:	005b      	lsls	r3, r3, #1
 800fb0a:	4413      	add	r3, r2
 800fb0c:	00db      	lsls	r3, r3, #3
 800fb0e:	440b      	add	r3, r1
 800fb10:	3314      	adds	r3, #20
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	d153      	bne.n	800fbc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fb18:	79fa      	ldrb	r2, [r7, #7]
 800fb1a:	4936      	ldr	r1, [pc, #216]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	005b      	lsls	r3, r3, #1
 800fb20:	4413      	add	r3, r2
 800fb22:	00db      	lsls	r3, r3, #3
 800fb24:	440b      	add	r3, r1
 800fb26:	3312      	adds	r3, #18
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fb2e:	d919      	bls.n	800fb64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fb30:	79fa      	ldrb	r2, [r7, #7]
 800fb32:	4613      	mov	r3, r2
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	4413      	add	r3, r2
 800fb38:	00db      	lsls	r3, r3, #3
 800fb3a:	4a2e      	ldr	r2, [pc, #184]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb3c:	4413      	add	r3, r2
 800fb3e:	3304      	adds	r3, #4
 800fb40:	4619      	mov	r1, r3
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f000 fb4c 	bl	80101e0 <etharp_request>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d138      	bne.n	800fbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb4e:	79fa      	ldrb	r2, [r7, #7]
 800fb50:	4928      	ldr	r1, [pc, #160]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb52:	4613      	mov	r3, r2
 800fb54:	005b      	lsls	r3, r3, #1
 800fb56:	4413      	add	r3, r2
 800fb58:	00db      	lsls	r3, r3, #3
 800fb5a:	440b      	add	r3, r1
 800fb5c:	3314      	adds	r3, #20
 800fb5e:	2203      	movs	r2, #3
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	e02d      	b.n	800fbc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fb64:	79fa      	ldrb	r2, [r7, #7]
 800fb66:	4923      	ldr	r1, [pc, #140]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb68:	4613      	mov	r3, r2
 800fb6a:	005b      	lsls	r3, r3, #1
 800fb6c:	4413      	add	r3, r2
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	440b      	add	r3, r1
 800fb72:	3312      	adds	r3, #18
 800fb74:	881b      	ldrh	r3, [r3, #0]
 800fb76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fb7a:	d321      	bcc.n	800fbc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fb7c:	79fa      	ldrb	r2, [r7, #7]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	005b      	lsls	r3, r3, #1
 800fb82:	4413      	add	r3, r2
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	4a1b      	ldr	r2, [pc, #108]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb88:	4413      	add	r3, r2
 800fb8a:	1d19      	adds	r1, r3, #4
 800fb8c:	79fa      	ldrb	r2, [r7, #7]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	4413      	add	r3, r2
 800fb94:	00db      	lsls	r3, r3, #3
 800fb96:	3308      	adds	r3, #8
 800fb98:	4a16      	ldr	r2, [pc, #88]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fb9a:	4413      	add	r3, r2
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	461a      	mov	r2, r3
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 fafb 	bl	801019c <etharp_request_dst>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d109      	bne.n	800fbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fbac:	79fa      	ldrb	r2, [r7, #7]
 800fbae:	4911      	ldr	r1, [pc, #68]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	4413      	add	r3, r2
 800fbb6:	00db      	lsls	r3, r3, #3
 800fbb8:	440b      	add	r3, r1
 800fbba:	3314      	adds	r3, #20
 800fbbc:	2203      	movs	r2, #3
 800fbbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800fbc6:	79fa      	ldrb	r2, [r7, #7]
 800fbc8:	4613      	mov	r3, r2
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	4413      	add	r3, r2
 800fbce:	00db      	lsls	r3, r3, #3
 800fbd0:	3308      	adds	r3, #8
 800fbd2:	4a08      	ldr	r2, [pc, #32]	; (800fbf4 <etharp_output_to_arp_index+0x124>)
 800fbd4:	4413      	add	r3, r2
 800fbd6:	1d1a      	adds	r2, r3, #4
 800fbd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	4613      	mov	r3, r2
 800fbe0:	460a      	mov	r2, r1
 800fbe2:	68b9      	ldr	r1, [r7, #8]
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f001 fe33 	bl	8011850 <ethernet_output>
 800fbea:	4603      	mov	r3, r0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3710      	adds	r7, #16
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	20008ae4 	.word	0x20008ae4
 800fbf8:	0801599c 	.word	0x0801599c
 800fbfc:	08015b0c 	.word	0x08015b0c
 800fc00:	08015a14 	.word	0x08015a14

0800fc04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08a      	sub	sp, #40	; 0x28
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d106      	bne.n	800fc28 <etharp_output+0x24>
 800fc1a:	4b73      	ldr	r3, [pc, #460]	; (800fde8 <etharp_output+0x1e4>)
 800fc1c:	f240 321e 	movw	r2, #798	; 0x31e
 800fc20:	4972      	ldr	r1, [pc, #456]	; (800fdec <etharp_output+0x1e8>)
 800fc22:	4873      	ldr	r0, [pc, #460]	; (800fdf0 <etharp_output+0x1ec>)
 800fc24:	f002 ffc2 	bl	8012bac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d106      	bne.n	800fc3c <etharp_output+0x38>
 800fc2e:	4b6e      	ldr	r3, [pc, #440]	; (800fde8 <etharp_output+0x1e4>)
 800fc30:	f240 321f 	movw	r2, #799	; 0x31f
 800fc34:	496f      	ldr	r1, [pc, #444]	; (800fdf4 <etharp_output+0x1f0>)
 800fc36:	486e      	ldr	r0, [pc, #440]	; (800fdf0 <etharp_output+0x1ec>)
 800fc38:	f002 ffb8 	bl	8012bac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d106      	bne.n	800fc50 <etharp_output+0x4c>
 800fc42:	4b69      	ldr	r3, [pc, #420]	; (800fde8 <etharp_output+0x1e4>)
 800fc44:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fc48:	496b      	ldr	r1, [pc, #428]	; (800fdf8 <etharp_output+0x1f4>)
 800fc4a:	4869      	ldr	r0, [pc, #420]	; (800fdf0 <etharp_output+0x1ec>)
 800fc4c:	f002 ffae 	bl	8012bac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68f9      	ldr	r1, [r7, #12]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 fef6 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fc62:	4b66      	ldr	r3, [pc, #408]	; (800fdfc <etharp_output+0x1f8>)
 800fc64:	61fb      	str	r3, [r7, #28]
 800fc66:	e0af      	b.n	800fdc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc70:	2be0      	cmp	r3, #224	; 0xe0
 800fc72:	d118      	bne.n	800fca6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fc74:	2301      	movs	r3, #1
 800fc76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fc7c:	235e      	movs	r3, #94	; 0x5e
 800fc7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	3301      	adds	r3, #1
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	3302      	adds	r3, #2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	3303      	adds	r3, #3
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fc9e:	f107 0310 	add.w	r3, r7, #16
 800fca2:	61fb      	str	r3, [r7, #28]
 800fca4:	e090      	b.n	800fdc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3304      	adds	r3, #4
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	405a      	eors	r2, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	3308      	adds	r3, #8
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4013      	ands	r3, r2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d012      	beq.n	800fce4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fcc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d00b      	beq.n	800fce4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	330c      	adds	r3, #12
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	330c      	adds	r3, #12
 800fcda:	61bb      	str	r3, [r7, #24]
 800fcdc:	e002      	b.n	800fce4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fcde:	f06f 0303 	mvn.w	r3, #3
 800fce2:	e07d      	b.n	800fde0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fce4:	4b46      	ldr	r3, [pc, #280]	; (800fe00 <etharp_output+0x1fc>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	4619      	mov	r1, r3
 800fcea:	4a46      	ldr	r2, [pc, #280]	; (800fe04 <etharp_output+0x200>)
 800fcec:	460b      	mov	r3, r1
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	440b      	add	r3, r1
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	4413      	add	r3, r2
 800fcf6:	3314      	adds	r3, #20
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d925      	bls.n	800fd4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fcfe:	4b40      	ldr	r3, [pc, #256]	; (800fe00 <etharp_output+0x1fc>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	4619      	mov	r1, r3
 800fd04:	4a3f      	ldr	r2, [pc, #252]	; (800fe04 <etharp_output+0x200>)
 800fd06:	460b      	mov	r3, r1
 800fd08:	005b      	lsls	r3, r3, #1
 800fd0a:	440b      	add	r3, r1
 800fd0c:	00db      	lsls	r3, r3, #3
 800fd0e:	4413      	add	r3, r2
 800fd10:	3308      	adds	r3, #8
 800fd12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d117      	bne.n	800fd4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	4b38      	ldr	r3, [pc, #224]	; (800fe00 <etharp_output+0x1fc>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	4618      	mov	r0, r3
 800fd24:	4937      	ldr	r1, [pc, #220]	; (800fe04 <etharp_output+0x200>)
 800fd26:	4603      	mov	r3, r0
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	4403      	add	r3, r0
 800fd2c:	00db      	lsls	r3, r3, #3
 800fd2e:	440b      	add	r3, r1
 800fd30:	3304      	adds	r3, #4
 800fd32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d108      	bne.n	800fd4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fd38:	4b31      	ldr	r3, [pc, #196]	; (800fe00 <etharp_output+0x1fc>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	68b9      	ldr	r1, [r7, #8]
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f7ff fec5 	bl	800fad0 <etharp_output_to_arp_index>
 800fd46:	4603      	mov	r3, r0
 800fd48:	e04a      	b.n	800fde0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	75fb      	strb	r3, [r7, #23]
 800fd4e:	e031      	b.n	800fdb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd50:	7dfa      	ldrb	r2, [r7, #23]
 800fd52:	492c      	ldr	r1, [pc, #176]	; (800fe04 <etharp_output+0x200>)
 800fd54:	4613      	mov	r3, r2
 800fd56:	005b      	lsls	r3, r3, #1
 800fd58:	4413      	add	r3, r2
 800fd5a:	00db      	lsls	r3, r3, #3
 800fd5c:	440b      	add	r3, r1
 800fd5e:	3314      	adds	r3, #20
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d923      	bls.n	800fdae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fd66:	7dfa      	ldrb	r2, [r7, #23]
 800fd68:	4926      	ldr	r1, [pc, #152]	; (800fe04 <etharp_output+0x200>)
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	4413      	add	r3, r2
 800fd70:	00db      	lsls	r3, r3, #3
 800fd72:	440b      	add	r3, r1
 800fd74:	3308      	adds	r3, #8
 800fd76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d117      	bne.n	800fdae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	6819      	ldr	r1, [r3, #0]
 800fd82:	7dfa      	ldrb	r2, [r7, #23]
 800fd84:	481f      	ldr	r0, [pc, #124]	; (800fe04 <etharp_output+0x200>)
 800fd86:	4613      	mov	r3, r2
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	4413      	add	r3, r2
 800fd8c:	00db      	lsls	r3, r3, #3
 800fd8e:	4403      	add	r3, r0
 800fd90:	3304      	adds	r3, #4
 800fd92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d10a      	bne.n	800fdae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fd98:	4a19      	ldr	r2, [pc, #100]	; (800fe00 <etharp_output+0x1fc>)
 800fd9a:	7dfb      	ldrb	r3, [r7, #23]
 800fd9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fd9e:	7dfb      	ldrb	r3, [r7, #23]
 800fda0:	461a      	mov	r2, r3
 800fda2:	68b9      	ldr	r1, [r7, #8]
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f7ff fe93 	bl	800fad0 <etharp_output_to_arp_index>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	e018      	b.n	800fde0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fdae:	7dfb      	ldrb	r3, [r7, #23]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	75fb      	strb	r3, [r7, #23]
 800fdb4:	7dfb      	ldrb	r3, [r7, #23]
 800fdb6:	2b09      	cmp	r3, #9
 800fdb8:	d9ca      	bls.n	800fd50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	69b9      	ldr	r1, [r7, #24]
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f000 f822 	bl	800fe08 <etharp_query>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	e00b      	b.n	800fde0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fdce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	68b9      	ldr	r1, [r7, #8]
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f001 fd39 	bl	8011850 <ethernet_output>
 800fdde:	4603      	mov	r3, r0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3720      	adds	r7, #32
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	0801599c 	.word	0x0801599c
 800fdec:	08015aec 	.word	0x08015aec
 800fdf0:	08015a14 	.word	0x08015a14
 800fdf4:	08015b3c 	.word	0x08015b3c
 800fdf8:	08015adc 	.word	0x08015adc
 800fdfc:	080161f0 	.word	0x080161f0
 800fe00:	20008bd4 	.word	0x20008bd4
 800fe04:	20008ae4 	.word	0x20008ae4

0800fe08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af02      	add	r7, sp, #8
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3326      	adds	r3, #38	; 0x26
 800fe18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fe1a:	23ff      	movs	r3, #255	; 0xff
 800fe1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fe20:	2300      	movs	r3, #0
 800fe22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68f9      	ldr	r1, [r7, #12]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f000 fe0c 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10c      	bne.n	800fe50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe3e:	2be0      	cmp	r3, #224	; 0xe0
 800fe40:	d006      	beq.n	800fe50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d003      	beq.n	800fe50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe50:	f06f 030f 	mvn.w	r3, #15
 800fe54:	e102      	b.n	801005c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fe56:	68fa      	ldr	r2, [r7, #12]
 800fe58:	2101      	movs	r1, #1
 800fe5a:	68b8      	ldr	r0, [r7, #8]
 800fe5c:	f7ff fb60 	bl	800f520 <etharp_find_entry>
 800fe60:	4603      	mov	r3, r0
 800fe62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fe64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	da02      	bge.n	800fe72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fe6c:	8a7b      	ldrh	r3, [r7, #18]
 800fe6e:	b25b      	sxtb	r3, r3
 800fe70:	e0f4      	b.n	801005c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fe72:	8a7b      	ldrh	r3, [r7, #18]
 800fe74:	2b7e      	cmp	r3, #126	; 0x7e
 800fe76:	d906      	bls.n	800fe86 <etharp_query+0x7e>
 800fe78:	4b7a      	ldr	r3, [pc, #488]	; (8010064 <etharp_query+0x25c>)
 800fe7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fe7e:	497a      	ldr	r1, [pc, #488]	; (8010068 <etharp_query+0x260>)
 800fe80:	487a      	ldr	r0, [pc, #488]	; (801006c <etharp_query+0x264>)
 800fe82:	f002 fe93 	bl	8012bac <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fe86:	8a7b      	ldrh	r3, [r7, #18]
 800fe88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fe8a:	7c7a      	ldrb	r2, [r7, #17]
 800fe8c:	4978      	ldr	r1, [pc, #480]	; (8010070 <etharp_query+0x268>)
 800fe8e:	4613      	mov	r3, r2
 800fe90:	005b      	lsls	r3, r3, #1
 800fe92:	4413      	add	r3, r2
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	440b      	add	r3, r1
 800fe98:	3314      	adds	r3, #20
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d115      	bne.n	800fecc <etharp_query+0xc4>
    is_new_entry = 1;
 800fea0:	2301      	movs	r3, #1
 800fea2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fea4:	7c7a      	ldrb	r2, [r7, #17]
 800fea6:	4972      	ldr	r1, [pc, #456]	; (8010070 <etharp_query+0x268>)
 800fea8:	4613      	mov	r3, r2
 800feaa:	005b      	lsls	r3, r3, #1
 800feac:	4413      	add	r3, r2
 800feae:	00db      	lsls	r3, r3, #3
 800feb0:	440b      	add	r3, r1
 800feb2:	3314      	adds	r3, #20
 800feb4:	2201      	movs	r2, #1
 800feb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800feb8:	7c7a      	ldrb	r2, [r7, #17]
 800feba:	496d      	ldr	r1, [pc, #436]	; (8010070 <etharp_query+0x268>)
 800febc:	4613      	mov	r3, r2
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	4413      	add	r3, r2
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	440b      	add	r3, r1
 800fec6:	3308      	adds	r3, #8
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fecc:	7c7a      	ldrb	r2, [r7, #17]
 800fece:	4968      	ldr	r1, [pc, #416]	; (8010070 <etharp_query+0x268>)
 800fed0:	4613      	mov	r3, r2
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	4413      	add	r3, r2
 800fed6:	00db      	lsls	r3, r3, #3
 800fed8:	440b      	add	r3, r1
 800feda:	3314      	adds	r3, #20
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d011      	beq.n	800ff06 <etharp_query+0xfe>
 800fee2:	7c7a      	ldrb	r2, [r7, #17]
 800fee4:	4962      	ldr	r1, [pc, #392]	; (8010070 <etharp_query+0x268>)
 800fee6:	4613      	mov	r3, r2
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4413      	add	r3, r2
 800feec:	00db      	lsls	r3, r3, #3
 800feee:	440b      	add	r3, r1
 800fef0:	3314      	adds	r3, #20
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d806      	bhi.n	800ff06 <etharp_query+0xfe>
 800fef8:	4b5a      	ldr	r3, [pc, #360]	; (8010064 <etharp_query+0x25c>)
 800fefa:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fefe:	495d      	ldr	r1, [pc, #372]	; (8010074 <etharp_query+0x26c>)
 800ff00:	485a      	ldr	r0, [pc, #360]	; (801006c <etharp_query+0x264>)
 800ff02:	f002 fe53 	bl	8012bac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ff06:	6a3b      	ldr	r3, [r7, #32]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d102      	bne.n	800ff12 <etharp_query+0x10a>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10c      	bne.n	800ff2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ff12:	68b9      	ldr	r1, [r7, #8]
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f000 f963 	bl	80101e0 <etharp_request>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <etharp_query+0x124>
      return result;
 800ff26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ff2a:	e097      	b.n	801005c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <etharp_query+0x138>
 800ff32:	4b4c      	ldr	r3, [pc, #304]	; (8010064 <etharp_query+0x25c>)
 800ff34:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ff38:	494f      	ldr	r1, [pc, #316]	; (8010078 <etharp_query+0x270>)
 800ff3a:	484c      	ldr	r0, [pc, #304]	; (801006c <etharp_query+0x264>)
 800ff3c:	f002 fe36 	bl	8012bac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ff40:	7c7a      	ldrb	r2, [r7, #17]
 800ff42:	494b      	ldr	r1, [pc, #300]	; (8010070 <etharp_query+0x268>)
 800ff44:	4613      	mov	r3, r2
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	4413      	add	r3, r2
 800ff4a:	00db      	lsls	r3, r3, #3
 800ff4c:	440b      	add	r3, r1
 800ff4e:	3314      	adds	r3, #20
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d918      	bls.n	800ff88 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ff56:	4a49      	ldr	r2, [pc, #292]	; (801007c <etharp_query+0x274>)
 800ff58:	7c7b      	ldrb	r3, [r7, #17]
 800ff5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ff5c:	7c7a      	ldrb	r2, [r7, #17]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	4413      	add	r3, r2
 800ff64:	00db      	lsls	r3, r3, #3
 800ff66:	3308      	adds	r3, #8
 800ff68:	4a41      	ldr	r2, [pc, #260]	; (8010070 <etharp_query+0x268>)
 800ff6a:	4413      	add	r3, r2
 800ff6c:	1d1a      	adds	r2, r3, #4
 800ff6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	4613      	mov	r3, r2
 800ff76:	697a      	ldr	r2, [r7, #20]
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f001 fc68 	bl	8011850 <ethernet_output>
 800ff80:	4603      	mov	r3, r0
 800ff82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff86:	e067      	b.n	8010058 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ff88:	7c7a      	ldrb	r2, [r7, #17]
 800ff8a:	4939      	ldr	r1, [pc, #228]	; (8010070 <etharp_query+0x268>)
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	005b      	lsls	r3, r3, #1
 800ff90:	4413      	add	r3, r2
 800ff92:	00db      	lsls	r3, r3, #3
 800ff94:	440b      	add	r3, r1
 800ff96:	3314      	adds	r3, #20
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d15c      	bne.n	8010058 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ffa6:	e01c      	b.n	800ffe2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	895a      	ldrh	r2, [r3, #10]
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	891b      	ldrh	r3, [r3, #8]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d10a      	bne.n	800ffca <etharp_query+0x1c2>
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d006      	beq.n	800ffca <etharp_query+0x1c2>
 800ffbc:	4b29      	ldr	r3, [pc, #164]	; (8010064 <etharp_query+0x25c>)
 800ffbe:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ffc2:	492f      	ldr	r1, [pc, #188]	; (8010080 <etharp_query+0x278>)
 800ffc4:	4829      	ldr	r0, [pc, #164]	; (801006c <etharp_query+0x264>)
 800ffc6:	f002 fdf1 	bl	8012bac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	7b1b      	ldrb	r3, [r3, #12]
 800ffce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d002      	beq.n	800ffdc <etharp_query+0x1d4>
        copy_needed = 1;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	61bb      	str	r3, [r7, #24]
        break;
 800ffda:	e005      	b.n	800ffe8 <etharp_query+0x1e0>
      }
      p = p->next;
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1df      	bne.n	800ffa8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d007      	beq.n	800fffe <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fff4:	200e      	movs	r0, #14
 800fff6:	f7f8 fe6f 	bl	8008cd8 <pbuf_clone>
 800fffa:	61f8      	str	r0, [r7, #28]
 800fffc:	e004      	b.n	8010008 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010002:	69f8      	ldr	r0, [r7, #28]
 8010004:	f7f8 fca6 	bl	8008954 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d021      	beq.n	8010052 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801000e:	7c7a      	ldrb	r2, [r7, #17]
 8010010:	4917      	ldr	r1, [pc, #92]	; (8010070 <etharp_query+0x268>)
 8010012:	4613      	mov	r3, r2
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	4413      	add	r3, r2
 8010018:	00db      	lsls	r3, r3, #3
 801001a:	440b      	add	r3, r1
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00a      	beq.n	8010038 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010022:	7c7a      	ldrb	r2, [r7, #17]
 8010024:	4912      	ldr	r1, [pc, #72]	; (8010070 <etharp_query+0x268>)
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	440b      	add	r3, r1
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4618      	mov	r0, r3
 8010034:	f7f8 fbe8 	bl	8008808 <pbuf_free>
      }
      arp_table[i].q = p;
 8010038:	7c7a      	ldrb	r2, [r7, #17]
 801003a:	490d      	ldr	r1, [pc, #52]	; (8010070 <etharp_query+0x268>)
 801003c:	4613      	mov	r3, r2
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	4413      	add	r3, r2
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	440b      	add	r3, r1
 8010046:	69fa      	ldr	r2, [r7, #28]
 8010048:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801004a:	2300      	movs	r3, #0
 801004c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010050:	e002      	b.n	8010058 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010052:	23ff      	movs	r3, #255	; 0xff
 8010054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010058:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801005c:	4618      	mov	r0, r3
 801005e:	3728      	adds	r7, #40	; 0x28
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	0801599c 	.word	0x0801599c
 8010068:	08015b48 	.word	0x08015b48
 801006c:	08015a14 	.word	0x08015a14
 8010070:	20008ae4 	.word	0x20008ae4
 8010074:	08015b58 	.word	0x08015b58
 8010078:	08015b3c 	.word	0x08015b3c
 801007c:	20008bd4 	.word	0x20008bd4
 8010080:	08015b80 	.word	0x08015b80

08010084 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	; 0x28
 8010088:	af02      	add	r7, sp, #8
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
 8010090:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d106      	bne.n	80100aa <etharp_raw+0x26>
 801009c:	4b3a      	ldr	r3, [pc, #232]	; (8010188 <etharp_raw+0x104>)
 801009e:	f240 4257 	movw	r2, #1111	; 0x457
 80100a2:	493a      	ldr	r1, [pc, #232]	; (801018c <etharp_raw+0x108>)
 80100a4:	483a      	ldr	r0, [pc, #232]	; (8010190 <etharp_raw+0x10c>)
 80100a6:	f002 fd81 	bl	8012bac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80100aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100ae:	211c      	movs	r1, #28
 80100b0:	200e      	movs	r0, #14
 80100b2:	f7f8 f8c9 	bl	8008248 <pbuf_alloc>
 80100b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80100be:	f04f 33ff 	mov.w	r3, #4294967295
 80100c2:	e05d      	b.n	8010180 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	895b      	ldrh	r3, [r3, #10]
 80100c8:	2b1b      	cmp	r3, #27
 80100ca:	d806      	bhi.n	80100da <etharp_raw+0x56>
 80100cc:	4b2e      	ldr	r3, [pc, #184]	; (8010188 <etharp_raw+0x104>)
 80100ce:	f240 4263 	movw	r2, #1123	; 0x463
 80100d2:	4930      	ldr	r1, [pc, #192]	; (8010194 <etharp_raw+0x110>)
 80100d4:	482e      	ldr	r0, [pc, #184]	; (8010190 <etharp_raw+0x10c>)
 80100d6:	f002 fd69 	bl	8012bac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80100e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7f6 ffe8 	bl	80070b8 <lwip_htons>
 80100e8:	4603      	mov	r3, r0
 80100ea:	461a      	mov	r2, r3
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100f6:	2b06      	cmp	r3, #6
 80100f8:	d006      	beq.n	8010108 <etharp_raw+0x84>
 80100fa:	4b23      	ldr	r3, [pc, #140]	; (8010188 <etharp_raw+0x104>)
 80100fc:	f240 426a 	movw	r2, #1130	; 0x46a
 8010100:	4925      	ldr	r1, [pc, #148]	; (8010198 <etharp_raw+0x114>)
 8010102:	4823      	ldr	r0, [pc, #140]	; (8010190 <etharp_raw+0x10c>)
 8010104:	f002 fd52 	bl	8012bac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	3308      	adds	r3, #8
 801010c:	2206      	movs	r2, #6
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	4618      	mov	r0, r3
 8010112:	f002 fa70 	bl	80125f6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	3312      	adds	r3, #18
 801011a:	2206      	movs	r2, #6
 801011c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801011e:	4618      	mov	r0, r3
 8010120:	f002 fa69 	bl	80125f6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	330e      	adds	r3, #14
 8010128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012a:	6812      	ldr	r2, [r2, #0]
 801012c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	3318      	adds	r3, #24
 8010132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010134:	6812      	ldr	r2, [r2, #0]
 8010136:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	2200      	movs	r2, #0
 801013c:	701a      	strb	r2, [r3, #0]
 801013e:	2200      	movs	r2, #0
 8010140:	f042 0201 	orr.w	r2, r2, #1
 8010144:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	2200      	movs	r2, #0
 801014a:	f042 0208 	orr.w	r2, r2, #8
 801014e:	709a      	strb	r2, [r3, #2]
 8010150:	2200      	movs	r2, #0
 8010152:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2206      	movs	r2, #6
 8010158:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2204      	movs	r2, #4
 801015e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010160:	f640 0306 	movw	r3, #2054	; 0x806
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	69b9      	ldr	r1, [r7, #24]
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f001 fb6f 	bl	8011850 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010172:	69b8      	ldr	r0, [r7, #24]
 8010174:	f7f8 fb48 	bl	8008808 <pbuf_free>
  p = NULL;
 8010178:	2300      	movs	r3, #0
 801017a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801017c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3720      	adds	r7, #32
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	0801599c 	.word	0x0801599c
 801018c:	08015aec 	.word	0x08015aec
 8010190:	08015a14 	.word	0x08015a14
 8010194:	08015b9c 	.word	0x08015b9c
 8010198:	08015bd0 	.word	0x08015bd0

0801019c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af04      	add	r7, sp, #16
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80101b8:	2201      	movs	r2, #1
 80101ba:	9203      	str	r2, [sp, #12]
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	9202      	str	r2, [sp, #8]
 80101c0:	4a06      	ldr	r2, [pc, #24]	; (80101dc <etharp_request_dst+0x40>)
 80101c2:	9201      	str	r2, [sp, #4]
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	4603      	mov	r3, r0
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7ff ff5a 	bl	8010084 <etharp_raw>
 80101d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	080161f8 	.word	0x080161f8

080101e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80101ea:	4a05      	ldr	r2, [pc, #20]	; (8010200 <etharp_request+0x20>)
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7ff ffd4 	bl	801019c <etharp_request_dst>
 80101f4:	4603      	mov	r3, r0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	080161f0 	.word	0x080161f0

08010204 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08e      	sub	sp, #56	; 0x38
 8010208:	af04      	add	r7, sp, #16
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801020e:	4b79      	ldr	r3, [pc, #484]	; (80103f4 <icmp_input+0x1f0>)
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	f003 030f 	and.w	r3, r3, #15
 801021c:	b2db      	uxtb	r3, r3
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	b2db      	uxtb	r3, r3
 8010222:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010226:	2b13      	cmp	r3, #19
 8010228:	f240 80cd 	bls.w	80103c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	895b      	ldrh	r3, [r3, #10]
 8010230:	2b03      	cmp	r3, #3
 8010232:	f240 80ca 	bls.w	80103ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010240:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 80b7 	beq.w	80103b8 <icmp_input+0x1b4>
 801024a:	2b08      	cmp	r3, #8
 801024c:	f040 80b7 	bne.w	80103be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010250:	4b69      	ldr	r3, [pc, #420]	; (80103f8 <icmp_input+0x1f4>)
 8010252:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010254:	4b67      	ldr	r3, [pc, #412]	; (80103f4 <icmp_input+0x1f0>)
 8010256:	695b      	ldr	r3, [r3, #20]
 8010258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801025c:	2be0      	cmp	r3, #224	; 0xe0
 801025e:	f000 80bb 	beq.w	80103d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010262:	4b64      	ldr	r3, [pc, #400]	; (80103f4 <icmp_input+0x1f0>)
 8010264:	695a      	ldr	r2, [r3, #20]
 8010266:	4b63      	ldr	r3, [pc, #396]	; (80103f4 <icmp_input+0x1f0>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4619      	mov	r1, r3
 801026c:	4610      	mov	r0, r2
 801026e:	f000 fbeb 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	f040 80b1 	bne.w	80103dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	891b      	ldrh	r3, [r3, #8]
 801027e:	2b07      	cmp	r3, #7
 8010280:	f240 80a5 	bls.w	80103ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010286:	330e      	adds	r3, #14
 8010288:	4619      	mov	r1, r3
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7f8 fa26 	bl	80086dc <pbuf_add_header>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d04b      	beq.n	801032e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	891a      	ldrh	r2, [r3, #8]
 801029a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801029c:	4413      	add	r3, r2
 801029e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	891b      	ldrh	r3, [r3, #8]
 80102a4:	8b7a      	ldrh	r2, [r7, #26]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	f0c0 809a 	bcc.w	80103e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80102ac:	8b7b      	ldrh	r3, [r7, #26]
 80102ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102b2:	4619      	mov	r1, r3
 80102b4:	200e      	movs	r0, #14
 80102b6:	f7f7 ffc7 	bl	8008248 <pbuf_alloc>
 80102ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f000 8090 	beq.w	80103e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	895b      	ldrh	r3, [r3, #10]
 80102c8:	461a      	mov	r2, r3
 80102ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102cc:	3308      	adds	r3, #8
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d203      	bcs.n	80102da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80102d2:	6978      	ldr	r0, [r7, #20]
 80102d4:	f7f8 fa98 	bl	8008808 <pbuf_free>
          goto icmperr;
 80102d8:	e085      	b.n	80103e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80102e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80102e2:	4618      	mov	r0, r3
 80102e4:	f002 f987 	bl	80125f6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80102e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102ea:	4619      	mov	r1, r3
 80102ec:	6978      	ldr	r0, [r7, #20]
 80102ee:	f7f8 fa05 	bl	80086fc <pbuf_remove_header>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d009      	beq.n	801030c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80102f8:	4b40      	ldr	r3, [pc, #256]	; (80103fc <icmp_input+0x1f8>)
 80102fa:	22b6      	movs	r2, #182	; 0xb6
 80102fc:	4940      	ldr	r1, [pc, #256]	; (8010400 <icmp_input+0x1fc>)
 80102fe:	4841      	ldr	r0, [pc, #260]	; (8010404 <icmp_input+0x200>)
 8010300:	f002 fc54 	bl	8012bac <iprintf>
          pbuf_free(r);
 8010304:	6978      	ldr	r0, [r7, #20]
 8010306:	f7f8 fa7f 	bl	8008808 <pbuf_free>
          goto icmperr;
 801030a:	e06c      	b.n	80103e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801030c:	6879      	ldr	r1, [r7, #4]
 801030e:	6978      	ldr	r0, [r7, #20]
 8010310:	f7f8 fb9e 	bl	8008a50 <pbuf_copy>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801031a:	6978      	ldr	r0, [r7, #20]
 801031c:	f7f8 fa74 	bl	8008808 <pbuf_free>
          goto icmperr;
 8010320:	e061      	b.n	80103e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7f8 fa70 	bl	8008808 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	607b      	str	r3, [r7, #4]
 801032c:	e00f      	b.n	801034e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801032e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010330:	330e      	adds	r3, #14
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7f8 f9e1 	bl	80086fc <pbuf_remove_header>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d006      	beq.n	801034e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010340:	4b2e      	ldr	r3, [pc, #184]	; (80103fc <icmp_input+0x1f8>)
 8010342:	22c7      	movs	r2, #199	; 0xc7
 8010344:	4930      	ldr	r1, [pc, #192]	; (8010408 <icmp_input+0x204>)
 8010346:	482f      	ldr	r0, [pc, #188]	; (8010404 <icmp_input+0x200>)
 8010348:	f002 fc30 	bl	8012bac <iprintf>
          goto icmperr;
 801034c:	e04b      	b.n	80103e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f7f8 f9bf 	bl	80086dc <pbuf_add_header>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d12b      	bne.n	80103bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010372:	4b20      	ldr	r3, [pc, #128]	; (80103f4 <icmp_input+0x1f0>)
 8010374:	691a      	ldr	r2, [r3, #16]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	2200      	movs	r2, #0
 801037e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	2200      	movs	r2, #0
 8010384:	709a      	strb	r2, [r3, #2]
 8010386:	2200      	movs	r2, #0
 8010388:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	22ff      	movs	r2, #255	; 0xff
 801038e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2200      	movs	r2, #0
 8010394:	729a      	strb	r2, [r3, #10]
 8010396:	2200      	movs	r2, #0
 8010398:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	9302      	str	r3, [sp, #8]
 801039e:	2301      	movs	r3, #1
 80103a0:	9301      	str	r3, [sp, #4]
 80103a2:	2300      	movs	r3, #0
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	23ff      	movs	r3, #255	; 0xff
 80103a8:	2200      	movs	r2, #0
 80103aa:	69f9      	ldr	r1, [r7, #28]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fa73 	bl	8010898 <ip4_output_if>
 80103b2:	4603      	mov	r3, r0
 80103b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80103b6:	e001      	b.n	80103bc <icmp_input+0x1b8>
      break;
 80103b8:	bf00      	nop
 80103ba:	e000      	b.n	80103be <icmp_input+0x1ba>
      break;
 80103bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7f8 fa22 	bl	8008808 <pbuf_free>
  return;
 80103c4:	e013      	b.n	80103ee <icmp_input+0x1ea>
    goto lenerr;
 80103c6:	bf00      	nop
 80103c8:	e002      	b.n	80103d0 <icmp_input+0x1cc>
    goto lenerr;
 80103ca:	bf00      	nop
 80103cc:	e000      	b.n	80103d0 <icmp_input+0x1cc>
        goto lenerr;
 80103ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7f8 fa19 	bl	8008808 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80103d6:	e00a      	b.n	80103ee <icmp_input+0x1ea>
        goto icmperr;
 80103d8:	bf00      	nop
 80103da:	e004      	b.n	80103e6 <icmp_input+0x1e2>
        goto icmperr;
 80103dc:	bf00      	nop
 80103de:	e002      	b.n	80103e6 <icmp_input+0x1e2>
          goto icmperr;
 80103e0:	bf00      	nop
 80103e2:	e000      	b.n	80103e6 <icmp_input+0x1e2>
          goto icmperr;
 80103e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7f8 fa0e 	bl	8008808 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80103ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80103ee:	3728      	adds	r7, #40	; 0x28
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	2000c0d4 	.word	0x2000c0d4
 80103f8:	2000c0e8 	.word	0x2000c0e8
 80103fc:	08015c14 	.word	0x08015c14
 8010400:	08015c4c 	.word	0x08015c4c
 8010404:	08015c84 	.word	0x08015c84
 8010408:	08015cac 	.word	0x08015cac

0801040c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010418:	78fb      	ldrb	r3, [r7, #3]
 801041a:	461a      	mov	r2, r3
 801041c:	2103      	movs	r1, #3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f814 	bl	801044c <icmp_send_response>
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	460b      	mov	r3, r1
 8010436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010438:	78fb      	ldrb	r3, [r7, #3]
 801043a:	461a      	mov	r2, r3
 801043c:	210b      	movs	r1, #11
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f804 	bl	801044c <icmp_send_response>
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08c      	sub	sp, #48	; 0x30
 8010450:	af04      	add	r7, sp, #16
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	70fb      	strb	r3, [r7, #3]
 8010458:	4613      	mov	r3, r2
 801045a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801045c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010460:	2124      	movs	r1, #36	; 0x24
 8010462:	2022      	movs	r0, #34	; 0x22
 8010464:	f7f7 fef0 	bl	8008248 <pbuf_alloc>
 8010468:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d04c      	beq.n	801050a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	895b      	ldrh	r3, [r3, #10]
 8010474:	2b23      	cmp	r3, #35	; 0x23
 8010476:	d806      	bhi.n	8010486 <icmp_send_response+0x3a>
 8010478:	4b26      	ldr	r3, [pc, #152]	; (8010514 <icmp_send_response+0xc8>)
 801047a:	f240 1269 	movw	r2, #361	; 0x169
 801047e:	4926      	ldr	r1, [pc, #152]	; (8010518 <icmp_send_response+0xcc>)
 8010480:	4826      	ldr	r0, [pc, #152]	; (801051c <icmp_send_response+0xd0>)
 8010482:	f002 fb93 	bl	8012bac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	78fa      	ldrb	r2, [r7, #3]
 8010496:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	78ba      	ldrb	r2, [r7, #2]
 801049c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	2200      	movs	r2, #0
 80104a2:	711a      	strb	r2, [r3, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	2200      	movs	r2, #0
 80104ac:	719a      	strb	r2, [r3, #6]
 80104ae:	2200      	movs	r2, #0
 80104b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	f103 0008 	add.w	r0, r3, #8
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	221c      	movs	r2, #28
 80104c0:	4619      	mov	r1, r3
 80104c2:	f002 f898 	bl	80125f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80104cc:	f107 030c 	add.w	r3, r7, #12
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 f825 	bl	8010520 <ip4_route>
 80104d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d011      	beq.n	8010502 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	2200      	movs	r2, #0
 80104e2:	709a      	strb	r2, [r3, #2]
 80104e4:	2200      	movs	r2, #0
 80104e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80104e8:	f107 020c 	add.w	r2, r7, #12
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	9302      	str	r3, [sp, #8]
 80104f0:	2301      	movs	r3, #1
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	2300      	movs	r3, #0
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	23ff      	movs	r3, #255	; 0xff
 80104fa:	2100      	movs	r1, #0
 80104fc:	69f8      	ldr	r0, [r7, #28]
 80104fe:	f000 f9cb 	bl	8010898 <ip4_output_if>
  }
  pbuf_free(q);
 8010502:	69f8      	ldr	r0, [r7, #28]
 8010504:	f7f8 f980 	bl	8008808 <pbuf_free>
 8010508:	e000      	b.n	801050c <icmp_send_response+0xc0>
    return;
 801050a:	bf00      	nop
}
 801050c:	3720      	adds	r7, #32
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	08015c14 	.word	0x08015c14
 8010518:	08015ce0 	.word	0x08015ce0
 801051c:	08015c84 	.word	0x08015c84

08010520 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010528:	4b33      	ldr	r3, [pc, #204]	; (80105f8 <ip4_route+0xd8>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	60fb      	str	r3, [r7, #12]
 801052e:	e036      	b.n	801059e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d02b      	beq.n	8010598 <ip4_route+0x78>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010546:	089b      	lsrs	r3, r3, #2
 8010548:	f003 0301 	and.w	r3, r3, #1
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	d022      	beq.n	8010598 <ip4_route+0x78>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3304      	adds	r3, #4
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d01d      	beq.n	8010598 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	3304      	adds	r3, #4
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	405a      	eors	r2, r3
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	3308      	adds	r3, #8
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4013      	ands	r3, r2
 8010570:	2b00      	cmp	r3, #0
 8010572:	d101      	bne.n	8010578 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	e038      	b.n	80105ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801057e:	f003 0302 	and.w	r3, r3, #2
 8010582:	2b00      	cmp	r3, #0
 8010584:	d108      	bne.n	8010598 <ip4_route+0x78>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	330c      	adds	r3, #12
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d101      	bne.n	8010598 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	e028      	b.n	80105ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1c5      	bne.n	8010530 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80105a4:	4b15      	ldr	r3, [pc, #84]	; (80105fc <ip4_route+0xdc>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d01a      	beq.n	80105e2 <ip4_route+0xc2>
 80105ac:	4b13      	ldr	r3, [pc, #76]	; (80105fc <ip4_route+0xdc>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d012      	beq.n	80105e2 <ip4_route+0xc2>
 80105bc:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <ip4_route+0xdc>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105c4:	f003 0304 	and.w	r3, r3, #4
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00a      	beq.n	80105e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80105cc:	4b0b      	ldr	r3, [pc, #44]	; (80105fc <ip4_route+0xdc>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3304      	adds	r3, #4
 80105d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d004      	beq.n	80105e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b7f      	cmp	r3, #127	; 0x7f
 80105e0:	d101      	bne.n	80105e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80105e2:	2300      	movs	r3, #0
 80105e4:	e001      	b.n	80105ea <ip4_route+0xca>
  }

  return netif_default;
 80105e6:	4b05      	ldr	r3, [pc, #20]	; (80105fc <ip4_route+0xdc>)
 80105e8:	681b      	ldr	r3, [r3, #0]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	2000f7f8 	.word	0x2000f7f8
 80105fc:	2000f7fc 	.word	0x2000f7fc

08010600 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801060e:	f003 0301 	and.w	r3, r3, #1
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	d016      	beq.n	8010646 <ip4_input_accept+0x46>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3304      	adds	r3, #4
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d011      	beq.n	8010646 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010622:	4b0b      	ldr	r3, [pc, #44]	; (8010650 <ip4_input_accept+0x50>)
 8010624:	695a      	ldr	r2, [r3, #20]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	3304      	adds	r3, #4
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	429a      	cmp	r2, r3
 801062e:	d008      	beq.n	8010642 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010630:	4b07      	ldr	r3, [pc, #28]	; (8010650 <ip4_input_accept+0x50>)
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	6879      	ldr	r1, [r7, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	f000 fa06 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 801063c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010642:	2301      	movs	r3, #1
 8010644:	e000      	b.n	8010648 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010646:	2300      	movs	r3, #0
}
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	2000c0d4 	.word	0x2000c0d4

08010654 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	091b      	lsrs	r3, r3, #4
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b04      	cmp	r3, #4
 801066e:	d004      	beq.n	801067a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7f8 f8c9 	bl	8008808 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010676:	2300      	movs	r3, #0
 8010678:	e105      	b.n	8010886 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	f003 030f 	and.w	r3, r3, #15
 8010682:	b2db      	uxtb	r3, r3
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	b2db      	uxtb	r3, r3
 8010688:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	885b      	ldrh	r3, [r3, #2]
 801068e:	b29b      	uxth	r3, r3
 8010690:	4618      	mov	r0, r3
 8010692:	f7f6 fd11 	bl	80070b8 <lwip_htons>
 8010696:	4603      	mov	r3, r0
 8010698:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	891b      	ldrh	r3, [r3, #8]
 801069e:	89ba      	ldrh	r2, [r7, #12]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d204      	bcs.n	80106ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80106a4:	89bb      	ldrh	r3, [r7, #12]
 80106a6:	4619      	mov	r1, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7f7 ff27 	bl	80084fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	895b      	ldrh	r3, [r3, #10]
 80106b2:	89fa      	ldrh	r2, [r7, #14]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d807      	bhi.n	80106c8 <ip4_input+0x74>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	891b      	ldrh	r3, [r3, #8]
 80106bc:	89ba      	ldrh	r2, [r7, #12]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d802      	bhi.n	80106c8 <ip4_input+0x74>
 80106c2:	89fb      	ldrh	r3, [r7, #14]
 80106c4:	2b13      	cmp	r3, #19
 80106c6:	d804      	bhi.n	80106d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7f8 f89d 	bl	8008808 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	e0d9      	b.n	8010886 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	4a6e      	ldr	r2, [pc, #440]	; (8010890 <ip4_input+0x23c>)
 80106d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	4a6c      	ldr	r2, [pc, #432]	; (8010890 <ip4_input+0x23c>)
 80106e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80106e2:	4b6b      	ldr	r3, [pc, #428]	; (8010890 <ip4_input+0x23c>)
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106ea:	2be0      	cmp	r3, #224	; 0xe0
 80106ec:	d112      	bne.n	8010714 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106f4:	f003 0301 	and.w	r3, r3, #1
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d007      	beq.n	801070e <ip4_input+0xba>
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	3304      	adds	r3, #4
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <ip4_input+0xba>
      netif = inp;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	613b      	str	r3, [r7, #16]
 801070c:	e02a      	b.n	8010764 <ip4_input+0x110>
    } else {
      netif = NULL;
 801070e:	2300      	movs	r3, #0
 8010710:	613b      	str	r3, [r7, #16]
 8010712:	e027      	b.n	8010764 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010714:	6838      	ldr	r0, [r7, #0]
 8010716:	f7ff ff73 	bl	8010600 <ip4_input_accept>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <ip4_input+0xd2>
      netif = inp;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	613b      	str	r3, [r7, #16]
 8010724:	e01e      	b.n	8010764 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010726:	2300      	movs	r3, #0
 8010728:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801072a:	4b59      	ldr	r3, [pc, #356]	; (8010890 <ip4_input+0x23c>)
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b7f      	cmp	r3, #127	; 0x7f
 8010732:	d017      	beq.n	8010764 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010734:	4b57      	ldr	r3, [pc, #348]	; (8010894 <ip4_input+0x240>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	613b      	str	r3, [r7, #16]
 801073a:	e00e      	b.n	801075a <ip4_input+0x106>
          if (netif == inp) {
 801073c:	693a      	ldr	r2, [r7, #16]
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	d006      	beq.n	8010752 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010744:	6938      	ldr	r0, [r7, #16]
 8010746:	f7ff ff5b 	bl	8010600 <ip4_input_accept>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d108      	bne.n	8010762 <ip4_input+0x10e>
 8010750:	e000      	b.n	8010754 <ip4_input+0x100>
            continue;
 8010752:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	613b      	str	r3, [r7, #16]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d1ed      	bne.n	801073c <ip4_input+0xe8>
 8010760:	e000      	b.n	8010764 <ip4_input+0x110>
            break;
 8010762:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010764:	4b4a      	ldr	r3, [pc, #296]	; (8010890 <ip4_input+0x23c>)
 8010766:	691b      	ldr	r3, [r3, #16]
 8010768:	6839      	ldr	r1, [r7, #0]
 801076a:	4618      	mov	r0, r3
 801076c:	f000 f96c 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d105      	bne.n	8010782 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010776:	4b46      	ldr	r3, [pc, #280]	; (8010890 <ip4_input+0x23c>)
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801077e:	2be0      	cmp	r3, #224	; 0xe0
 8010780:	d104      	bne.n	801078c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7f8 f840 	bl	8008808 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010788:	2300      	movs	r3, #0
 801078a:	e07c      	b.n	8010886 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7f8 f838 	bl	8008808 <pbuf_free>
    return ERR_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	e074      	b.n	8010886 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	88db      	ldrh	r3, [r3, #6]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	461a      	mov	r2, r3
 80107a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80107a8:	4013      	ands	r3, r2
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00b      	beq.n	80107c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 fc90 	bl	80110d4 <ip4_reass>
 80107b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d101      	bne.n	80107c0 <ip4_input+0x16c>
      return ERR_OK;
 80107bc:	2300      	movs	r3, #0
 80107be:	e062      	b.n	8010886 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80107c6:	4a32      	ldr	r2, [pc, #200]	; (8010890 <ip4_input+0x23c>)
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80107cc:	4a30      	ldr	r2, [pc, #192]	; (8010890 <ip4_input+0x23c>)
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80107d2:	4a2f      	ldr	r2, [pc, #188]	; (8010890 <ip4_input+0x23c>)
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	4b29      	ldr	r3, [pc, #164]	; (8010890 <ip4_input+0x23c>)
 80107ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80107ec:	89fb      	ldrh	r3, [r7, #14]
 80107ee:	4619      	mov	r1, r3
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7f7 ff83 	bl	80086fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	7a5b      	ldrb	r3, [r3, #9]
 80107fa:	2b06      	cmp	r3, #6
 80107fc:	d009      	beq.n	8010812 <ip4_input+0x1be>
 80107fe:	2b11      	cmp	r3, #17
 8010800:	d002      	beq.n	8010808 <ip4_input+0x1b4>
 8010802:	2b01      	cmp	r3, #1
 8010804:	d00a      	beq.n	801081c <ip4_input+0x1c8>
 8010806:	e00e      	b.n	8010826 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7fe fc6a 	bl	800f0e4 <udp_input>
        break;
 8010810:	e026      	b.n	8010860 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7fa f84f 	bl	800a8b8 <tcp_input>
        break;
 801081a:	e021      	b.n	8010860 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801081c:	6839      	ldr	r1, [r7, #0]
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f7ff fcf0 	bl	8010204 <icmp_input>
        break;
 8010824:	e01c      	b.n	8010860 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010826:	4b1a      	ldr	r3, [pc, #104]	; (8010890 <ip4_input+0x23c>)
 8010828:	695b      	ldr	r3, [r3, #20]
 801082a:	6939      	ldr	r1, [r7, #16]
 801082c:	4618      	mov	r0, r3
 801082e:	f000 f90b 	bl	8010a48 <ip4_addr_isbroadcast_u32>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10f      	bne.n	8010858 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010838:	4b15      	ldr	r3, [pc, #84]	; (8010890 <ip4_input+0x23c>)
 801083a:	695b      	ldr	r3, [r3, #20]
 801083c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010840:	2be0      	cmp	r3, #224	; 0xe0
 8010842:	d009      	beq.n	8010858 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7f7 ffc9 	bl	80087e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010850:	2102      	movs	r1, #2
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff fdda 	bl	801040c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7f7 ffd5 	bl	8008808 <pbuf_free>
        break;
 801085e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010860:	4b0b      	ldr	r3, [pc, #44]	; (8010890 <ip4_input+0x23c>)
 8010862:	2200      	movs	r2, #0
 8010864:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010866:	4b0a      	ldr	r3, [pc, #40]	; (8010890 <ip4_input+0x23c>)
 8010868:	2200      	movs	r2, #0
 801086a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801086c:	4b08      	ldr	r3, [pc, #32]	; (8010890 <ip4_input+0x23c>)
 801086e:	2200      	movs	r2, #0
 8010870:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010872:	4b07      	ldr	r3, [pc, #28]	; (8010890 <ip4_input+0x23c>)
 8010874:	2200      	movs	r2, #0
 8010876:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010878:	4b05      	ldr	r3, [pc, #20]	; (8010890 <ip4_input+0x23c>)
 801087a:	2200      	movs	r2, #0
 801087c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801087e:	4b04      	ldr	r3, [pc, #16]	; (8010890 <ip4_input+0x23c>)
 8010880:	2200      	movs	r2, #0
 8010882:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3718      	adds	r7, #24
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	2000c0d4 	.word	0x2000c0d4
 8010894:	2000f7f8 	.word	0x2000f7f8

08010898 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08a      	sub	sp, #40	; 0x28
 801089c:	af04      	add	r7, sp, #16
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d009      	beq.n	80108c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <ip4_output_if+0x26>
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d102      	bne.n	80108c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	3304      	adds	r3, #4
 80108c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80108c4:	78fa      	ldrb	r2, [r7, #3]
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	9302      	str	r3, [sp, #8]
 80108ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	4613      	mov	r3, r2
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	6979      	ldr	r1, [r7, #20]
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f000 f805 	bl	80108ec <ip4_output_if_src>
 80108e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3718      	adds	r7, #24
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
 80108f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	7b9b      	ldrb	r3, [r3, #14]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d006      	beq.n	8010910 <ip4_output_if_src+0x24>
 8010902:	4b4b      	ldr	r3, [pc, #300]	; (8010a30 <ip4_output_if_src+0x144>)
 8010904:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010908:	494a      	ldr	r1, [pc, #296]	; (8010a34 <ip4_output_if_src+0x148>)
 801090a:	484b      	ldr	r0, [pc, #300]	; (8010a38 <ip4_output_if_src+0x14c>)
 801090c:	f002 f94e 	bl	8012bac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d060      	beq.n	80109d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010916:	2314      	movs	r3, #20
 8010918:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801091a:	2114      	movs	r1, #20
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f7f7 fedd 	bl	80086dc <pbuf_add_header>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010928:	f06f 0301 	mvn.w	r3, #1
 801092c:	e07c      	b.n	8010a28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	895b      	ldrh	r3, [r3, #10]
 8010938:	2b13      	cmp	r3, #19
 801093a:	d806      	bhi.n	801094a <ip4_output_if_src+0x5e>
 801093c:	4b3c      	ldr	r3, [pc, #240]	; (8010a30 <ip4_output_if_src+0x144>)
 801093e:	f240 3289 	movw	r2, #905	; 0x389
 8010942:	493e      	ldr	r1, [pc, #248]	; (8010a3c <ip4_output_if_src+0x150>)
 8010944:	483c      	ldr	r0, [pc, #240]	; (8010a38 <ip4_output_if_src+0x14c>)
 8010946:	f002 f931 	bl	8012bac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	78fa      	ldrb	r2, [r7, #3]
 801094e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010956:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010960:	8b7b      	ldrh	r3, [r7, #26]
 8010962:	089b      	lsrs	r3, r3, #2
 8010964:	b29b      	uxth	r3, r3
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801096c:	b2da      	uxtb	r2, r3
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010978:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	891b      	ldrh	r3, [r3, #8]
 801097e:	4618      	mov	r0, r3
 8010980:	f7f6 fb9a 	bl	80070b8 <lwip_htons>
 8010984:	4603      	mov	r3, r0
 8010986:	461a      	mov	r2, r3
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	2200      	movs	r2, #0
 8010990:	719a      	strb	r2, [r3, #6]
 8010992:	2200      	movs	r2, #0
 8010994:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010996:	4b2a      	ldr	r3, [pc, #168]	; (8010a40 <ip4_output_if_src+0x154>)
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	4618      	mov	r0, r3
 801099c:	f7f6 fb8c 	bl	80070b8 <lwip_htons>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80109a8:	4b25      	ldr	r3, [pc, #148]	; (8010a40 <ip4_output_if_src+0x154>)
 80109aa:	881b      	ldrh	r3, [r3, #0]
 80109ac:	3301      	adds	r3, #1
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	4b23      	ldr	r3, [pc, #140]	; (8010a40 <ip4_output_if_src+0x154>)
 80109b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d104      	bne.n	80109c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80109ba:	4b22      	ldr	r3, [pc, #136]	; (8010a44 <ip4_output_if_src+0x158>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	60da      	str	r2, [r3, #12]
 80109c2:	e003      	b.n	80109cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	2200      	movs	r2, #0
 80109d0:	729a      	strb	r2, [r3, #10]
 80109d2:	2200      	movs	r2, #0
 80109d4:	72da      	strb	r2, [r3, #11]
 80109d6:	e00f      	b.n	80109f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	895b      	ldrh	r3, [r3, #10]
 80109dc:	2b13      	cmp	r3, #19
 80109de:	d802      	bhi.n	80109e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80109e0:	f06f 0301 	mvn.w	r3, #1
 80109e4:	e020      	b.n	8010a28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80109f2:	f107 0314 	add.w	r3, r7, #20
 80109f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80109f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00c      	beq.n	8010a1a <ip4_output_if_src+0x12e>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	891a      	ldrh	r2, [r3, #8]
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d906      	bls.n	8010a1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f000 fd4b 	bl	80114ac <ip4_frag>
 8010a16:	4603      	mov	r3, r0
 8010a18:	e006      	b.n	8010a28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	695b      	ldr	r3, [r3, #20]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	68f9      	ldr	r1, [r7, #12]
 8010a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a24:	4798      	blx	r3
 8010a26:	4603      	mov	r3, r0
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3720      	adds	r7, #32
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08015d0c 	.word	0x08015d0c
 8010a34:	08015d40 	.word	0x08015d40
 8010a38:	08015d4c 	.word	0x08015d4c
 8010a3c:	08015d74 	.word	0x08015d74
 8010a40:	20008bd6 	.word	0x20008bd6
 8010a44:	080161ec 	.word	0x080161ec

08010a48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5c:	d002      	beq.n	8010a64 <ip4_addr_isbroadcast_u32+0x1c>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d101      	bne.n	8010a68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010a64:	2301      	movs	r3, #1
 8010a66:	e02a      	b.n	8010abe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a6e:	f003 0302 	and.w	r3, r3, #2
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e021      	b.n	8010abe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d101      	bne.n	8010a8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010a86:	2300      	movs	r3, #0
 8010a88:	e019      	b.n	8010abe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	3304      	adds	r3, #4
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	405a      	eors	r2, r3
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	3308      	adds	r3, #8
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d10d      	bne.n	8010abc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	3308      	adds	r3, #8
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	43da      	mvns	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	3308      	adds	r3, #8
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d101      	bne.n	8010abc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e000      	b.n	8010abe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010abc:	2300      	movs	r3, #0
  }
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
	...

08010acc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010ad6:	4b12      	ldr	r3, [pc, #72]	; (8010b20 <ip_reass_tmr+0x54>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010adc:	e018      	b.n	8010b10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	7fdb      	ldrb	r3, [r3, #31]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d00b      	beq.n	8010afe <ip_reass_tmr+0x32>
      r->timer--;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	7fdb      	ldrb	r3, [r3, #31]
 8010aea:	3b01      	subs	r3, #1
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	60fb      	str	r3, [r7, #12]
 8010afc:	e008      	b.n	8010b10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010b08:	68b9      	ldr	r1, [r7, #8]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f80a 	bl	8010b24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1e3      	bne.n	8010ade <ip_reass_tmr+0x12>
    }
  }
}
 8010b16:	bf00      	nop
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	20008bd8 	.word	0x20008bd8

08010b24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b088      	sub	sp, #32
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d105      	bne.n	8010b46 <ip_reass_free_complete_datagram+0x22>
 8010b3a:	4b45      	ldr	r3, [pc, #276]	; (8010c50 <ip_reass_free_complete_datagram+0x12c>)
 8010b3c:	22ab      	movs	r2, #171	; 0xab
 8010b3e:	4945      	ldr	r1, [pc, #276]	; (8010c54 <ip_reass_free_complete_datagram+0x130>)
 8010b40:	4845      	ldr	r0, [pc, #276]	; (8010c58 <ip_reass_free_complete_datagram+0x134>)
 8010b42:	f002 f833 	bl	8012bac <iprintf>
  if (prev != NULL) {
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00a      	beq.n	8010b62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d005      	beq.n	8010b62 <ip_reass_free_complete_datagram+0x3e>
 8010b56:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <ip_reass_free_complete_datagram+0x12c>)
 8010b58:	22ad      	movs	r2, #173	; 0xad
 8010b5a:	4940      	ldr	r1, [pc, #256]	; (8010c5c <ip_reass_free_complete_datagram+0x138>)
 8010b5c:	483e      	ldr	r0, [pc, #248]	; (8010c58 <ip_reass_free_complete_datagram+0x134>)
 8010b5e:	f002 f825 	bl	8012bac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	889b      	ldrh	r3, [r3, #4]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d12a      	bne.n	8010bca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	6858      	ldr	r0, [r3, #4]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	3308      	adds	r3, #8
 8010b8a:	2214      	movs	r2, #20
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	f001 fd32 	bl	80125f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010b92:	2101      	movs	r1, #1
 8010b94:	69b8      	ldr	r0, [r7, #24]
 8010b96:	f7ff fc49 	bl	801042c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010b9a:	69b8      	ldr	r0, [r7, #24]
 8010b9c:	f7f7 fec2 	bl	8008924 <pbuf_clen>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010ba4:	8bfa      	ldrh	r2, [r7, #30]
 8010ba6:	8a7b      	ldrh	r3, [r7, #18]
 8010ba8:	4413      	add	r3, r2
 8010baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bae:	db05      	blt.n	8010bbc <ip_reass_free_complete_datagram+0x98>
 8010bb0:	4b27      	ldr	r3, [pc, #156]	; (8010c50 <ip_reass_free_complete_datagram+0x12c>)
 8010bb2:	22bc      	movs	r2, #188	; 0xbc
 8010bb4:	492a      	ldr	r1, [pc, #168]	; (8010c60 <ip_reass_free_complete_datagram+0x13c>)
 8010bb6:	4828      	ldr	r0, [pc, #160]	; (8010c58 <ip_reass_free_complete_datagram+0x134>)
 8010bb8:	f001 fff8 	bl	8012bac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010bbc:	8bfa      	ldrh	r2, [r7, #30]
 8010bbe:	8a7b      	ldrh	r3, [r7, #18]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010bc4:	69b8      	ldr	r0, [r7, #24]
 8010bc6:	f7f7 fe1f 	bl	8008808 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010bd0:	e01f      	b.n	8010c12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f7f7 fe9e 	bl	8008924 <pbuf_clen>
 8010be8:	4603      	mov	r3, r0
 8010bea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010bec:	8bfa      	ldrh	r2, [r7, #30]
 8010bee:	8a7b      	ldrh	r3, [r7, #18]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bf6:	db05      	blt.n	8010c04 <ip_reass_free_complete_datagram+0xe0>
 8010bf8:	4b15      	ldr	r3, [pc, #84]	; (8010c50 <ip_reass_free_complete_datagram+0x12c>)
 8010bfa:	22cc      	movs	r2, #204	; 0xcc
 8010bfc:	4918      	ldr	r1, [pc, #96]	; (8010c60 <ip_reass_free_complete_datagram+0x13c>)
 8010bfe:	4816      	ldr	r0, [pc, #88]	; (8010c58 <ip_reass_free_complete_datagram+0x134>)
 8010c00:	f001 ffd4 	bl	8012bac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010c04:	8bfa      	ldrh	r2, [r7, #30]
 8010c06:	8a7b      	ldrh	r3, [r7, #18]
 8010c08:	4413      	add	r3, r2
 8010c0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7f7 fdfb 	bl	8008808 <pbuf_free>
  while (p != NULL) {
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1dc      	bne.n	8010bd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010c18:	6839      	ldr	r1, [r7, #0]
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 f8c2 	bl	8010da4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010c20:	4b10      	ldr	r3, [pc, #64]	; (8010c64 <ip_reass_free_complete_datagram+0x140>)
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	8bfa      	ldrh	r2, [r7, #30]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d905      	bls.n	8010c36 <ip_reass_free_complete_datagram+0x112>
 8010c2a:	4b09      	ldr	r3, [pc, #36]	; (8010c50 <ip_reass_free_complete_datagram+0x12c>)
 8010c2c:	22d2      	movs	r2, #210	; 0xd2
 8010c2e:	490e      	ldr	r1, [pc, #56]	; (8010c68 <ip_reass_free_complete_datagram+0x144>)
 8010c30:	4809      	ldr	r0, [pc, #36]	; (8010c58 <ip_reass_free_complete_datagram+0x134>)
 8010c32:	f001 ffbb 	bl	8012bac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010c36:	4b0b      	ldr	r3, [pc, #44]	; (8010c64 <ip_reass_free_complete_datagram+0x140>)
 8010c38:	881a      	ldrh	r2, [r3, #0]
 8010c3a:	8bfb      	ldrh	r3, [r7, #30]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <ip_reass_free_complete_datagram+0x140>)
 8010c42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010c44:	8bfb      	ldrh	r3, [r7, #30]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3720      	adds	r7, #32
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	08015da4 	.word	0x08015da4
 8010c54:	08015de0 	.word	0x08015de0
 8010c58:	08015dec 	.word	0x08015dec
 8010c5c:	08015e14 	.word	0x08015e14
 8010c60:	08015e28 	.word	0x08015e28
 8010c64:	20008bdc 	.word	0x20008bdc
 8010c68:	08015e48 	.word	0x08015e48

08010c6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b08a      	sub	sp, #40	; 0x28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010c76:	2300      	movs	r3, #0
 8010c78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010c8a:	4b28      	ldr	r3, [pc, #160]	; (8010d2c <ip_reass_remove_oldest_datagram+0xc0>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010c90:	e030      	b.n	8010cf4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	695a      	ldr	r2, [r3, #20]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d10c      	bne.n	8010cb8 <ip_reass_remove_oldest_datagram+0x4c>
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	699a      	ldr	r2, [r3, #24]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d106      	bne.n	8010cb8 <ip_reass_remove_oldest_datagram+0x4c>
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	899a      	ldrh	r2, [r3, #12]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	889b      	ldrh	r3, [r3, #4]
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d014      	beq.n	8010ce2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010cbe:	6a3b      	ldr	r3, [r7, #32]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d104      	bne.n	8010cce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	61bb      	str	r3, [r7, #24]
 8010ccc:	e009      	b.n	8010ce2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd0:	7fda      	ldrb	r2, [r3, #31]
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	7fdb      	ldrb	r3, [r3, #31]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d803      	bhi.n	8010ce2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1cb      	bne.n	8010c92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d008      	beq.n	8010d12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010d00:	69b9      	ldr	r1, [r7, #24]
 8010d02:	6a38      	ldr	r0, [r7, #32]
 8010d04:	f7ff ff0e 	bl	8010b24 <ip_reass_free_complete_datagram>
 8010d08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010d0a:	697a      	ldr	r2, [r7, #20]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	4413      	add	r3, r2
 8010d10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010d12:	697a      	ldr	r2, [r7, #20]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	da02      	bge.n	8010d20 <ip_reass_remove_oldest_datagram+0xb4>
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	dcac      	bgt.n	8010c7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010d20:	697b      	ldr	r3, [r7, #20]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3728      	adds	r7, #40	; 0x28
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20008bd8 	.word	0x20008bd8

08010d30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b084      	sub	sp, #16
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010d3a:	2004      	movs	r0, #4
 8010d3c:	f7f6 fe72 	bl	8007a24 <memp_malloc>
 8010d40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d110      	bne.n	8010d6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f7ff ff8e 	bl	8010c6c <ip_reass_remove_oldest_datagram>
 8010d50:	4602      	mov	r2, r0
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	4293      	cmp	r3, r2
 8010d56:	dc03      	bgt.n	8010d60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010d58:	2004      	movs	r0, #4
 8010d5a:	f7f6 fe63 	bl	8007a24 <memp_malloc>
 8010d5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d101      	bne.n	8010d6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	e016      	b.n	8010d98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f001 fc4c 	bl	801260c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	220f      	movs	r2, #15
 8010d78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010d7a:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <ip_reass_enqueue_new_datagram+0x70>)
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010d82:	4a07      	ldr	r2, [pc, #28]	; (8010da0 <ip_reass_enqueue_new_datagram+0x70>)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	3308      	adds	r3, #8
 8010d8c:	2214      	movs	r2, #20
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f001 fc30 	bl	80125f6 <memcpy>
  return ipr;
 8010d96:	68fb      	ldr	r3, [r7, #12]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20008bd8 	.word	0x20008bd8

08010da4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010dae:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <ip_reass_dequeue_datagram+0x4c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d104      	bne.n	8010dc2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a0c      	ldr	r2, [pc, #48]	; (8010df0 <ip_reass_dequeue_datagram+0x4c>)
 8010dbe:	6013      	str	r3, [r2, #0]
 8010dc0:	e00d      	b.n	8010dde <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d106      	bne.n	8010dd6 <ip_reass_dequeue_datagram+0x32>
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <ip_reass_dequeue_datagram+0x50>)
 8010dca:	f240 1245 	movw	r2, #325	; 0x145
 8010dce:	490a      	ldr	r1, [pc, #40]	; (8010df8 <ip_reass_dequeue_datagram+0x54>)
 8010dd0:	480a      	ldr	r0, [pc, #40]	; (8010dfc <ip_reass_dequeue_datagram+0x58>)
 8010dd2:	f001 feeb 	bl	8012bac <iprintf>
    prev->next = ipr->next;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	2004      	movs	r0, #4
 8010de2:	f7f6 fe71 	bl	8007ac8 <memp_free>
}
 8010de6:	bf00      	nop
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20008bd8 	.word	0x20008bd8
 8010df4:	08015da4 	.word	0x08015da4
 8010df8:	08015e6c 	.word	0x08015e6c
 8010dfc:	08015dec 	.word	0x08015dec

08010e00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b08c      	sub	sp, #48	; 0x30
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010e10:	2301      	movs	r3, #1
 8010e12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	885b      	ldrh	r3, [r3, #2]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7f6 f949 	bl	80070b8 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	f003 030f 	and.w	r3, r3, #15
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010e38:	7e7b      	ldrb	r3, [r7, #25]
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	8b7a      	ldrh	r2, [r7, #26]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d202      	bcs.n	8010e48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010e42:	f04f 33ff 	mov.w	r3, #4294967295
 8010e46:	e135      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010e48:	7e7b      	ldrb	r3, [r7, #25]
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	8b7a      	ldrh	r2, [r7, #26]
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	88db      	ldrh	r3, [r3, #6]
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f6 f92d 	bl	80070b8 <lwip_htons>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e72:	2200      	movs	r2, #0
 8010e74:	701a      	strb	r2, [r3, #0]
 8010e76:	2200      	movs	r2, #0
 8010e78:	705a      	strb	r2, [r3, #1]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	709a      	strb	r2, [r3, #2]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e84:	8afa      	ldrh	r2, [r7, #22]
 8010e86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010e88:	8afa      	ldrh	r2, [r7, #22]
 8010e8a:	8b7b      	ldrh	r3, [r7, #26]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e96:	88db      	ldrh	r3, [r3, #6]
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	8afa      	ldrh	r2, [r7, #22]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d902      	bls.n	8010ea6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ea4:	e106      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8010eac:	e068      	b.n	8010f80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb6:	889b      	ldrh	r3, [r3, #4]
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	889b      	ldrh	r3, [r3, #4]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d235      	bcs.n	8010f30 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ec8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d020      	beq.n	8010f12 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed2:	889b      	ldrh	r3, [r3, #4]
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed8:	88db      	ldrh	r3, [r3, #6]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d307      	bcc.n	8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee2:	88db      	ldrh	r3, [r3, #6]
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	889b      	ldrh	r3, [r3, #4]
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d902      	bls.n	8010ef6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ef4:	e0de      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efe:	88db      	ldrh	r3, [r3, #6]
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	889b      	ldrh	r3, [r3, #4]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d03d      	beq.n	8010f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010f10:	e03a      	b.n	8010f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f14:	88db      	ldrh	r3, [r3, #6]
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	889b      	ldrh	r3, [r3, #4]
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d902      	bls.n	8010f28 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f22:	f04f 33ff 	mov.w	r3, #4294967295
 8010f26:	e0c5      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	605a      	str	r2, [r3, #4]
      break;
 8010f2e:	e02b      	b.n	8010f88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	889b      	ldrh	r3, [r3, #4]
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	889b      	ldrh	r3, [r3, #4]
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d102      	bne.n	8010f46 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f40:	f04f 33ff 	mov.w	r3, #4294967295
 8010f44:	e0b6      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f48:	889b      	ldrh	r3, [r3, #4]
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	88db      	ldrh	r3, [r3, #6]
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d202      	bcs.n	8010f5c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f56:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5a:	e0ab      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d009      	beq.n	8010f76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f64:	88db      	ldrh	r3, [r3, #6]
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	889b      	ldrh	r3, [r3, #4]
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d001      	beq.n	8010f76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d193      	bne.n	8010eae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010f86:	e000      	b.n	8010f8a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010f88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d12d      	bne.n	8010fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d01c      	beq.n	8010fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f98:	88db      	ldrh	r3, [r3, #6]
 8010f9a:	b29a      	uxth	r2, r3
 8010f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9e:	889b      	ldrh	r3, [r3, #4]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d906      	bls.n	8010fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010fa6:	4b45      	ldr	r3, [pc, #276]	; (80110bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010fa8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010fac:	4944      	ldr	r1, [pc, #272]	; (80110c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010fae:	4845      	ldr	r0, [pc, #276]	; (80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010fb0:	f001 fdfc 	bl	8012bac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	88db      	ldrh	r3, [r3, #6]
 8010fbe:	b29a      	uxth	r2, r3
 8010fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc2:	889b      	ldrh	r3, [r3, #4]
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d010      	beq.n	8010fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	623b      	str	r3, [r7, #32]
 8010fce:	e00d      	b.n	8010fec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d006      	beq.n	8010fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010fd8:	4b38      	ldr	r3, [pc, #224]	; (80110bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010fda:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010fde:	493a      	ldr	r1, [pc, #232]	; (80110c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010fe0:	4838      	ldr	r0, [pc, #224]	; (80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010fe2:	f001 fde3 	bl	8012bac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d105      	bne.n	8010ffe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	7f9b      	ldrb	r3, [r3, #30]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d059      	beq.n	80110b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d04f      	beq.n	80110a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d006      	beq.n	801101a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	889b      	ldrh	r3, [r3, #4]
 8011014:	b29b      	uxth	r3, r3
 8011016:	2b00      	cmp	r3, #0
 8011018:	d002      	beq.n	8011020 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	623b      	str	r3, [r7, #32]
 801101e:	e041      	b.n	80110a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801102a:	e012      	b.n	8011052 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011034:	88db      	ldrh	r3, [r3, #6]
 8011036:	b29a      	uxth	r2, r3
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	889b      	ldrh	r3, [r3, #4]
 801103c:	b29b      	uxth	r3, r3
 801103e:	429a      	cmp	r2, r3
 8011040:	d002      	beq.n	8011048 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	623b      	str	r3, [r7, #32]
            break;
 8011046:	e007      	b.n	8011058 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e9      	bne.n	801102c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d022      	beq.n	80110a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011066:	4b15      	ldr	r3, [pc, #84]	; (80110bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011068:	f240 12df 	movw	r2, #479	; 0x1df
 801106c:	4917      	ldr	r1, [pc, #92]	; (80110cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801106e:	4815      	ldr	r0, [pc, #84]	; (80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011070:	f001 fd9c 	bl	8012bac <iprintf>
          LWIP_ASSERT("sanity check",
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801107c:	429a      	cmp	r2, r3
 801107e:	d106      	bne.n	801108e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011080:	4b0e      	ldr	r3, [pc, #56]	; (80110bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011082:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011086:	4911      	ldr	r1, [pc, #68]	; (80110cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011088:	480e      	ldr	r0, [pc, #56]	; (80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801108a:	f001 fd8f 	bl	8012bac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d006      	beq.n	80110a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011096:	4b09      	ldr	r3, [pc, #36]	; (80110bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011098:	f240 12e3 	movw	r2, #483	; 0x1e3
 801109c:	490c      	ldr	r1, [pc, #48]	; (80110d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801109e:	4809      	ldr	r0, [pc, #36]	; (80110c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80110a0:	f001 fd84 	bl	8012bac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	bf14      	ite	ne
 80110aa:	2301      	movne	r3, #1
 80110ac:	2300      	moveq	r3, #0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	e000      	b.n	80110b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3730      	adds	r7, #48	; 0x30
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	08015da4 	.word	0x08015da4
 80110c0:	08015e88 	.word	0x08015e88
 80110c4:	08015dec 	.word	0x08015dec
 80110c8:	08015ea8 	.word	0x08015ea8
 80110cc:	08015ee0 	.word	0x08015ee0
 80110d0:	08015ef0 	.word	0x08015ef0

080110d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b08e      	sub	sp, #56	; 0x38
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	f003 030f 	and.w	r3, r3, #15
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b14      	cmp	r3, #20
 80110f2:	f040 8167 	bne.w	80113c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80110f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f8:	88db      	ldrh	r3, [r3, #6]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7f5 ffdb 	bl	80070b8 <lwip_htons>
 8011102:	4603      	mov	r3, r0
 8011104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011108:	b29b      	uxth	r3, r3
 801110a:	00db      	lsls	r3, r3, #3
 801110c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011110:	885b      	ldrh	r3, [r3, #2]
 8011112:	b29b      	uxth	r3, r3
 8011114:	4618      	mov	r0, r3
 8011116:	f7f5 ffcf 	bl	80070b8 <lwip_htons>
 801111a:	4603      	mov	r3, r0
 801111c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	f003 030f 	and.w	r3, r3, #15
 8011126:	b2db      	uxtb	r3, r3
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801112e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011132:	b29b      	uxth	r3, r3
 8011134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011136:	429a      	cmp	r2, r3
 8011138:	f0c0 8146 	bcc.w	80113c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801113c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011140:	b29b      	uxth	r3, r3
 8011142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7f7 fbeb 	bl	8008924 <pbuf_clen>
 801114e:	4603      	mov	r3, r0
 8011150:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011152:	4ba3      	ldr	r3, [pc, #652]	; (80113e0 <ip4_reass+0x30c>)
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	461a      	mov	r2, r3
 8011158:	8c3b      	ldrh	r3, [r7, #32]
 801115a:	4413      	add	r3, r2
 801115c:	2b0a      	cmp	r3, #10
 801115e:	dd10      	ble.n	8011182 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011160:	8c3b      	ldrh	r3, [r7, #32]
 8011162:	4619      	mov	r1, r3
 8011164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011166:	f7ff fd81 	bl	8010c6c <ip_reass_remove_oldest_datagram>
 801116a:	4603      	mov	r3, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 812d 	beq.w	80113cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011172:	4b9b      	ldr	r3, [pc, #620]	; (80113e0 <ip4_reass+0x30c>)
 8011174:	881b      	ldrh	r3, [r3, #0]
 8011176:	461a      	mov	r2, r3
 8011178:	8c3b      	ldrh	r3, [r7, #32]
 801117a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801117c:	2b0a      	cmp	r3, #10
 801117e:	f300 8125 	bgt.w	80113cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011182:	4b98      	ldr	r3, [pc, #608]	; (80113e4 <ip4_reass+0x310>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	633b      	str	r3, [r7, #48]	; 0x30
 8011188:	e015      	b.n	80111b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118c:	695a      	ldr	r2, [r3, #20]
 801118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	429a      	cmp	r2, r3
 8011194:	d10c      	bne.n	80111b0 <ip4_reass+0xdc>
 8011196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011198:	699a      	ldr	r2, [r3, #24]
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d106      	bne.n	80111b0 <ip4_reass+0xdc>
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	899a      	ldrh	r2, [r3, #12]
 80111a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a8:	889b      	ldrh	r3, [r3, #4]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d006      	beq.n	80111be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80111b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	633b      	str	r3, [r7, #48]	; 0x30
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d1e6      	bne.n	801118a <ip4_reass+0xb6>
 80111bc:	e000      	b.n	80111c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80111be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80111c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d109      	bne.n	80111da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80111c6:	8c3b      	ldrh	r3, [r7, #32]
 80111c8:	4619      	mov	r1, r3
 80111ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111cc:	f7ff fdb0 	bl	8010d30 <ip_reass_enqueue_new_datagram>
 80111d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d11c      	bne.n	8011212 <ip4_reass+0x13e>
      goto nullreturn;
 80111d8:	e0f9      	b.n	80113ce <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	88db      	ldrh	r3, [r3, #6]
 80111de:	b29b      	uxth	r3, r3
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f5 ff69 	bl	80070b8 <lwip_htons>
 80111e6:	4603      	mov	r3, r0
 80111e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d110      	bne.n	8011212 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	89db      	ldrh	r3, [r3, #14]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7f5 ff5f 	bl	80070b8 <lwip_htons>
 80111fa:	4603      	mov	r3, r0
 80111fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011200:	2b00      	cmp	r3, #0
 8011202:	d006      	beq.n	8011212 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011206:	3308      	adds	r3, #8
 8011208:	2214      	movs	r2, #20
 801120a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801120c:	4618      	mov	r0, r3
 801120e:	f001 f9f2 	bl	80125f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011214:	88db      	ldrh	r3, [r3, #6]
 8011216:	b29b      	uxth	r3, r3
 8011218:	f003 0320 	and.w	r3, r3, #32
 801121c:	2b00      	cmp	r3, #0
 801121e:	bf0c      	ite	eq
 8011220:	2301      	moveq	r3, #1
 8011222:	2300      	movne	r3, #0
 8011224:	b2db      	uxtb	r3, r3
 8011226:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00e      	beq.n	801124c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801122e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011232:	4413      	add	r3, r2
 8011234:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011236:	8b7a      	ldrh	r2, [r7, #26]
 8011238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801123a:	429a      	cmp	r2, r3
 801123c:	f0c0 80a0 	bcc.w	8011380 <ip4_reass+0x2ac>
 8011240:	8b7b      	ldrh	r3, [r7, #26]
 8011242:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011246:	4293      	cmp	r3, r2
 8011248:	f200 809a 	bhi.w	8011380 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801124c:	69fa      	ldr	r2, [r7, #28]
 801124e:	6879      	ldr	r1, [r7, #4]
 8011250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011252:	f7ff fdd5 	bl	8010e00 <ip_reass_chain_frag_into_datagram_and_validate>
 8011256:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125e:	f000 8091 	beq.w	8011384 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011262:	4b5f      	ldr	r3, [pc, #380]	; (80113e0 <ip4_reass+0x30c>)
 8011264:	881a      	ldrh	r2, [r3, #0]
 8011266:	8c3b      	ldrh	r3, [r7, #32]
 8011268:	4413      	add	r3, r2
 801126a:	b29a      	uxth	r2, r3
 801126c:	4b5c      	ldr	r3, [pc, #368]	; (80113e0 <ip4_reass+0x30c>)
 801126e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00d      	beq.n	8011292 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801127a:	4413      	add	r3, r2
 801127c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	8a7a      	ldrh	r2, [r7, #18]
 8011282:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011286:	7f9b      	ldrb	r3, [r3, #30]
 8011288:	f043 0301 	orr.w	r3, r3, #1
 801128c:	b2da      	uxtb	r2, r3
 801128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011290:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d171      	bne.n	801137c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129a:	8b9b      	ldrh	r3, [r3, #28]
 801129c:	3314      	adds	r3, #20
 801129e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80112a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80112aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	3308      	adds	r3, #8
 80112b6:	2214      	movs	r2, #20
 80112b8:	4619      	mov	r1, r3
 80112ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112bc:	f001 f99b 	bl	80125f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80112c0:	8a3b      	ldrh	r3, [r7, #16]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f5 fef8 	bl	80070b8 <lwip_htons>
 80112c8:	4603      	mov	r3, r0
 80112ca:	461a      	mov	r2, r3
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80112d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d2:	2200      	movs	r2, #0
 80112d4:	719a      	strb	r2, [r3, #6]
 80112d6:	2200      	movs	r2, #0
 80112d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	2200      	movs	r2, #0
 80112de:	729a      	strb	r2, [r3, #10]
 80112e0:	2200      	movs	r2, #0
 80112e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80112e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80112ea:	e00d      	b.n	8011308 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80112ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80112f2:	2114      	movs	r1, #20
 80112f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80112f6:	f7f7 fa01 	bl	80086fc <pbuf_remove_header>
      pbuf_cat(p, r);
 80112fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7f7 fb51 	bl	80089a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1ee      	bne.n	80112ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801130e:	4b35      	ldr	r3, [pc, #212]	; (80113e4 <ip4_reass+0x310>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011314:	429a      	cmp	r2, r3
 8011316:	d102      	bne.n	801131e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011318:	2300      	movs	r3, #0
 801131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801131c:	e010      	b.n	8011340 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801131e:	4b31      	ldr	r3, [pc, #196]	; (80113e4 <ip4_reass+0x310>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011324:	e007      	b.n	8011336 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801132c:	429a      	cmp	r2, r3
 801132e:	d006      	beq.n	801133e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1f4      	bne.n	8011326 <ip4_reass+0x252>
 801133c:	e000      	b.n	8011340 <ip4_reass+0x26c>
          break;
 801133e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011344:	f7ff fd2e 	bl	8010da4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7f7 faeb 	bl	8008924 <pbuf_clen>
 801134e:	4603      	mov	r3, r0
 8011350:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011352:	4b23      	ldr	r3, [pc, #140]	; (80113e0 <ip4_reass+0x30c>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	8c3a      	ldrh	r2, [r7, #32]
 8011358:	429a      	cmp	r2, r3
 801135a:	d906      	bls.n	801136a <ip4_reass+0x296>
 801135c:	4b22      	ldr	r3, [pc, #136]	; (80113e8 <ip4_reass+0x314>)
 801135e:	f240 229b 	movw	r2, #667	; 0x29b
 8011362:	4922      	ldr	r1, [pc, #136]	; (80113ec <ip4_reass+0x318>)
 8011364:	4822      	ldr	r0, [pc, #136]	; (80113f0 <ip4_reass+0x31c>)
 8011366:	f001 fc21 	bl	8012bac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801136a:	4b1d      	ldr	r3, [pc, #116]	; (80113e0 <ip4_reass+0x30c>)
 801136c:	881a      	ldrh	r2, [r3, #0]
 801136e:	8c3b      	ldrh	r3, [r7, #32]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	b29a      	uxth	r2, r3
 8011374:	4b1a      	ldr	r3, [pc, #104]	; (80113e0 <ip4_reass+0x30c>)
 8011376:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	e02c      	b.n	80113d6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801137c:	2300      	movs	r3, #0
 801137e:	e02a      	b.n	80113d6 <ip4_reass+0x302>

nullreturn_ipr:
 8011380:	bf00      	nop
 8011382:	e000      	b.n	8011386 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011384:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011388:	2b00      	cmp	r3, #0
 801138a:	d106      	bne.n	801139a <ip4_reass+0x2c6>
 801138c:	4b16      	ldr	r3, [pc, #88]	; (80113e8 <ip4_reass+0x314>)
 801138e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011392:	4918      	ldr	r1, [pc, #96]	; (80113f4 <ip4_reass+0x320>)
 8011394:	4816      	ldr	r0, [pc, #88]	; (80113f0 <ip4_reass+0x31c>)
 8011396:	f001 fc09 	bl	8012bac <iprintf>
  if (ipr->p == NULL) {
 801139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d114      	bne.n	80113cc <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80113a2:	4b10      	ldr	r3, [pc, #64]	; (80113e4 <ip4_reass+0x310>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d006      	beq.n	80113ba <ip4_reass+0x2e6>
 80113ac:	4b0e      	ldr	r3, [pc, #56]	; (80113e8 <ip4_reass+0x314>)
 80113ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80113b2:	4911      	ldr	r1, [pc, #68]	; (80113f8 <ip4_reass+0x324>)
 80113b4:	480e      	ldr	r0, [pc, #56]	; (80113f0 <ip4_reass+0x31c>)
 80113b6:	f001 fbf9 	bl	8012bac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80113ba:	2100      	movs	r1, #0
 80113bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113be:	f7ff fcf1 	bl	8010da4 <ip_reass_dequeue_datagram>
 80113c2:	e004      	b.n	80113ce <ip4_reass+0x2fa>
    goto nullreturn;
 80113c4:	bf00      	nop
 80113c6:	e002      	b.n	80113ce <ip4_reass+0x2fa>
    goto nullreturn;
 80113c8:	bf00      	nop
 80113ca:	e000      	b.n	80113ce <ip4_reass+0x2fa>
  }

nullreturn:
 80113cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7f7 fa1a 	bl	8008808 <pbuf_free>
  return NULL;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3738      	adds	r7, #56	; 0x38
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	20008bdc 	.word	0x20008bdc
 80113e4:	20008bd8 	.word	0x20008bd8
 80113e8:	08015da4 	.word	0x08015da4
 80113ec:	08015f14 	.word	0x08015f14
 80113f0:	08015dec 	.word	0x08015dec
 80113f4:	08015f30 	.word	0x08015f30
 80113f8:	08015f3c 	.word	0x08015f3c

080113fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011400:	2005      	movs	r0, #5
 8011402:	f7f6 fb0f 	bl	8007a24 <memp_malloc>
 8011406:	4603      	mov	r3, r0
}
 8011408:	4618      	mov	r0, r3
 801140a:	bd80      	pop	{r7, pc}

0801140c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <ip_frag_free_pbuf_custom_ref+0x1c>
 801141a:	4b07      	ldr	r3, [pc, #28]	; (8011438 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801141c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011420:	4906      	ldr	r1, [pc, #24]	; (801143c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011422:	4807      	ldr	r0, [pc, #28]	; (8011440 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011424:	f001 fbc2 	bl	8012bac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011428:	6879      	ldr	r1, [r7, #4]
 801142a:	2005      	movs	r0, #5
 801142c:	f7f6 fb4c 	bl	8007ac8 <memp_free>
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	08015da4 	.word	0x08015da4
 801143c:	08015f5c 	.word	0x08015f5c
 8011440:	08015dec 	.word	0x08015dec

08011444 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <ipfrag_free_pbuf_custom+0x20>
 8011456:	4b11      	ldr	r3, [pc, #68]	; (801149c <ipfrag_free_pbuf_custom+0x58>)
 8011458:	f240 22ce 	movw	r2, #718	; 0x2ce
 801145c:	4910      	ldr	r1, [pc, #64]	; (80114a0 <ipfrag_free_pbuf_custom+0x5c>)
 801145e:	4811      	ldr	r0, [pc, #68]	; (80114a4 <ipfrag_free_pbuf_custom+0x60>)
 8011460:	f001 fba4 	bl	8012bac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	429a      	cmp	r2, r3
 801146a:	d006      	beq.n	801147a <ipfrag_free_pbuf_custom+0x36>
 801146c:	4b0b      	ldr	r3, [pc, #44]	; (801149c <ipfrag_free_pbuf_custom+0x58>)
 801146e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011472:	490d      	ldr	r1, [pc, #52]	; (80114a8 <ipfrag_free_pbuf_custom+0x64>)
 8011474:	480b      	ldr	r0, [pc, #44]	; (80114a4 <ipfrag_free_pbuf_custom+0x60>)
 8011476:	f001 fb99 	bl	8012bac <iprintf>
  if (pcr->original != NULL) {
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	695b      	ldr	r3, [r3, #20]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d004      	beq.n	801148c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	695b      	ldr	r3, [r3, #20]
 8011486:	4618      	mov	r0, r3
 8011488:	f7f7 f9be 	bl	8008808 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7ff ffbd 	bl	801140c <ip_frag_free_pbuf_custom_ref>
}
 8011492:	bf00      	nop
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	08015da4 	.word	0x08015da4
 80114a0:	08015f68 	.word	0x08015f68
 80114a4:	08015dec 	.word	0x08015dec
 80114a8:	08015f74 	.word	0x08015f74

080114ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b094      	sub	sp, #80	; 0x50
 80114b0:	af02      	add	r7, sp, #8
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80114c2:	3b14      	subs	r3, #20
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	da00      	bge.n	80114ca <ip4_frag+0x1e>
 80114c8:	3307      	adds	r3, #7
 80114ca:	10db      	asrs	r3, r3, #3
 80114cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80114ce:	2314      	movs	r3, #20
 80114d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80114d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114da:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	f003 030f 	and.w	r3, r3, #15
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	2b14      	cmp	r3, #20
 80114ec:	d002      	beq.n	80114f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80114ee:	f06f 0305 	mvn.w	r3, #5
 80114f2:	e10f      	b.n	8011714 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	895b      	ldrh	r3, [r3, #10]
 80114f8:	2b13      	cmp	r3, #19
 80114fa:	d809      	bhi.n	8011510 <ip4_frag+0x64>
 80114fc:	4b87      	ldr	r3, [pc, #540]	; (801171c <ip4_frag+0x270>)
 80114fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011502:	4987      	ldr	r1, [pc, #540]	; (8011720 <ip4_frag+0x274>)
 8011504:	4887      	ldr	r0, [pc, #540]	; (8011724 <ip4_frag+0x278>)
 8011506:	f001 fb51 	bl	8012bac <iprintf>
 801150a:	f06f 0305 	mvn.w	r3, #5
 801150e:	e101      	b.n	8011714 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	88db      	ldrh	r3, [r3, #6]
 8011514:	b29b      	uxth	r3, r3
 8011516:	4618      	mov	r0, r3
 8011518:	f7f5 fdce 	bl	80070b8 <lwip_htons>
 801151c:	4603      	mov	r3, r0
 801151e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011520:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011526:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801152a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801152c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011530:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	891b      	ldrh	r3, [r3, #8]
 8011536:	3b14      	subs	r3, #20
 8011538:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801153c:	e0e0      	b.n	8011700 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801153e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	b29b      	uxth	r3, r3
 8011544:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011548:	4293      	cmp	r3, r2
 801154a:	bf28      	it	cs
 801154c:	4613      	movcs	r3, r2
 801154e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011550:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011554:	2114      	movs	r1, #20
 8011556:	200e      	movs	r0, #14
 8011558:	f7f6 fe76 	bl	8008248 <pbuf_alloc>
 801155c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 80d4 	beq.w	801170e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	895b      	ldrh	r3, [r3, #10]
 801156a:	2b13      	cmp	r3, #19
 801156c:	d806      	bhi.n	801157c <ip4_frag+0xd0>
 801156e:	4b6b      	ldr	r3, [pc, #428]	; (801171c <ip4_frag+0x270>)
 8011570:	f240 3225 	movw	r2, #805	; 0x325
 8011574:	496c      	ldr	r1, [pc, #432]	; (8011728 <ip4_frag+0x27c>)
 8011576:	486b      	ldr	r0, [pc, #428]	; (8011724 <ip4_frag+0x278>)
 8011578:	f001 fb18 	bl	8012bac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	2214      	movs	r2, #20
 8011582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011584:	4618      	mov	r0, r3
 8011586:	f001 f836 	bl	80125f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011590:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011592:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011596:	e064      	b.n	8011662 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	895a      	ldrh	r2, [r3, #10]
 801159c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	895b      	ldrh	r3, [r3, #10]
 80115a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d906      	bls.n	80115ba <ip4_frag+0x10e>
 80115ac:	4b5b      	ldr	r3, [pc, #364]	; (801171c <ip4_frag+0x270>)
 80115ae:	f240 322d 	movw	r2, #813	; 0x32d
 80115b2:	495e      	ldr	r1, [pc, #376]	; (801172c <ip4_frag+0x280>)
 80115b4:	485b      	ldr	r0, [pc, #364]	; (8011724 <ip4_frag+0x278>)
 80115b6:	f001 faf9 	bl	8012bac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80115ba:	8bfa      	ldrh	r2, [r7, #30]
 80115bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80115c0:	4293      	cmp	r3, r2
 80115c2:	bf28      	it	cs
 80115c4:	4613      	movcs	r3, r2
 80115c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80115ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d105      	bne.n	80115de <ip4_frag+0x132>
        poff = 0;
 80115d2:	2300      	movs	r3, #0
 80115d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	60fb      	str	r3, [r7, #12]
        continue;
 80115dc:	e041      	b.n	8011662 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80115de:	f7ff ff0d 	bl	80113fc <ip_frag_alloc_pbuf_custom_ref>
 80115e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d103      	bne.n	80115f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80115ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115ec:	f7f7 f90c 	bl	8008808 <pbuf_free>
        goto memerr;
 80115f0:	e08e      	b.n	8011710 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115fa:	4413      	add	r3, r2
 80115fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011600:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011604:	9201      	str	r2, [sp, #4]
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	4603      	mov	r3, r0
 801160a:	2241      	movs	r2, #65	; 0x41
 801160c:	2000      	movs	r0, #0
 801160e:	f7f6 ff41 	bl	8008494 <pbuf_alloced_custom>
 8011612:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801161a:	69b8      	ldr	r0, [r7, #24]
 801161c:	f7ff fef6 	bl	801140c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011622:	f7f7 f8f1 	bl	8008808 <pbuf_free>
        goto memerr;
 8011626:	e073      	b.n	8011710 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7f7 f993 	bl	8008954 <pbuf_ref>
      pcr->original = p;
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	4a3e      	ldr	r2, [pc, #248]	; (8011730 <ip4_frag+0x284>)
 8011638:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801163a:	6979      	ldr	r1, [r7, #20]
 801163c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801163e:	f7f7 f9b1 	bl	80089a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011642:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011646:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011650:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011654:	2b00      	cmp	r3, #0
 8011656:	d004      	beq.n	8011662 <ip4_frag+0x1b6>
        poff = 0;
 8011658:	2300      	movs	r3, #0
 801165a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011662:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011666:	2b00      	cmp	r3, #0
 8011668:	d196      	bne.n	8011598 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801166a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801166c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011670:	4413      	add	r3, r2
 8011672:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801167c:	3b14      	subs	r3, #20
 801167e:	429a      	cmp	r2, r3
 8011680:	bfd4      	ite	le
 8011682:	2301      	movle	r3, #1
 8011684:	2300      	movgt	r3, #0
 8011686:	b2db      	uxtb	r3, r3
 8011688:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801168a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801168e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011692:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d002      	beq.n	80116a0 <ip4_frag+0x1f4>
 801169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169c:	2b00      	cmp	r3, #0
 801169e:	d003      	beq.n	80116a8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80116a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80116a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80116a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7f5 fd04 	bl	80070b8 <lwip_htons>
 80116b0:	4603      	mov	r3, r0
 80116b2:	461a      	mov	r2, r3
 80116b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80116b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116ba:	3314      	adds	r3, #20
 80116bc:	b29b      	uxth	r3, r3
 80116be:	4618      	mov	r0, r3
 80116c0:	f7f5 fcfa 	bl	80070b8 <lwip_htons>
 80116c4:	4603      	mov	r3, r0
 80116c6:	461a      	mov	r2, r3
 80116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ca:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80116cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ce:	2200      	movs	r2, #0
 80116d0:	729a      	strb	r2, [r3, #10]
 80116d2:	2200      	movs	r2, #0
 80116d4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	695b      	ldr	r3, [r3, #20]
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116de:	68b8      	ldr	r0, [r7, #8]
 80116e0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80116e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116e4:	f7f7 f890 	bl	8008808 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80116e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80116f4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80116f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80116fa:	4413      	add	r3, r2
 80116fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011700:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011704:	2b00      	cmp	r3, #0
 8011706:	f47f af1a 	bne.w	801153e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	e002      	b.n	8011714 <ip4_frag+0x268>
      goto memerr;
 801170e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011714:	4618      	mov	r0, r3
 8011716:	3748      	adds	r7, #72	; 0x48
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	08015da4 	.word	0x08015da4
 8011720:	08015f80 	.word	0x08015f80
 8011724:	08015dec 	.word	0x08015dec
 8011728:	08015f9c 	.word	0x08015f9c
 801172c:	08015fbc 	.word	0x08015fbc
 8011730:	08011445 	.word	0x08011445

08011734 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801173e:	230e      	movs	r3, #14
 8011740:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	895b      	ldrh	r3, [r3, #10]
 8011746:	2b0e      	cmp	r3, #14
 8011748:	d96e      	bls.n	8011828 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	7bdb      	ldrb	r3, [r3, #15]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d106      	bne.n	8011760 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011758:	3301      	adds	r3, #1
 801175a:	b2da      	uxtb	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	7b1a      	ldrb	r2, [r3, #12]
 801176a:	7b5b      	ldrb	r3, [r3, #13]
 801176c:	021b      	lsls	r3, r3, #8
 801176e:	4313      	orrs	r3, r2
 8011770:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	f003 0301 	and.w	r3, r3, #1
 801177a:	2b00      	cmp	r3, #0
 801177c:	d023      	beq.n	80117c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d10f      	bne.n	80117a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	785b      	ldrb	r3, [r3, #1]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d11b      	bne.n	80117c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011792:	2b5e      	cmp	r3, #94	; 0x5e
 8011794:	d117      	bne.n	80117c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	7b5b      	ldrb	r3, [r3, #13]
 801179a:	f043 0310 	orr.w	r3, r3, #16
 801179e:	b2da      	uxtb	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	735a      	strb	r2, [r3, #13]
 80117a4:	e00f      	b.n	80117c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	2206      	movs	r2, #6
 80117aa:	4928      	ldr	r1, [pc, #160]	; (801184c <ethernet_input+0x118>)
 80117ac:	4618      	mov	r0, r3
 80117ae:	f000 ff13 	bl	80125d8 <memcmp>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7b5b      	ldrb	r3, [r3, #13]
 80117bc:	f043 0308 	orr.w	r3, r3, #8
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80117c6:	89fb      	ldrh	r3, [r7, #14]
 80117c8:	2b08      	cmp	r3, #8
 80117ca:	d003      	beq.n	80117d4 <ethernet_input+0xa0>
 80117cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80117d0:	d014      	beq.n	80117fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80117d2:	e032      	b.n	801183a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117da:	f003 0308 	and.w	r3, r3, #8
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d024      	beq.n	801182c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80117e2:	8afb      	ldrh	r3, [r7, #22]
 80117e4:	4619      	mov	r1, r3
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7f6 ff88 	bl	80086fc <pbuf_remove_header>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d11e      	bne.n	8011830 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7fe ff2d 	bl	8010654 <ip4_input>
      break;
 80117fa:	e013      	b.n	8011824 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011802:	f003 0308 	and.w	r3, r3, #8
 8011806:	2b00      	cmp	r3, #0
 8011808:	d014      	beq.n	8011834 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801180a:	8afb      	ldrh	r3, [r7, #22]
 801180c:	4619      	mov	r1, r3
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7f6 ff74 	bl	80086fc <pbuf_remove_header>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10e      	bne.n	8011838 <ethernet_input+0x104>
        etharp_input(p, netif);
 801181a:	6839      	ldr	r1, [r7, #0]
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7fe f8cd 	bl	800f9bc <etharp_input>
      break;
 8011822:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011824:	2300      	movs	r3, #0
 8011826:	e00c      	b.n	8011842 <ethernet_input+0x10e>
    goto free_and_return;
 8011828:	bf00      	nop
 801182a:	e006      	b.n	801183a <ethernet_input+0x106>
        goto free_and_return;
 801182c:	bf00      	nop
 801182e:	e004      	b.n	801183a <ethernet_input+0x106>
        goto free_and_return;
 8011830:	bf00      	nop
 8011832:	e002      	b.n	801183a <ethernet_input+0x106>
        goto free_and_return;
 8011834:	bf00      	nop
 8011836:	e000      	b.n	801183a <ethernet_input+0x106>
        goto free_and_return;
 8011838:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7f6 ffe4 	bl	8008808 <pbuf_free>
  return ERR_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3718      	adds	r7, #24
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	080161f0 	.word	0x080161f0

08011850 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
 801185c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801185e:	8c3b      	ldrh	r3, [r7, #32]
 8011860:	4618      	mov	r0, r3
 8011862:	f7f5 fc29 	bl	80070b8 <lwip_htons>
 8011866:	4603      	mov	r3, r0
 8011868:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801186a:	210e      	movs	r1, #14
 801186c:	68b8      	ldr	r0, [r7, #8]
 801186e:	f7f6 ff35 	bl	80086dc <pbuf_add_header>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d125      	bne.n	80118c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	8afa      	ldrh	r2, [r7, #22]
 8011882:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	2206      	movs	r2, #6
 8011888:	6839      	ldr	r1, [r7, #0]
 801188a:	4618      	mov	r0, r3
 801188c:	f000 feb3 	bl	80125f6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	3306      	adds	r3, #6
 8011894:	2206      	movs	r2, #6
 8011896:	6879      	ldr	r1, [r7, #4]
 8011898:	4618      	mov	r0, r3
 801189a:	f000 feac 	bl	80125f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80118a4:	2b06      	cmp	r3, #6
 80118a6:	d006      	beq.n	80118b6 <ethernet_output+0x66>
 80118a8:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <ethernet_output+0x84>)
 80118aa:	f240 1233 	movw	r2, #307	; 0x133
 80118ae:	490a      	ldr	r1, [pc, #40]	; (80118d8 <ethernet_output+0x88>)
 80118b0:	480a      	ldr	r0, [pc, #40]	; (80118dc <ethernet_output+0x8c>)
 80118b2:	f001 f97b 	bl	8012bac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	699b      	ldr	r3, [r3, #24]
 80118ba:	68b9      	ldr	r1, [r7, #8]
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	4798      	blx	r3
 80118c0:	4603      	mov	r3, r0
 80118c2:	e002      	b.n	80118ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80118c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80118c6:	f06f 0301 	mvn.w	r3, #1
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3718      	adds	r7, #24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	08015fcc 	.word	0x08015fcc
 80118d8:	08016004 	.word	0x08016004
 80118dc:	08016038 	.word	0x08016038

080118e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b086      	sub	sp, #24
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	60bb      	str	r3, [r7, #8]
 80118ee:	2304      	movs	r3, #4
 80118f0:	60fb      	str	r3, [r7, #12]
 80118f2:	2300      	movs	r3, #0
 80118f4:	613b      	str	r3, [r7, #16]
 80118f6:	2300      	movs	r3, #0
 80118f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80118fa:	f107 0308 	add.w	r3, r7, #8
 80118fe:	2100      	movs	r1, #0
 8011900:	4618      	mov	r0, r3
 8011902:	f7f2 fcd9 	bl	80042b8 <osMessageCreate>
 8011906:	4602      	mov	r2, r0
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295
 8011918:	e000      	b.n	801191c <sys_mbox_new+0x3c>

  return ERR_OK;
 801191a:	2300      	movs	r3, #0
}
 801191c:	4618      	mov	r0, r3
 801191e:	3718      	adds	r7, #24
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	2200      	movs	r2, #0
 8011936:	4618      	mov	r0, r3
 8011938:	f7f2 fce8 	bl	800430c <osMessagePut>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d102      	bne.n	8011948 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	73fb      	strb	r3, [r7, #15]
 8011946:	e001      	b.n	801194c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011948:	23ff      	movs	r3, #255	; 0xff
 801194a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3710      	adds	r7, #16
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b08c      	sub	sp, #48	; 0x30
 801195c:	af00      	add	r7, sp, #0
 801195e:	61f8      	str	r0, [r7, #28]
 8011960:	61b9      	str	r1, [r7, #24]
 8011962:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8011964:	f7f2 fae3 	bl	8003f2e <osKernelSysTick>
 8011968:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d017      	beq.n	80119a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	6819      	ldr	r1, [r3, #0]
 8011974:	f107 0320 	add.w	r3, r7, #32
 8011978:	697a      	ldr	r2, [r7, #20]
 801197a:	4618      	mov	r0, r3
 801197c:	f7f2 fd06 	bl	800438c <osMessageGet>

    if(event.status == osEventMessage)
 8011980:	6a3b      	ldr	r3, [r7, #32]
 8011982:	2b10      	cmp	r3, #16
 8011984:	d109      	bne.n	801199a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8011986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011988:	461a      	mov	r2, r3
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801198e:	f7f2 face 	bl	8003f2e <osKernelSysTick>
 8011992:	4602      	mov	r2, r0
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	e019      	b.n	80119ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801199a:	f04f 33ff 	mov.w	r3, #4294967295
 801199e:	e016      	b.n	80119ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	6819      	ldr	r1, [r3, #0]
 80119a4:	463b      	mov	r3, r7
 80119a6:	f04f 32ff 	mov.w	r2, #4294967295
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f2 fcee 	bl	800438c <osMessageGet>
 80119b0:	f107 0320 	add.w	r3, r7, #32
 80119b4:	463a      	mov	r2, r7
 80119b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80119b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119be:	461a      	mov	r2, r3
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80119c4:	f7f2 fab3 	bl	8003f2e <osKernelSysTick>
 80119c8:	4602      	mov	r2, r0
 80119ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3730      	adds	r7, #48	; 0x30
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d101      	bne.n	80119ea <sys_mbox_valid+0x14>
    return 0;
 80119e6:	2300      	movs	r3, #0
 80119e8:	e000      	b.n	80119ec <sys_mbox_valid+0x16>
  else
    return 1;
 80119ea:	2301      	movs	r3, #1
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80119fc:	4803      	ldr	r0, [pc, #12]	; (8011a0c <sys_init+0x14>)
 80119fe:	f7f2 fb06 	bl	800400e <osMutexCreate>
 8011a02:	4602      	mov	r2, r0
 8011a04:	4b02      	ldr	r3, [pc, #8]	; (8011a10 <sys_init+0x18>)
 8011a06:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8011a08:	bf00      	nop
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	08016200 	.word	0x08016200
 8011a10:	2000f828 	.word	0x2000f828

08011a14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	60bb      	str	r3, [r7, #8]
 8011a20:	2300      	movs	r3, #0
 8011a22:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8011a24:	f107 0308 	add.w	r3, r7, #8
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7f2 faf0 	bl	800400e <osMutexCreate>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d102      	bne.n	8011a42 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a40:	e000      	b.n	8011a44 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f04f 31ff 	mov.w	r1, #4294967295
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f2 faef 	bl	8004040 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8011a62:	bf00      	nop
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b082      	sub	sp, #8
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7f2 fb30 	bl	80040dc <osMutexRelease>
}
 8011a7c:	bf00      	nop
 8011a7e:	3708      	adds	r7, #8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b08c      	sub	sp, #48	; 0x30
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
 8011a90:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011a92:	f107 0314 	add.w	r3, r7, #20
 8011a96:	2200      	movs	r2, #0
 8011a98:	601a      	str	r2, [r3, #0]
 8011a9a:	605a      	str	r2, [r3, #4]
 8011a9c:	609a      	str	r2, [r3, #8]
 8011a9e:	60da      	str	r2, [r3, #12]
 8011aa0:	611a      	str	r2, [r3, #16]
 8011aa2:	615a      	str	r2, [r3, #20]
 8011aa4:	619a      	str	r2, [r3, #24]
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	617b      	str	r3, [r7, #20]
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	61bb      	str	r3, [r7, #24]
 8011aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab0:	b21b      	sxth	r3, r3
 8011ab2:	83bb      	strh	r3, [r7, #28]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8011ab8:	f107 0314 	add.w	r3, r7, #20
 8011abc:	6879      	ldr	r1, [r7, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7f2 fa45 	bl	8003f4e <osThreadCreate>
 8011ac4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3730      	adds	r7, #48	; 0x30
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
	...

08011ad0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8011ad4:	4b04      	ldr	r3, [pc, #16]	; (8011ae8 <sys_arch_protect+0x18>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f2 faaf 	bl	8004040 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8011ae2:	2301      	movs	r3, #1
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	2000f828 	.word	0x2000f828

08011aec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011af4:	4b04      	ldr	r3, [pc, #16]	; (8011b08 <sys_arch_unprotect+0x1c>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7f2 faef 	bl	80040dc <osMutexRelease>
}
 8011afe:	bf00      	nop
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	2000f828 	.word	0x2000f828

08011b0c <eMBRegHoldingCB>:
uint16_t R[15];
int idx = 0;

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	4608      	mov	r0, r1
 8011b16:	4611      	mov	r1, r2
 8011b18:	461a      	mov	r2, r3
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	817b      	strh	r3, [r7, #10]
 8011b1e:	460b      	mov	r3, r1
 8011b20:	813b      	strh	r3, [r7, #8]
 8011b22:	4613      	mov	r3, r2
 8011b24:	71fb      	strb	r3, [r7, #7]
	eMBErrorCode    eStatus = MB_ENOERR;
 8011b26:	2300      	movs	r3, #0
 8011b28:	74fb      	strb	r3, [r7, #19]
		idx++;
	}else
		flag = 0;
	*/

	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8011b2a:	2101      	movs	r1, #1
 8011b2c:	481c      	ldr	r0, [pc, #112]	; (8011ba0 <eMBRegHoldingCB+0x94>)
 8011b2e:	f7f0 fcce 	bl	80024ce <HAL_GPIO_TogglePin>

	/*the following code is just for the testing the function of reading register
	 author: Alan
	*/

	R[0]=98;
 8011b32:	4b1c      	ldr	r3, [pc, #112]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b34:	2262      	movs	r2, #98	; 0x62
 8011b36:	801a      	strh	r2, [r3, #0]
	R[1]=78;
 8011b38:	4b1a      	ldr	r3, [pc, #104]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b3a:	224e      	movs	r2, #78	; 0x4e
 8011b3c:	805a      	strh	r2, [r3, #2]
	R[2]=19;
 8011b3e:	4b19      	ldr	r3, [pc, #100]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b40:	2213      	movs	r2, #19
 8011b42:	809a      	strh	r2, [r3, #4]
	R[3]=53;
 8011b44:	4b17      	ldr	r3, [pc, #92]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b46:	2235      	movs	r2, #53	; 0x35
 8011b48:	80da      	strh	r2, [r3, #6]


	for(int i=0;i<usNRegs;i++) //usNRegs
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	617b      	str	r3, [r7, #20]
 8011b4e:	e01e      	b.n	8011b8e <eMBRegHoldingCB+0x82>
	{
		//MSB
		*pucRegBuffer=R[i+usAddress-1]>>8;
 8011b50:	897a      	ldrh	r2, [r7, #10]
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	4413      	add	r3, r2
 8011b56:	3b01      	subs	r3, #1
 8011b58:	4a12      	ldr	r2, [pc, #72]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b5e:	0a1b      	lsrs	r3, r3, #8
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	701a      	strb	r2, [r3, #0]
		pucRegBuffer++;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	60fb      	str	r3, [r7, #12]

		//LSB
		*pucRegBuffer=R[i+usAddress-1]&0xff;
 8011b6e:	897a      	ldrh	r2, [r7, #10]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	4413      	add	r3, r2
 8011b74:	3b01      	subs	r3, #1
 8011b76:	4a0b      	ldr	r2, [pc, #44]	; (8011ba4 <eMBRegHoldingCB+0x98>)
 8011b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b7c:	b2da      	uxtb	r2, r3
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	701a      	strb	r2, [r3, #0]
		pucRegBuffer++;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	3301      	adds	r3, #1
 8011b86:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<usNRegs;i++) //usNRegs
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	617b      	str	r3, [r7, #20]
 8011b8e:	893b      	ldrh	r3, [r7, #8]
 8011b90:	697a      	ldr	r2, [r7, #20]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	dbdc      	blt.n	8011b50 <eMBRegHoldingCB+0x44>
	}


    return eStatus;
 8011b96:	7cfb      	ldrb	r3, [r7, #19]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3718      	adds	r7, #24
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	40020400 	.word	0x40020400
 8011ba4:	2000f82c 	.word	0x2000f82c

08011ba8 <eMBTCPInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	4603      	mov	r3, r0
 8011bb0:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8011bb6:	88fb      	ldrh	r3, [r7, #6]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f98d 	bl	8011ed8 <eMBTCPDoInit>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	73fb      	strb	r3, [r7, #15]
 8011bc2:	7bfb      	ldrb	r3, [r7, #15]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d003      	beq.n	8011bd0 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 8011bc8:	4b14      	ldr	r3, [pc, #80]	; (8011c1c <eMBTCPInit+0x74>)
 8011bca:	2201      	movs	r2, #1
 8011bcc:	701a      	strb	r2, [r3, #0]
 8011bce:	e01f      	b.n	8011c10 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 8011bd0:	f000 fa2a 	bl	8012028 <xMBPortEventInit>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d102      	bne.n	8011be0 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 8011bda:	2303      	movs	r3, #3
 8011bdc:	73fb      	strb	r3, [r7, #15]
 8011bde:	e017      	b.n	8011c10 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 8011be0:	4b0f      	ldr	r3, [pc, #60]	; (8011c20 <eMBTCPInit+0x78>)
 8011be2:	4a10      	ldr	r2, [pc, #64]	; (8011c24 <eMBTCPInit+0x7c>)
 8011be4:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <eMBTCPInit+0x80>)
 8011be8:	4a10      	ldr	r2, [pc, #64]	; (8011c2c <eMBTCPInit+0x84>)
 8011bea:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8011bec:	4b10      	ldr	r3, [pc, #64]	; (8011c30 <eMBTCPInit+0x88>)
 8011bee:	4a11      	ldr	r2, [pc, #68]	; (8011c34 <eMBTCPInit+0x8c>)
 8011bf0:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8011bf2:	4b11      	ldr	r3, [pc, #68]	; (8011c38 <eMBTCPInit+0x90>)
 8011bf4:	4a11      	ldr	r2, [pc, #68]	; (8011c3c <eMBTCPInit+0x94>)
 8011bf6:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8011bf8:	4b11      	ldr	r3, [pc, #68]	; (8011c40 <eMBTCPInit+0x98>)
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8011bfe:	4b11      	ldr	r3, [pc, #68]	; (8011c44 <eMBTCPInit+0x9c>)
 8011c00:	22ff      	movs	r2, #255	; 0xff
 8011c02:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8011c04:	4b10      	ldr	r3, [pc, #64]	; (8011c48 <eMBTCPInit+0xa0>)
 8011c06:	2202      	movs	r2, #2
 8011c08:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8011c0a:	4b04      	ldr	r3, [pc, #16]	; (8011c1c <eMBTCPInit+0x74>)
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	2000001a 	.word	0x2000001a
 8011c20:	20008be4 	.word	0x20008be4
 8011c24:	08011f03 	.word	0x08011f03
 8011c28:	20008be8 	.word	0x20008be8
 8011c2c:	08011f11 	.word	0x08011f11
 8011c30:	20008bec 	.word	0x20008bec
 8011c34:	08011f1d 	.word	0x08011f1d
 8011c38:	20008be0 	.word	0x20008be0
 8011c3c:	08011f8f 	.word	0x08011f8f
 8011c40:	20008bf0 	.word	0x20008bf0
 8011c44:	20008bde 	.word	0x20008bde
 8011c48:	20008bdf 	.word	0x20008bdf

08011c4c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8011c52:	2300      	movs	r3, #0
 8011c54:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8011c56:	4b09      	ldr	r3, [pc, #36]	; (8011c7c <eMBEnable+0x30>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d106      	bne.n	8011c6c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8011c5e:	4b08      	ldr	r3, [pc, #32]	; (8011c80 <eMBEnable+0x34>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8011c64:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <eMBEnable+0x30>)
 8011c66:	2200      	movs	r2, #0
 8011c68:	701a      	strb	r2, [r3, #0]
 8011c6a:	e001      	b.n	8011c70 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8011c6c:	2306      	movs	r3, #6
 8011c6e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8011c70:	79fb      	ldrb	r3, [r7, #7]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	2000001a 	.word	0x2000001a
 8011c80:	20008be4 	.word	0x20008be4

08011c84 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8011c84:	b590      	push	{r4, r7, lr}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8011c8e:	4b50      	ldr	r3, [pc, #320]	; (8011dd0 <eMBPoll+0x14c>)
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8011c96:	2306      	movs	r3, #6
 8011c98:	e095      	b.n	8011dc6 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8011c9a:	1cbb      	adds	r3, r7, #2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f000 f9e7 	bl	8012070 <xMBPortEventGet>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	f040 808d 	bne.w	8011dc4 <eMBPoll+0x140>
    {
        switch ( eEvent )
 8011caa:	78bb      	ldrb	r3, [r7, #2]
 8011cac:	2b03      	cmp	r3, #3
 8011cae:	f200 8089 	bhi.w	8011dc4 <eMBPoll+0x140>
 8011cb2:	a201      	add	r2, pc, #4	; (adr r2, 8011cb8 <eMBPoll+0x34>)
 8011cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb8:	08011dc5 	.word	0x08011dc5
 8011cbc:	08011cc9 	.word	0x08011cc9
 8011cc0:	08011cfb 	.word	0x08011cfb
 8011cc4:	08011dc5 	.word	0x08011dc5
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
        	//receive frame at ucMBFrame
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8011cc8:	4b42      	ldr	r3, [pc, #264]	; (8011dd4 <eMBPoll+0x150>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4a42      	ldr	r2, [pc, #264]	; (8011dd8 <eMBPoll+0x154>)
 8011cce:	4943      	ldr	r1, [pc, #268]	; (8011ddc <eMBPoll+0x158>)
 8011cd0:	4843      	ldr	r0, [pc, #268]	; (8011de0 <eMBPoll+0x15c>)
 8011cd2:	4798      	blx	r3
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8011cd8:	78fb      	ldrb	r3, [r7, #3]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d16f      	bne.n	8011dbe <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8011cde:	4b40      	ldr	r3, [pc, #256]	; (8011de0 <eMBPoll+0x15c>)
 8011ce0:	781a      	ldrb	r2, [r3, #0]
 8011ce2:	4b40      	ldr	r3, [pc, #256]	; (8011de4 <eMBPoll+0x160>)
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d003      	beq.n	8011cf2 <eMBPoll+0x6e>
 8011cea:	4b3d      	ldr	r3, [pc, #244]	; (8011de0 <eMBPoll+0x15c>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d165      	bne.n	8011dbe <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8011cf2:	2002      	movs	r0, #2
 8011cf4:	f000 f9a6 	bl	8012044 <xMBPortEventPost>
                }
            }
            break;
 8011cf8:	e061      	b.n	8011dbe <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8011cfa:	4b38      	ldr	r3, [pc, #224]	; (8011ddc <eMBPoll+0x158>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	781a      	ldrb	r2, [r3, #0]
 8011d00:	4b39      	ldr	r3, [pc, #228]	; (8011de8 <eMBPoll+0x164>)
 8011d02:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8011d04:	4b39      	ldr	r3, [pc, #228]	; (8011dec <eMBPoll+0x168>)
 8011d06:	2201      	movs	r2, #1
 8011d08:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	607b      	str	r3, [r7, #4]
 8011d0e:	e01f      	b.n	8011d50 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8011d10:	4a37      	ldr	r2, [pc, #220]	; (8011df0 <eMBPoll+0x16c>)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d01d      	beq.n	8011d58 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8011d1c:	4a34      	ldr	r2, [pc, #208]	; (8011df0 <eMBPoll+0x16c>)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8011d24:	4b30      	ldr	r3, [pc, #192]	; (8011de8 <eMBPoll+0x164>)
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d10e      	bne.n	8011d4a <eMBPoll+0xc6>
                {
                	//entry
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8011d2c:	4a30      	ldr	r2, [pc, #192]	; (8011df0 <eMBPoll+0x16c>)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	4413      	add	r3, r2
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	4a29      	ldr	r2, [pc, #164]	; (8011ddc <eMBPoll+0x158>)
 8011d38:	6812      	ldr	r2, [r2, #0]
 8011d3a:	4927      	ldr	r1, [pc, #156]	; (8011dd8 <eMBPoll+0x154>)
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	4798      	blx	r3
 8011d40:	4603      	mov	r3, r0
 8011d42:	461a      	mov	r2, r3
 8011d44:	4b29      	ldr	r3, [pc, #164]	; (8011dec <eMBPoll+0x168>)
 8011d46:	701a      	strb	r2, [r3, #0]
                    break;
 8011d48:	e007      	b.n	8011d5a <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	607b      	str	r3, [r7, #4]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	dddc      	ble.n	8011d10 <eMBPoll+0x8c>
 8011d56:	e000      	b.n	8011d5a <eMBPoll+0xd6>
                    break;
 8011d58:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8011d5a:	4b21      	ldr	r3, [pc, #132]	; (8011de0 <eMBPoll+0x15c>)
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d02f      	beq.n	8011dc2 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8011d62:	4b22      	ldr	r3, [pc, #136]	; (8011dec <eMBPoll+0x168>)
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d01d      	beq.n	8011da6 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8011d6a:	4b1b      	ldr	r3, [pc, #108]	; (8011dd8 <eMBPoll+0x154>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8011d70:	4b1d      	ldr	r3, [pc, #116]	; (8011de8 <eMBPoll+0x164>)
 8011d72:	781a      	ldrb	r2, [r3, #0]
 8011d74:	4b19      	ldr	r3, [pc, #100]	; (8011ddc <eMBPoll+0x158>)
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	4b17      	ldr	r3, [pc, #92]	; (8011dd8 <eMBPoll+0x154>)
 8011d7a:	881b      	ldrh	r3, [r3, #0]
 8011d7c:	1c58      	adds	r0, r3, #1
 8011d7e:	b284      	uxth	r4, r0
 8011d80:	4815      	ldr	r0, [pc, #84]	; (8011dd8 <eMBPoll+0x154>)
 8011d82:	8004      	strh	r4, [r0, #0]
 8011d84:	440b      	add	r3, r1
 8011d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011d8a:	b2d2      	uxtb	r2, r2
 8011d8c:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8011d8e:	4b13      	ldr	r3, [pc, #76]	; (8011ddc <eMBPoll+0x158>)
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	4b11      	ldr	r3, [pc, #68]	; (8011dd8 <eMBPoll+0x154>)
 8011d94:	881b      	ldrh	r3, [r3, #0]
 8011d96:	1c59      	adds	r1, r3, #1
 8011d98:	b288      	uxth	r0, r1
 8011d9a:	490f      	ldr	r1, [pc, #60]	; (8011dd8 <eMBPoll+0x154>)
 8011d9c:	8008      	strh	r0, [r1, #0]
 8011d9e:	4413      	add	r3, r2
 8011da0:	4a12      	ldr	r2, [pc, #72]	; (8011dec <eMBPoll+0x168>)
 8011da2:	7812      	ldrb	r2, [r2, #0]
 8011da4:	701a      	strb	r2, [r3, #0]
                }
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8011da6:	4b13      	ldr	r3, [pc, #76]	; (8011df4 <eMBPoll+0x170>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4a0e      	ldr	r2, [pc, #56]	; (8011de4 <eMBPoll+0x160>)
 8011dac:	7810      	ldrb	r0, [r2, #0]
 8011dae:	4a0b      	ldr	r2, [pc, #44]	; (8011ddc <eMBPoll+0x158>)
 8011db0:	6811      	ldr	r1, [r2, #0]
 8011db2:	4a09      	ldr	r2, [pc, #36]	; (8011dd8 <eMBPoll+0x154>)
 8011db4:	8812      	ldrh	r2, [r2, #0]
 8011db6:	4798      	blx	r3
 8011db8:	4603      	mov	r3, r0
 8011dba:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8011dbc:	e001      	b.n	8011dc2 <eMBPoll+0x13e>
            break;
 8011dbe:	bf00      	nop
 8011dc0:	e000      	b.n	8011dc4 <eMBPoll+0x140>
            break;
 8011dc2:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd90      	pop	{r4, r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	2000001a 	.word	0x2000001a
 8011dd4:	20008bec 	.word	0x20008bec
 8011dd8:	20008bfc 	.word	0x20008bfc
 8011ddc:	20008bf8 	.word	0x20008bf8
 8011de0:	20008bf4 	.word	0x20008bf4
 8011de4:	20008bde 	.word	0x20008bde
 8011de8:	20008bfe 	.word	0x20008bfe
 8011dec:	20008bff 	.word	0x20008bff
 8011df0:	2000001c 	.word	0x2000001c
 8011df4:	20008be0 	.word	0x20008be0

08011df8 <eMBFuncReadHoldingRegister>:

/* ----------------------- Start implementation -----------------------------*/

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8011e02:	2300      	movs	r3, #0
 8011e04:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	2b05      	cmp	r3, #5
 8011e0c:	d15d      	bne.n	8011eca <eMBFuncReadHoldingRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	3301      	adds	r3, #1
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	021b      	lsls	r3, r3, #8
 8011e18:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	3302      	adds	r3, #2
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	b29a      	uxth	r2, r3
 8011e22:	8abb      	ldrh	r3, [r7, #20]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8011e28:	8abb      	ldrh	r3, [r7, #20]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	82bb      	strh	r3, [r7, #20]

        //master query quantity
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3303      	adds	r3, #3
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	021b      	lsls	r3, r3, #8
 8011e38:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	827b      	strh	r3, [r7, #18]
        __NOP();
 8011e42:	bf00      	nop

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8011e44:	8a7b      	ldrh	r3, [r7, #18]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d03c      	beq.n	8011ec4 <eMBFuncReadHoldingRegister+0xcc>
 8011e4a:	8a7b      	ldrh	r3, [r7, #18]
 8011e4c:	2b7d      	cmp	r3, #125	; 0x7d
 8011e4e:	d839      	bhi.n	8011ec4 <eMBFuncReadHoldingRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2200      	movs	r2, #0
 8011e58:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	60fa      	str	r2, [r7, #12]
 8011e60:	2203      	movs	r2, #3
 8011e62:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8011e70:	8a7b      	ldrh	r3, [r7, #18]
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	1c59      	adds	r1, r3, #1
 8011e78:	60f9      	str	r1, [r7, #12]
 8011e7a:	0052      	lsls	r2, r2, #1
 8011e7c:	b2d2      	uxtb	r2, r2
 8011e7e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	3301      	adds	r3, #1
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8011e8c:	8a7a      	ldrh	r2, [r7, #18]
 8011e8e:	8ab9      	ldrh	r1, [r7, #20]
 8011e90:	2300      	movs	r3, #0
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff fe3a 	bl	8011b0c <eMBRegHoldingCB>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8011e9c:	7afb      	ldrb	r3, [r7, #11]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d006      	beq.n	8011eb0 <eMBFuncReadHoldingRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8011ea2:	7afb      	ldrb	r3, [r7, #11]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f000 f89f 	bl	8011fe8 <prveMBError2Exception>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8011eae:	e00e      	b.n	8011ece <eMBFuncReadHoldingRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	881a      	ldrh	r2, [r3, #0]
 8011eb4:	8a7b      	ldrh	r3, [r7, #18]
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	4413      	add	r3, r2
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8011ec2:	e004      	b.n	8011ece <eMBFuncReadHoldingRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	75fb      	strb	r3, [r7, #23]
 8011ec8:	e001      	b.n	8011ece <eMBFuncReadHoldingRegister+0xd6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8011eca:	2303      	movs	r3, #3
 8011ecc:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8011ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3718      	adds	r7, #24
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8011ee6:	88fb      	ldrh	r3, [r7, #6]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 f8df 	bl	80120ac <xMBTCPPortInit>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d101      	bne.n	8011ef8 <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8011ef4:	2303      	movs	r3, #3
 8011ef6:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <eMBTCPStart>:

void
eMBTCPStart( void )
{
 8011f02:	b480      	push	{r7}
 8011f04:	af00      	add	r7, sp, #0
}
 8011f06:	bf00      	nop
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8011f14:	f000 f94c 	bl	80121b0 <vMBTCPPortDisable>
}
 8011f18:	bf00      	nop
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 8011f28:	2305      	movs	r3, #5
 8011f2a:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8011f2c:	f107 0216 	add.w	r2, r7, #22
 8011f30:	f107 0318 	add.w	r3, r7, #24
 8011f34:	4611      	mov	r1, r2
 8011f36:	4618      	mov	r0, r3
 8011f38:	f000 fa7a 	bl	8012430 <xMBTCPPortGetRequest>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d01e      	beq.n	8011f80 <eMBTCPReceive+0x64>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	3302      	adds	r3, #2
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	021b      	lsls	r3, r3, #8
 8011f4c:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	3303      	adds	r3, #3
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	8bbb      	ldrh	r3, [r7, #28]
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8011f5c:	8bbb      	ldrh	r3, [r7, #28]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d110      	bne.n	8011f84 <eMBTCPReceive+0x68>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8011f62:	69bb      	ldr	r3, [r7, #24]
 8011f64:	1dda      	adds	r2, r3, #7
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8011f6a:	8afb      	ldrh	r3, [r7, #22]
 8011f6c:	3b07      	subs	r3, #7
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 8011f74:	2300      	movs	r3, #0
 8011f76:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	22ff      	movs	r2, #255	; 0xff
 8011f7c:	701a      	strb	r2, [r3, #0]
 8011f7e:	e001      	b.n	8011f84 <eMBTCPReceive+0x68>
        }
    }
    else
    {
        eStatus = MB_EIO;
 8011f80:	2305      	movs	r3, #5
 8011f82:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8011f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3720      	adds	r7, #32
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b086      	sub	sp, #24
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	4603      	mov	r3, r0
 8011f96:	6039      	str	r1, [r7, #0]
 8011f98:	71fb      	strb	r3, [r7, #7]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	3b07      	subs	r3, #7
 8011fa6:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8011fa8:	88bb      	ldrh	r3, [r7, #4]
 8011faa:	3307      	adds	r3, #7
 8011fac:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8011fae:	88bb      	ldrh	r3, [r7, #4]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	121a      	asrs	r2, r3, #8
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	b2d2      	uxtb	r2, r2
 8011fba:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8011fbc:	88bb      	ldrh	r3, [r7, #4]
 8011fbe:	b2da      	uxtb	r2, r3
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	3305      	adds	r3, #5
 8011fc4:	3201      	adds	r2, #1
 8011fc6:	b2d2      	uxtb	r2, r2
 8011fc8:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8011fca:	89fb      	ldrh	r3, [r7, #14]
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6938      	ldr	r0, [r7, #16]
 8011fd0:	f000 fa6c 	bl	80124ac <xMBTCPPortSendResponse>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 8011fda:	2305      	movs	r3, #5
 8011fdc:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8011fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3718      	adds	r7, #24
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d006      	beq.n	8012006 <prveMBError2Exception+0x1e>
 8011ff8:	2b07      	cmp	r3, #7
 8011ffa:	d007      	beq.n	801200c <prveMBError2Exception+0x24>
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d108      	bne.n	8012012 <prveMBError2Exception+0x2a>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8012000:	2300      	movs	r3, #0
 8012002:	73fb      	strb	r3, [r7, #15]
            break;
 8012004:	e008      	b.n	8012018 <prveMBError2Exception+0x30>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012006:	2302      	movs	r3, #2
 8012008:	73fb      	strb	r3, [r7, #15]
            break;
 801200a:	e005      	b.n	8012018 <prveMBError2Exception+0x30>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 801200c:	2306      	movs	r3, #6
 801200e:	73fb      	strb	r3, [r7, #15]
            break;
 8012010:	e002      	b.n	8012018 <prveMBError2Exception+0x30>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012012:	2304      	movs	r3, #4
 8012014:	73fb      	strb	r3, [r7, #15]
            break;
 8012016:	bf00      	nop
    }

    return eStatus;
 8012018:	7bfb      	ldrb	r3, [r7, #15]
}
 801201a:	4618      	mov	r0, r3
 801201c:	3714      	adds	r7, #20
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
	...

08012028 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8012028:	b480      	push	{r7}
 801202a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 801202c:	4b04      	ldr	r3, [pc, #16]	; (8012040 <xMBPortEventInit+0x18>)
 801202e:	2200      	movs	r2, #0
 8012030:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8012032:	2301      	movs	r3, #1
}
 8012034:	4618      	mov	r0, r3
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	20008c01 	.word	0x20008c01

08012044 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	4603      	mov	r3, r0
 801204c:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 801204e:	4b06      	ldr	r3, [pc, #24]	; (8012068 <xMBPortEventPost+0x24>)
 8012050:	2201      	movs	r2, #1
 8012052:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8012054:	4a05      	ldr	r2, [pc, #20]	; (801206c <xMBPortEventPost+0x28>)
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	7013      	strb	r3, [r2, #0]
    return TRUE;
 801205a:	2301      	movs	r3, #1
}
 801205c:	4618      	mov	r0, r3
 801205e:	370c      	adds	r7, #12
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	20008c01 	.word	0x20008c01
 801206c:	20008c00 	.word	0x20008c00

08012070 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8012078:	2300      	movs	r3, #0
 801207a:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 801207c:	4b09      	ldr	r3, [pc, #36]	; (80120a4 <xMBPortEventGet+0x34>)
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d008      	beq.n	8012096 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8012084:	4b08      	ldr	r3, [pc, #32]	; (80120a8 <xMBPortEventGet+0x38>)
 8012086:	781a      	ldrb	r2, [r3, #0]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 801208c:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <xMBPortEventGet+0x34>)
 801208e:	2200      	movs	r2, #0
 8012090:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012092:	2301      	movs	r3, #1
 8012094:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8012096:	7bfb      	ldrb	r3, [r7, #15]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	20008c01 	.word	0x20008c01
 80120a8:	20008c00 	.word	0x20008c00

080120ac <xMBTCPPortInit>:


/* ----------------------- Begin implementation -----------------------------*/
BOOL
xMBTCPPortInit( USHORT usTCPPort )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	4603      	mov	r3, r0
 80120b4:	80fb      	strh	r3, [r7, #6]
  struct tcp_pcb *pxPCBListenNew, *pxPCBListenOld;
  BOOL            bOkay = FALSE;
 80120b6:	2300      	movs	r3, #0
 80120b8:	757b      	strb	r3, [r7, #21]
  USHORT          usPort;
  
  //poty 502
  if( usTCPPort == 0 )
 80120ba:	88fb      	ldrh	r3, [r7, #6]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d103      	bne.n	80120c8 <xMBTCPPortInit+0x1c>
  {
    usPort = MB_TCP_DEFAULT_PORT;
 80120c0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80120c4:	82fb      	strh	r3, [r7, #22]
 80120c6:	e001      	b.n	80120cc <xMBTCPPortInit+0x20>
  }
  else
  {
    usPort = ( USHORT ) usTCPPort;
 80120c8:	88fb      	ldrh	r3, [r7, #6]
 80120ca:	82fb      	strh	r3, [r7, #22]
  }
  
  //create tcp
  if( ( pxPCBListenNew = pxPCBListenOld = tcp_new(  ) ) == NULL )
 80120cc:	f7f8 f9b6 	bl	800a43c <tcp_new>
 80120d0:	6138      	str	r0, [r7, #16]
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	60fb      	str	r3, [r7, #12]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d102      	bne.n	80120e2 <xMBTCPPortInit+0x36>
  {      
    /* Can't create TCP socket. */
    bOkay = FALSE;
 80120dc:	2300      	movs	r3, #0
 80120de:	757b      	strb	r3, [r7, #21]
 80120e0:	e023      	b.n	801212a <xMBTCPPortInit+0x7e>
  }
  //bind
  else if( tcp_bind( pxPCBListenNew, IP_ADDR_ANY, ( u16_t ) usPort ) != ERR_OK )
 80120e2:	8afb      	ldrh	r3, [r7, #22]
 80120e4:	461a      	mov	r2, r3
 80120e6:	4914      	ldr	r1, [pc, #80]	; (8012138 <xMBTCPPortInit+0x8c>)
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f7f7 f925 	bl	8009338 <tcp_bind>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <xMBTCPPortInit+0x54>
  {      
    /* Bind failed - Maybe illegal port value or in use. */
    ( void )tcp_close( pxPCBListenOld );
 80120f4:	6938      	ldr	r0, [r7, #16]
 80120f6:	f7f7 f829 	bl	800914c <tcp_close>
    bOkay = FALSE;
 80120fa:	2300      	movs	r3, #0
 80120fc:	757b      	strb	r3, [r7, #21]
 80120fe:	e014      	b.n	801212a <xMBTCPPortInit+0x7e>
  }
  //listen
  else if( ( pxPCBListenNew = tcp_listen( pxPCBListenNew ) ) == NULL )
 8012100:	21ff      	movs	r1, #255	; 0xff
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f7f7 f9d0 	bl	80094a8 <tcp_listen_with_backlog>
 8012108:	60f8      	str	r0, [r7, #12]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d105      	bne.n	801211c <xMBTCPPortInit+0x70>
  {      
    ( void )tcp_close( pxPCBListenOld );
 8012110:	6938      	ldr	r0, [r7, #16]
 8012112:	f7f7 f81b 	bl	800914c <tcp_close>
    bOkay = FALSE;
 8012116:	2300      	movs	r3, #0
 8012118:	757b      	strb	r3, [r7, #21]
 801211a:	e006      	b.n	801212a <xMBTCPPortInit+0x7e>
  }
  //register callback
  else
  {     
    /* Register callback function for new clients. (prvxMBTCPPortAccept) */
    tcp_accept( pxPCBListenNew, prvxMBTCPPortAccept );
 801211c:	4907      	ldr	r1, [pc, #28]	; (801213c <xMBTCPPortInit+0x90>)
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f7f8 f9ea 	bl	800a4f8 <tcp_accept>
    /* Everything okay. Set global variable. */
    pxPCBListen = pxPCBListenNew;     
 8012124:	4a06      	ldr	r2, [pc, #24]	; (8012140 <xMBTCPPortInit+0x94>)
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	6013      	str	r3, [r2, #0]
#if MB_TCP_DEBUG
    vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Protocol stack ready.\r\n" );
#endif
  }
  
  bOkay = TRUE;
 801212a:	2301      	movs	r3, #1
 801212c:	757b      	strb	r3, [r7, #21]
  return bOkay;
 801212e:	7d7b      	ldrb	r3, [r7, #21]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3718      	adds	r7, #24
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	080161ec 	.word	0x080161ec
 801213c:	080121e5 	.word	0x080121e5
 8012140:	20008c04 	.word	0x20008c04

08012144 <prvvMBPortReleaseClient>:

void
prvvMBPortReleaseClient( struct tcp_pcb *pxPCB )
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b084      	sub	sp, #16
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  if( pxPCB != NULL )
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d025      	beq.n	801219e <prvvMBPortReleaseClient+0x5a>
  {
    if( tcp_close( pxPCB ) != ERR_OK )
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7f6 fffa 	bl	800914c <tcp_close>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d002      	beq.n	8012164 <prvvMBPortReleaseClient+0x20>
    {
      tcp_abort( pxPCB );
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f7 f8de 	bl	8009320 <tcp_abort>
    }
    
    for(int i = 0; i < MB_TCP_CLIENTS; i++)
 8012164:	2300      	movs	r3, #0
 8012166:	60fb      	str	r3, [r7, #12]
 8012168:	e00e      	b.n	8012188 <prvvMBPortReleaseClient+0x44>
    {
      if( pxPCB == pxPCBClient[i])
 801216a:	4a0f      	ldr	r2, [pc, #60]	; (80121a8 <prvvMBPortReleaseClient+0x64>)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	429a      	cmp	r2, r3
 8012176:	d104      	bne.n	8012182 <prvvMBPortReleaseClient+0x3e>
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
                   ip4_addr1( &( pxPCB->remote_ip ) ),
                   ip4_addr2( &( pxPCB->remote_ip ) ),
                   ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
#endif
        pxPCBClient[i] = NULL;
 8012178:	4a0b      	ldr	r2, [pc, #44]	; (80121a8 <prvvMBPortReleaseClient+0x64>)
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2100      	movs	r1, #0
 801217e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < MB_TCP_CLIENTS; i++)
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3301      	adds	r3, #1
 8012186:	60fb      	str	r3, [r7, #12]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2b02      	cmp	r3, #2
 801218c:	dded      	ble.n	801216a <prvvMBPortReleaseClient+0x26>
      }      
    }    
    
    if( pxPCB == pxPCBListen )
 801218e:	4b07      	ldr	r3, [pc, #28]	; (80121ac <prvvMBPortReleaseClient+0x68>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	429a      	cmp	r2, r3
 8012196:	d102      	bne.n	801219e <prvvMBPortReleaseClient+0x5a>
    {
      pxPCBListen = NULL;
 8012198:	4b04      	ldr	r3, [pc, #16]	; (80121ac <prvvMBPortReleaseClient+0x68>)
 801219a:	2200      	movs	r2, #0
 801219c:	601a      	str	r2, [r3, #0]
    }
    
  }
}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20008c0c 	.word	0x20008c0c
 80121ac:	20008c04 	.word	0x20008c04

080121b0 <vMBTCPPortDisable>:
  vMBPortEventClose();
}

void
vMBTCPPortDisable( void )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 80121b6:	2300      	movs	r3, #0
 80121b8:	607b      	str	r3, [r7, #4]
 80121ba:	e009      	b.n	80121d0 <vMBTCPPortDisable+0x20>
  {
    prvvMBPortReleaseClient( pxPCBClient[i] );
 80121bc:	4a08      	ldr	r2, [pc, #32]	; (80121e0 <vMBTCPPortDisable+0x30>)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7ff ffbd 	bl	8012144 <prvvMBPortReleaseClient>
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	3301      	adds	r3, #1
 80121ce:	607b      	str	r3, [r7, #4]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	ddf2      	ble.n	80121bc <vMBTCPPortDisable+0xc>
  }
}
 80121d6:	bf00      	nop
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	20008c0c 	.word	0x20008c0c

080121e4 <prvxMBTCPPortAccept>:

/* tcp_accept callback function */
err_t
prvxMBTCPPortAccept( void *pvArg, struct tcp_pcb *pxPCB, err_t xErr )
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	4613      	mov	r3, r2
 80121f0:	71fb      	strb	r3, [r7, #7]
  err_t error;
  
  if( xErr != ERR_OK )
 80121f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d002      	beq.n	8012200 <prvxMBTCPPortAccept+0x1c>
  {
    return xErr;
 80121fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121fe:	e030      	b.n	8012262 <prvxMBTCPPortAccept+0x7e>
  }
  
  /* Find first pxPCBClient whose value is null */
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 8012200:	2300      	movs	r3, #0
 8012202:	617b      	str	r3, [r7, #20]
 8012204:	e028      	b.n	8012258 <prvxMBTCPPortAccept+0x74>
  {
	// check no client connect for now
    if( pxPCBClient[i] == NULL )
 8012206:	4a19      	ldr	r2, [pc, #100]	; (801226c <prvxMBTCPPortAccept+0x88>)
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d11f      	bne.n	8012252 <prvxMBTCPPortAccept+0x6e>
    {
      /* Register the client. */
      pxPCBClient[i] = pxPCB;
 8012212:	4916      	ldr	r1, [pc, #88]	; (801226c <prvxMBTCPPortAccept+0x88>)
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Set up the receive function prvxMBTCPPortReceive( ) to be called when data
      * arrives.
      */
      tcp_recv( pxPCB, prvxMBTCPPortReceive );
 801221c:	4914      	ldr	r1, [pc, #80]	; (8012270 <prvxMBTCPPortAccept+0x8c>)
 801221e:	68b8      	ldr	r0, [r7, #8]
 8012220:	f7f8 f926 	bl	800a470 <tcp_recv>
      
      /* Register error handler. */
      tcp_err( pxPCB, prvvMBTCPPortError );
 8012224:	4913      	ldr	r1, [pc, #76]	; (8012274 <prvxMBTCPPortAccept+0x90>)
 8012226:	68b8      	ldr	r0, [r7, #8]
 8012228:	f7f8 f944 	bl	800a4b4 <tcp_err>
      
      /* Set callback argument later used in the error handler. */
      tcp_arg( pxPCB, pxPCB );
 801222c:	68b9      	ldr	r1, [r7, #8]
 801222e:	68b8      	ldr	r0, [r7, #8]
 8012230:	f7f8 f90c 	bl	800a44c <tcp_arg>
      
      /* Reset the buffers and state variables. */
      usTCPBufPos[i] = 0;
 8012234:	4a10      	ldr	r2, [pc, #64]	; (8012278 <prvxMBTCPPortAccept+0x94>)
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	2100      	movs	r1, #0
 801223a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      usTCPBufReceived[i] = 0;
 801223e:	4a0f      	ldr	r2, [pc, #60]	; (801227c <prvxMBTCPPortAccept+0x98>)
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	2100      	movs	r1, #0
 8012244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                 ip4_addr1( &( pxPCB->remote_ip ) ),
                 ip4_addr2( &( pxPCB->remote_ip ) ),
                 ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
#endif
      
      error = ERR_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	74fb      	strb	r3, [r7, #19]
      return error;
 801224c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012250:	e007      	b.n	8012262 <prvxMBTCPPortAccept+0x7e>
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	3301      	adds	r3, #1
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	2b02      	cmp	r3, #2
 801225c:	ddd3      	ble.n	8012206 <prvxMBTCPPortAccept+0x22>
    }    
  }
  
  return ERR_CONN;
 801225e:	f06f 030a 	mvn.w	r3, #10
}
 8012262:	4618      	mov	r0, r3
 8012264:	3718      	adds	r7, #24
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	20008c0c 	.word	0x20008c0c
 8012270:	080122a5 	.word	0x080122a5
 8012274:	08012281 	.word	0x08012281
 8012278:	20008f30 	.word	0x20008f30
 801227c:	20008f38 	.word	0x20008f38

08012280 <prvvMBTCPPortError>:

/* Called in case of an unrecoverable error. In any case we drop the client
* connection. */
void
prvvMBTCPPortError( void *pvArg, err_t xErr )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
  struct tcp_pcb *pxPCB = pvArg;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	60fb      	str	r3, [r7, #12]
  
  if( pxPCB != NULL )
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d002      	beq.n	801229c <prvvMBTCPPortError+0x1c>
  {
#if MB_TCP_DEBUG
    vMBPortLog( MB_LOG_DEBUG, "MBTCP-ERROR", "Error with client connection! Droping it.\r\n" );
#endif
    prvvMBPortReleaseClient( pxPCB );
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff ff54 	bl	8012144 <prvvMBPortReleaseClient>
  }
}
 801229c:	bf00      	nop
 801229e:	3710      	adds	r7, #16
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <prvxMBTCPPortReceive>:

err_t
prvxMBTCPPortReceive( void *pvArg, struct tcp_pcb *pxPCB, struct pbuf *p, err_t xErr )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b088      	sub	sp, #32
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
 80122b0:	70fb      	strb	r3, [r7, #3]
  USHORT usLength;
  USHORT usIndex;
    
  err_t error = xErr;
 80122b2:	78fb      	ldrb	r3, [r7, #3]
 80122b4:	777b      	strb	r3, [r7, #29]
  
  if( error != ERR_OK )
 80122b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <prvxMBTCPPortReceive+0x20>
  {
    return error;
 80122be:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80122c2:	e0a4      	b.n	801240e <prvxMBTCPPortReceive+0x16a>
  }
  
  /* If pbuf is NULL then remote end has closed connection. */
  if( p == NULL )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d104      	bne.n	80122d4 <prvxMBTCPPortReceive+0x30>
  {
    prvvMBPortReleaseClient( pxPCB );
 80122ca:	68b8      	ldr	r0, [r7, #8]
 80122cc:	f7ff ff3a 	bl	8012144 <prvvMBPortReleaseClient>
    return ERR_OK;
 80122d0:	2300      	movs	r3, #0
 80122d2:	e09c      	b.n	801240e <prvxMBTCPPortReceive+0x16a>
  } 
  
  /* Acknowledge that we have received the data bytes. */
  tcp_recved( pxPCB, p->len );
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	895b      	ldrh	r3, [r3, #10]
 80122d8:	4619      	mov	r1, r3
 80122da:	68b8      	ldr	r0, [r7, #8]
 80122dc:	f7f7 f9fa 	bl	80096d4 <tcp_recved>
  __NOP();
 80122e0:	bf00      	nop
  
  /* Find an index of PCB */
  for(int i=0; i < MB_TCP_CLIENTS; i++)
 80122e2:	2300      	movs	r3, #0
 80122e4:	61bb      	str	r3, [r7, #24]
 80122e6:	e00c      	b.n	8012302 <prvxMBTCPPortReceive+0x5e>
  {
    if(pxPCBClient[i] == pxPCB)
 80122e8:	4a4b      	ldr	r2, [pc, #300]	; (8012418 <prvxMBTCPPortReceive+0x174>)
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d102      	bne.n	80122fc <prvxMBTCPPortReceive+0x58>
    {
      usIndex = i;
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	83fb      	strh	r3, [r7, #30]
      break;
 80122fa:	e005      	b.n	8012308 <prvxMBTCPPortReceive+0x64>
  for(int i=0; i < MB_TCP_CLIENTS; i++)
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	3301      	adds	r3, #1
 8012300:	61bb      	str	r3, [r7, #24]
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	2b02      	cmp	r3, #2
 8012306:	ddef      	ble.n	80122e8 <prvxMBTCPPortReceive+0x44>
    }
  }  
  
  /* Check for internal buffer overflow. In case of an error drop the client.*/
  if( ( usTCPBufPos[usIndex] + p->len ) >= MB_TCP_BUF_SIZE )
 8012308:	8bfb      	ldrh	r3, [r7, #30]
 801230a:	4a44      	ldr	r2, [pc, #272]	; (801241c <prvxMBTCPPortReceive+0x178>)
 801230c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012310:	461a      	mov	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	4413      	add	r3, r2
 8012318:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 801231c:	dd05      	ble.n	801232a <prvxMBTCPPortReceive+0x86>
  {
    prvvMBPortReleaseClient( pxPCB );
 801231e:	68b8      	ldr	r0, [r7, #8]
 8012320:	f7ff ff10 	bl	8012144 <prvvMBPortReleaseClient>
    error = ERR_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	777b      	strb	r3, [r7, #29]
 8012328:	e06c      	b.n	8012404 <prvxMBTCPPortReceive+0x160>
  }
  else
  {
    memcpy( &aucTCPBuf[usIndex][usTCPBufPos[usIndex]], p->payload, p->len );
 801232a:	8bfa      	ldrh	r2, [r7, #30]
 801232c:	8bfb      	ldrh	r3, [r7, #30]
 801232e:	493b      	ldr	r1, [pc, #236]	; (801241c <prvxMBTCPPortReceive+0x178>)
 8012330:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012334:	4619      	mov	r1, r3
 8012336:	4613      	mov	r3, r2
 8012338:	015b      	lsls	r3, r3, #5
 801233a:	4413      	add	r3, r2
 801233c:	00db      	lsls	r3, r3, #3
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	440b      	add	r3, r1
 8012342:	4a37      	ldr	r2, [pc, #220]	; (8012420 <prvxMBTCPPortReceive+0x17c>)
 8012344:	1898      	adds	r0, r3, r2
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6859      	ldr	r1, [r3, #4]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	895b      	ldrh	r3, [r3, #10]
 801234e:	461a      	mov	r2, r3
 8012350:	f000 f951 	bl	80125f6 <memcpy>
    usTCPBufPos[usIndex] += p->len;
 8012354:	8bfb      	ldrh	r3, [r7, #30]
 8012356:	4a31      	ldr	r2, [pc, #196]	; (801241c <prvxMBTCPPortReceive+0x178>)
 8012358:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	895a      	ldrh	r2, [r3, #10]
 8012360:	8bfb      	ldrh	r3, [r7, #30]
 8012362:	440a      	add	r2, r1
 8012364:	b291      	uxth	r1, r2
 8012366:	4a2d      	ldr	r2, [pc, #180]	; (801241c <prvxMBTCPPortReceive+0x178>)
 8012368:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    
    /* If we have received the MBAP header we can analyze it and calculate
    * the number of bytes left to complete the current request. If complete
    * notify the protocol stack.
    */
    if( usTCPBufPos[usIndex] >= MB_TCP_FUNC )
 801236c:	8bfb      	ldrh	r3, [r7, #30]
 801236e:	4a2b      	ldr	r2, [pc, #172]	; (801241c <prvxMBTCPPortReceive+0x178>)
 8012370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012374:	2b06      	cmp	r3, #6
 8012376:	d945      	bls.n	8012404 <prvxMBTCPPortReceive+0x160>
    {
      /* Length is a byte count of Modbus PDU (function code + data) and the
      * unit identifier. */
      usLength = aucTCPBuf[usIndex][MB_TCP_LEN] << 8U;
 8012378:	8bfa      	ldrh	r2, [r7, #30]
 801237a:	4929      	ldr	r1, [pc, #164]	; (8012420 <prvxMBTCPPortReceive+0x17c>)
 801237c:	4613      	mov	r3, r2
 801237e:	015b      	lsls	r3, r3, #5
 8012380:	4413      	add	r3, r2
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	440b      	add	r3, r1
 8012388:	3304      	adds	r3, #4
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	b29b      	uxth	r3, r3
 801238e:	021b      	lsls	r3, r3, #8
 8012390:	82fb      	strh	r3, [r7, #22]
      usLength |= aucTCPBuf[usIndex][MB_TCP_LEN + 1];
 8012392:	8bfa      	ldrh	r2, [r7, #30]
 8012394:	4922      	ldr	r1, [pc, #136]	; (8012420 <prvxMBTCPPortReceive+0x17c>)
 8012396:	4613      	mov	r3, r2
 8012398:	015b      	lsls	r3, r3, #5
 801239a:	4413      	add	r3, r2
 801239c:	00db      	lsls	r3, r3, #3
 801239e:	1a9b      	subs	r3, r3, r2
 80123a0:	440b      	add	r3, r1
 80123a2:	3305      	adds	r3, #5
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	8afb      	ldrh	r3, [r7, #22]
 80123aa:	4313      	orrs	r3, r2
 80123ac:	82fb      	strh	r3, [r7, #22]
      
      /* Is the frame already complete. */
      if( usTCPBufPos[usIndex] < ( MB_TCP_UID + usLength ) )
 80123ae:	8bfb      	ldrh	r3, [r7, #30]
 80123b0:	4a1a      	ldr	r2, [pc, #104]	; (801241c <prvxMBTCPPortReceive+0x178>)
 80123b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123b6:	461a      	mov	r2, r3
 80123b8:	8afb      	ldrh	r3, [r7, #22]
 80123ba:	3306      	adds	r3, #6
 80123bc:	429a      	cmp	r2, r3
 80123be:	db21      	blt.n	8012404 <prvxMBTCPPortReceive+0x160>
      {
      }
      else if( usTCPBufPos[usIndex] == ( MB_TCP_UID + usLength ) )
 80123c0:	8bfb      	ldrh	r3, [r7, #30]
 80123c2:	4a16      	ldr	r2, [pc, #88]	; (801241c <prvxMBTCPPortReceive+0x178>)
 80123c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123c8:	461a      	mov	r2, r3
 80123ca:	8afb      	ldrh	r3, [r7, #22]
 80123cc:	3306      	adds	r3, #6
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d10e      	bne.n	80123f0 <prvxMBTCPPortReceive+0x14c>
      {
#if MB_TCP_DEBUG
        prvvMBTCPLogFrame( "MBTCP-RECV", &aucTCPBuf[usIndex][0], usTCPBufPos[usIndex] );
#endif
        /* Set message received flag */
        usTCPBufReceived[usIndex] = 1;
 80123d2:	8bfb      	ldrh	r3, [r7, #30]
 80123d4:	4a13      	ldr	r2, [pc, #76]	; (8012424 <prvxMBTCPPortReceive+0x180>)
 80123d6:	2101      	movs	r1, #1
 80123d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        /* Set pointer for response */
        pxPCBClientToSend = pxPCBClient[usIndex];
 80123dc:	8bfb      	ldrh	r3, [r7, #30]
 80123de:	4a0e      	ldr	r2, [pc, #56]	; (8012418 <prvxMBTCPPortReceive+0x174>)
 80123e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123e4:	4a10      	ldr	r2, [pc, #64]	; (8012428 <prvxMBTCPPortReceive+0x184>)
 80123e6:	6013      	str	r3, [r2, #0]
        ( void )xMBPortEventPost( EV_FRAME_RECEIVED );
 80123e8:	2001      	movs	r0, #1
 80123ea:	f7ff fe2b 	bl	8012044 <xMBPortEventPost>
 80123ee:	e009      	b.n	8012404 <prvxMBTCPPortReceive+0x160>
        */
        
        //prvvMBPortReleaseClient( pxPCB );
        
        /* too many package, so drop out the package */
        usTCPBufPos[usIndex] = 0;
 80123f0:	8bfb      	ldrh	r3, [r7, #30]
 80123f2:	4a0a      	ldr	r2, [pc, #40]	; (801241c <prvxMBTCPPortReceive+0x178>)
 80123f4:	2100      	movs	r1, #0
 80123f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        errCnt++;
 80123fa:	4b0c      	ldr	r3, [pc, #48]	; (801242c <prvxMBTCPPortReceive+0x188>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	3301      	adds	r3, #1
 8012400:	4a0a      	ldr	r2, [pc, #40]	; (801242c <prvxMBTCPPortReceive+0x188>)
 8012402:	6013      	str	r3, [r2, #0]
      }
    }
  }
  pbuf_free( p );
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f7f6 f9ff 	bl	8008808 <pbuf_free>
  return error;
 801240a:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3720      	adds	r7, #32
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20008c0c 	.word	0x20008c0c
 801241c:	20008f30 	.word	0x20008f30
 8012420:	20008c18 	.word	0x20008c18
 8012424:	20008f38 	.word	0x20008f38
 8012428:	20008c08 	.word	0x20008c08
 801242c:	20008f40 	.word	0x20008f40

08012430 <xMBTCPPortGetRequest>:

BOOL
xMBTCPPortGetRequest( UCHAR ** ppucMBTCPFrame, USHORT * usTCPLength )
{  
 8012430:	b480      	push	{r7}
 8012432:	b085      	sub	sp, #20
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 801243a:	2300      	movs	r3, #0
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	e024      	b.n	801248a <xMBTCPPortGetRequest+0x5a>
  {
    if(usTCPBufReceived[i] == 1)
 8012440:	4a17      	ldr	r2, [pc, #92]	; (80124a0 <xMBTCPPortGetRequest+0x70>)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012448:	2b01      	cmp	r3, #1
 801244a:	d11b      	bne.n	8012484 <xMBTCPPortGetRequest+0x54>
    {
      *ppucMBTCPFrame = &aucTCPBuf[i][0];
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	4613      	mov	r3, r2
 8012450:	015b      	lsls	r3, r3, #5
 8012452:	4413      	add	r3, r2
 8012454:	00db      	lsls	r3, r3, #3
 8012456:	1a9b      	subs	r3, r3, r2
 8012458:	4a12      	ldr	r2, [pc, #72]	; (80124a4 <xMBTCPPortGetRequest+0x74>)
 801245a:	441a      	add	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	601a      	str	r2, [r3, #0]
      *usTCPLength = usTCPBufPos[i];
 8012460:	4a11      	ldr	r2, [pc, #68]	; (80124a8 <xMBTCPPortGetRequest+0x78>)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	801a      	strh	r2, [r3, #0]
      
      /* Reset the buffer. */
      usTCPBufPos[i] = 0;
 801246c:	4a0e      	ldr	r2, [pc, #56]	; (80124a8 <xMBTCPPortGetRequest+0x78>)
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	2100      	movs	r1, #0
 8012472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      usTCPBufReceived[i] = 0;
 8012476:	4a0a      	ldr	r2, [pc, #40]	; (80124a0 <xMBTCPPortGetRequest+0x70>)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2100      	movs	r1, #0
 801247c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      return TRUE;
 8012480:	2301      	movs	r3, #1
 8012482:	e006      	b.n	8012492 <xMBTCPPortGetRequest+0x62>
  for(int i = 0; i < MB_TCP_CLIENTS; i++)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	3301      	adds	r3, #1
 8012488:	60fb      	str	r3, [r7, #12]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2b02      	cmp	r3, #2
 801248e:	ddd7      	ble.n	8012440 <xMBTCPPortGetRequest+0x10>
    }
  }
  
  return FALSE;
 8012490:	2300      	movs	r3, #0
}
 8012492:	4618      	mov	r0, r3
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	20008f38 	.word	0x20008f38
 80124a4:	20008c18 	.word	0x20008c18
 80124a8:	20008f30 	.word	0x20008f30

080124ac <xMBTCPPortSendResponse>:

BOOL
xMBTCPPortSendResponse( const UCHAR * pucMBTCPFrame, USHORT usTCPLength )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	807b      	strh	r3, [r7, #2]
  BOOL bFrameSent = FALSE;
 80124b8:	2300      	movs	r3, #0
 80124ba:	73fb      	strb	r3, [r7, #15]
  
  if( pxPCBClientToSend )
 80124bc:	4b18      	ldr	r3, [pc, #96]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d024      	beq.n	801250e <xMBTCPPortSendResponse+0x62>
  {
    /* Make sure we can send the packet. */
    assert( tcp_sndbuf( pxPCBClientToSend ) >= usTCPLength );
 80124c4:	4b16      	ldr	r3, [pc, #88]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80124cc:	887a      	ldrh	r2, [r7, #2]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d906      	bls.n	80124e0 <xMBTCPPortSendResponse+0x34>
 80124d2:	4b14      	ldr	r3, [pc, #80]	; (8012524 <xMBTCPPortSendResponse+0x78>)
 80124d4:	4a14      	ldr	r2, [pc, #80]	; (8012528 <xMBTCPPortSendResponse+0x7c>)
 80124d6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80124da:	4814      	ldr	r0, [pc, #80]	; (801252c <xMBTCPPortSendResponse+0x80>)
 80124dc:	f000 f828 	bl	8012530 <__assert_func>
    
    if( tcp_write( pxPCBClientToSend, pucMBTCPFrame, ( u16_t ) usTCPLength, TCP_WRITE_FLAG_COPY ) == ERR_OK )
 80124e0:	4b0f      	ldr	r3, [pc, #60]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 80124e2:	6818      	ldr	r0, [r3, #0]
 80124e4:	887a      	ldrh	r2, [r7, #2]
 80124e6:	2301      	movs	r3, #1
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	f7fa fe99 	bl	800d220 <tcp_write>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d107      	bne.n	8012504 <xMBTCPPortSendResponse+0x58>
          break;
        }
      }      
#endif
      /* Make sure data gets sent immediately. */
      ( void )tcp_output( pxPCBClientToSend );
 80124f4:	4b0a      	ldr	r3, [pc, #40]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fb fc7d 	bl	800ddf8 <tcp_output>
      bFrameSent = TRUE;
 80124fe:	2301      	movs	r3, #1
 8012500:	73fb      	strb	r3, [r7, #15]
 8012502:	e004      	b.n	801250e <xMBTCPPortSendResponse+0x62>
    }
    else
    {
      /* Drop the connection in case of an write error. */
      prvvMBPortReleaseClient( pxPCBClientToSend );
 8012504:	4b06      	ldr	r3, [pc, #24]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fe1b 	bl	8012144 <prvvMBPortReleaseClient>
    }
  }
  
  pxPCBClientToSend = NULL;  
 801250e:	4b04      	ldr	r3, [pc, #16]	; (8012520 <xMBTCPPortSendResponse+0x74>)
 8012510:	2200      	movs	r2, #0
 8012512:	601a      	str	r2, [r3, #0]
  return bFrameSent;
 8012514:	7bfb      	ldrb	r3, [r7, #15]
}
 8012516:	4618      	mov	r0, r3
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	20008c08 	.word	0x20008c08
 8012524:	08016060 	.word	0x08016060
 8012528:	08016208 	.word	0x08016208
 801252c:	08016090 	.word	0x08016090

08012530 <__assert_func>:
 8012530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012532:	461c      	mov	r4, r3
 8012534:	4b09      	ldr	r3, [pc, #36]	; (801255c <__assert_func+0x2c>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4605      	mov	r5, r0
 801253a:	68d8      	ldr	r0, [r3, #12]
 801253c:	b152      	cbz	r2, 8012554 <__assert_func+0x24>
 801253e:	4b08      	ldr	r3, [pc, #32]	; (8012560 <__assert_func+0x30>)
 8012540:	9100      	str	r1, [sp, #0]
 8012542:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012546:	4907      	ldr	r1, [pc, #28]	; (8012564 <__assert_func+0x34>)
 8012548:	462b      	mov	r3, r5
 801254a:	4622      	mov	r2, r4
 801254c:	f000 f80e 	bl	801256c <fiprintf>
 8012550:	f000 fc38 	bl	8012dc4 <abort>
 8012554:	4b04      	ldr	r3, [pc, #16]	; (8012568 <__assert_func+0x38>)
 8012556:	461a      	mov	r2, r3
 8012558:	e7f2      	b.n	8012540 <__assert_func+0x10>
 801255a:	bf00      	nop
 801255c:	20000024 	.word	0x20000024
 8012560:	0801621f 	.word	0x0801621f
 8012564:	0801622c 	.word	0x0801622c
 8012568:	0801625a 	.word	0x0801625a

0801256c <fiprintf>:
 801256c:	b40e      	push	{r1, r2, r3}
 801256e:	b503      	push	{r0, r1, lr}
 8012570:	4601      	mov	r1, r0
 8012572:	ab03      	add	r3, sp, #12
 8012574:	4805      	ldr	r0, [pc, #20]	; (801258c <fiprintf+0x20>)
 8012576:	f853 2b04 	ldr.w	r2, [r3], #4
 801257a:	6800      	ldr	r0, [r0, #0]
 801257c:	9301      	str	r3, [sp, #4]
 801257e:	f000 f877 	bl	8012670 <_vfiprintf_r>
 8012582:	b002      	add	sp, #8
 8012584:	f85d eb04 	ldr.w	lr, [sp], #4
 8012588:	b003      	add	sp, #12
 801258a:	4770      	bx	lr
 801258c:	20000024 	.word	0x20000024

08012590 <__libc_init_array>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	4e0d      	ldr	r6, [pc, #52]	; (80125c8 <__libc_init_array+0x38>)
 8012594:	4c0d      	ldr	r4, [pc, #52]	; (80125cc <__libc_init_array+0x3c>)
 8012596:	1ba4      	subs	r4, r4, r6
 8012598:	10a4      	asrs	r4, r4, #2
 801259a:	2500      	movs	r5, #0
 801259c:	42a5      	cmp	r5, r4
 801259e:	d109      	bne.n	80125b4 <__libc_init_array+0x24>
 80125a0:	4e0b      	ldr	r6, [pc, #44]	; (80125d0 <__libc_init_array+0x40>)
 80125a2:	4c0c      	ldr	r4, [pc, #48]	; (80125d4 <__libc_init_array+0x44>)
 80125a4:	f000 ffa6 	bl	80134f4 <_init>
 80125a8:	1ba4      	subs	r4, r4, r6
 80125aa:	10a4      	asrs	r4, r4, #2
 80125ac:	2500      	movs	r5, #0
 80125ae:	42a5      	cmp	r5, r4
 80125b0:	d105      	bne.n	80125be <__libc_init_array+0x2e>
 80125b2:	bd70      	pop	{r4, r5, r6, pc}
 80125b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125b8:	4798      	blx	r3
 80125ba:	3501      	adds	r5, #1
 80125bc:	e7ee      	b.n	801259c <__libc_init_array+0xc>
 80125be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125c2:	4798      	blx	r3
 80125c4:	3501      	adds	r5, #1
 80125c6:	e7f2      	b.n	80125ae <__libc_init_array+0x1e>
 80125c8:	080162fc 	.word	0x080162fc
 80125cc:	080162fc 	.word	0x080162fc
 80125d0:	080162fc 	.word	0x080162fc
 80125d4:	08016300 	.word	0x08016300

080125d8 <memcmp>:
 80125d8:	b530      	push	{r4, r5, lr}
 80125da:	2400      	movs	r4, #0
 80125dc:	42a2      	cmp	r2, r4
 80125de:	d101      	bne.n	80125e4 <memcmp+0xc>
 80125e0:	2000      	movs	r0, #0
 80125e2:	e007      	b.n	80125f4 <memcmp+0x1c>
 80125e4:	5d03      	ldrb	r3, [r0, r4]
 80125e6:	3401      	adds	r4, #1
 80125e8:	190d      	adds	r5, r1, r4
 80125ea:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80125ee:	42ab      	cmp	r3, r5
 80125f0:	d0f4      	beq.n	80125dc <memcmp+0x4>
 80125f2:	1b58      	subs	r0, r3, r5
 80125f4:	bd30      	pop	{r4, r5, pc}

080125f6 <memcpy>:
 80125f6:	b510      	push	{r4, lr}
 80125f8:	1e43      	subs	r3, r0, #1
 80125fa:	440a      	add	r2, r1
 80125fc:	4291      	cmp	r1, r2
 80125fe:	d100      	bne.n	8012602 <memcpy+0xc>
 8012600:	bd10      	pop	{r4, pc}
 8012602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012606:	f803 4f01 	strb.w	r4, [r3, #1]!
 801260a:	e7f7      	b.n	80125fc <memcpy+0x6>

0801260c <memset>:
 801260c:	4402      	add	r2, r0
 801260e:	4603      	mov	r3, r0
 8012610:	4293      	cmp	r3, r2
 8012612:	d100      	bne.n	8012616 <memset+0xa>
 8012614:	4770      	bx	lr
 8012616:	f803 1b01 	strb.w	r1, [r3], #1
 801261a:	e7f9      	b.n	8012610 <memset+0x4>

0801261c <__sfputc_r>:
 801261c:	6893      	ldr	r3, [r2, #8]
 801261e:	3b01      	subs	r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	b410      	push	{r4}
 8012624:	6093      	str	r3, [r2, #8]
 8012626:	da08      	bge.n	801263a <__sfputc_r+0x1e>
 8012628:	6994      	ldr	r4, [r2, #24]
 801262a:	42a3      	cmp	r3, r4
 801262c:	db01      	blt.n	8012632 <__sfputc_r+0x16>
 801262e:	290a      	cmp	r1, #10
 8012630:	d103      	bne.n	801263a <__sfputc_r+0x1e>
 8012632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012636:	f000 bb05 	b.w	8012c44 <__swbuf_r>
 801263a:	6813      	ldr	r3, [r2, #0]
 801263c:	1c58      	adds	r0, r3, #1
 801263e:	6010      	str	r0, [r2, #0]
 8012640:	7019      	strb	r1, [r3, #0]
 8012642:	4608      	mov	r0, r1
 8012644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012648:	4770      	bx	lr

0801264a <__sfputs_r>:
 801264a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	4614      	mov	r4, r2
 8012652:	18d5      	adds	r5, r2, r3
 8012654:	42ac      	cmp	r4, r5
 8012656:	d101      	bne.n	801265c <__sfputs_r+0x12>
 8012658:	2000      	movs	r0, #0
 801265a:	e007      	b.n	801266c <__sfputs_r+0x22>
 801265c:	463a      	mov	r2, r7
 801265e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012662:	4630      	mov	r0, r6
 8012664:	f7ff ffda 	bl	801261c <__sfputc_r>
 8012668:	1c43      	adds	r3, r0, #1
 801266a:	d1f3      	bne.n	8012654 <__sfputs_r+0xa>
 801266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012670 <_vfiprintf_r>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	460c      	mov	r4, r1
 8012676:	b09d      	sub	sp, #116	; 0x74
 8012678:	4617      	mov	r7, r2
 801267a:	461d      	mov	r5, r3
 801267c:	4606      	mov	r6, r0
 801267e:	b118      	cbz	r0, 8012688 <_vfiprintf_r+0x18>
 8012680:	6983      	ldr	r3, [r0, #24]
 8012682:	b90b      	cbnz	r3, 8012688 <_vfiprintf_r+0x18>
 8012684:	f000 fc96 	bl	8012fb4 <__sinit>
 8012688:	4b7c      	ldr	r3, [pc, #496]	; (801287c <_vfiprintf_r+0x20c>)
 801268a:	429c      	cmp	r4, r3
 801268c:	d158      	bne.n	8012740 <_vfiprintf_r+0xd0>
 801268e:	6874      	ldr	r4, [r6, #4]
 8012690:	89a3      	ldrh	r3, [r4, #12]
 8012692:	0718      	lsls	r0, r3, #28
 8012694:	d55e      	bpl.n	8012754 <_vfiprintf_r+0xe4>
 8012696:	6923      	ldr	r3, [r4, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d05b      	beq.n	8012754 <_vfiprintf_r+0xe4>
 801269c:	2300      	movs	r3, #0
 801269e:	9309      	str	r3, [sp, #36]	; 0x24
 80126a0:	2320      	movs	r3, #32
 80126a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126a6:	2330      	movs	r3, #48	; 0x30
 80126a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126ac:	9503      	str	r5, [sp, #12]
 80126ae:	f04f 0b01 	mov.w	fp, #1
 80126b2:	46b8      	mov	r8, r7
 80126b4:	4645      	mov	r5, r8
 80126b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80126ba:	b10b      	cbz	r3, 80126c0 <_vfiprintf_r+0x50>
 80126bc:	2b25      	cmp	r3, #37	; 0x25
 80126be:	d154      	bne.n	801276a <_vfiprintf_r+0xfa>
 80126c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80126c4:	d00b      	beq.n	80126de <_vfiprintf_r+0x6e>
 80126c6:	4653      	mov	r3, sl
 80126c8:	463a      	mov	r2, r7
 80126ca:	4621      	mov	r1, r4
 80126cc:	4630      	mov	r0, r6
 80126ce:	f7ff ffbc 	bl	801264a <__sfputs_r>
 80126d2:	3001      	adds	r0, #1
 80126d4:	f000 80c2 	beq.w	801285c <_vfiprintf_r+0x1ec>
 80126d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126da:	4453      	add	r3, sl
 80126dc:	9309      	str	r3, [sp, #36]	; 0x24
 80126de:	f898 3000 	ldrb.w	r3, [r8]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 80ba 	beq.w	801285c <_vfiprintf_r+0x1ec>
 80126e8:	2300      	movs	r3, #0
 80126ea:	f04f 32ff 	mov.w	r2, #4294967295
 80126ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f2:	9304      	str	r3, [sp, #16]
 80126f4:	9307      	str	r3, [sp, #28]
 80126f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126fa:	931a      	str	r3, [sp, #104]	; 0x68
 80126fc:	46a8      	mov	r8, r5
 80126fe:	2205      	movs	r2, #5
 8012700:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012704:	485e      	ldr	r0, [pc, #376]	; (8012880 <_vfiprintf_r+0x210>)
 8012706:	f7ed fd9b 	bl	8000240 <memchr>
 801270a:	9b04      	ldr	r3, [sp, #16]
 801270c:	bb78      	cbnz	r0, 801276e <_vfiprintf_r+0xfe>
 801270e:	06d9      	lsls	r1, r3, #27
 8012710:	bf44      	itt	mi
 8012712:	2220      	movmi	r2, #32
 8012714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012718:	071a      	lsls	r2, r3, #28
 801271a:	bf44      	itt	mi
 801271c:	222b      	movmi	r2, #43	; 0x2b
 801271e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012722:	782a      	ldrb	r2, [r5, #0]
 8012724:	2a2a      	cmp	r2, #42	; 0x2a
 8012726:	d02a      	beq.n	801277e <_vfiprintf_r+0x10e>
 8012728:	9a07      	ldr	r2, [sp, #28]
 801272a:	46a8      	mov	r8, r5
 801272c:	2000      	movs	r0, #0
 801272e:	250a      	movs	r5, #10
 8012730:	4641      	mov	r1, r8
 8012732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012736:	3b30      	subs	r3, #48	; 0x30
 8012738:	2b09      	cmp	r3, #9
 801273a:	d969      	bls.n	8012810 <_vfiprintf_r+0x1a0>
 801273c:	b360      	cbz	r0, 8012798 <_vfiprintf_r+0x128>
 801273e:	e024      	b.n	801278a <_vfiprintf_r+0x11a>
 8012740:	4b50      	ldr	r3, [pc, #320]	; (8012884 <_vfiprintf_r+0x214>)
 8012742:	429c      	cmp	r4, r3
 8012744:	d101      	bne.n	801274a <_vfiprintf_r+0xda>
 8012746:	68b4      	ldr	r4, [r6, #8]
 8012748:	e7a2      	b.n	8012690 <_vfiprintf_r+0x20>
 801274a:	4b4f      	ldr	r3, [pc, #316]	; (8012888 <_vfiprintf_r+0x218>)
 801274c:	429c      	cmp	r4, r3
 801274e:	bf08      	it	eq
 8012750:	68f4      	ldreq	r4, [r6, #12]
 8012752:	e79d      	b.n	8012690 <_vfiprintf_r+0x20>
 8012754:	4621      	mov	r1, r4
 8012756:	4630      	mov	r0, r6
 8012758:	f000 fac6 	bl	8012ce8 <__swsetup_r>
 801275c:	2800      	cmp	r0, #0
 801275e:	d09d      	beq.n	801269c <_vfiprintf_r+0x2c>
 8012760:	f04f 30ff 	mov.w	r0, #4294967295
 8012764:	b01d      	add	sp, #116	; 0x74
 8012766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276a:	46a8      	mov	r8, r5
 801276c:	e7a2      	b.n	80126b4 <_vfiprintf_r+0x44>
 801276e:	4a44      	ldr	r2, [pc, #272]	; (8012880 <_vfiprintf_r+0x210>)
 8012770:	1a80      	subs	r0, r0, r2
 8012772:	fa0b f000 	lsl.w	r0, fp, r0
 8012776:	4318      	orrs	r0, r3
 8012778:	9004      	str	r0, [sp, #16]
 801277a:	4645      	mov	r5, r8
 801277c:	e7be      	b.n	80126fc <_vfiprintf_r+0x8c>
 801277e:	9a03      	ldr	r2, [sp, #12]
 8012780:	1d11      	adds	r1, r2, #4
 8012782:	6812      	ldr	r2, [r2, #0]
 8012784:	9103      	str	r1, [sp, #12]
 8012786:	2a00      	cmp	r2, #0
 8012788:	db01      	blt.n	801278e <_vfiprintf_r+0x11e>
 801278a:	9207      	str	r2, [sp, #28]
 801278c:	e004      	b.n	8012798 <_vfiprintf_r+0x128>
 801278e:	4252      	negs	r2, r2
 8012790:	f043 0302 	orr.w	r3, r3, #2
 8012794:	9207      	str	r2, [sp, #28]
 8012796:	9304      	str	r3, [sp, #16]
 8012798:	f898 3000 	ldrb.w	r3, [r8]
 801279c:	2b2e      	cmp	r3, #46	; 0x2e
 801279e:	d10e      	bne.n	80127be <_vfiprintf_r+0x14e>
 80127a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80127a4:	2b2a      	cmp	r3, #42	; 0x2a
 80127a6:	d138      	bne.n	801281a <_vfiprintf_r+0x1aa>
 80127a8:	9b03      	ldr	r3, [sp, #12]
 80127aa:	1d1a      	adds	r2, r3, #4
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	9203      	str	r2, [sp, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	bfb8      	it	lt
 80127b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80127b8:	f108 0802 	add.w	r8, r8, #2
 80127bc:	9305      	str	r3, [sp, #20]
 80127be:	4d33      	ldr	r5, [pc, #204]	; (801288c <_vfiprintf_r+0x21c>)
 80127c0:	f898 1000 	ldrb.w	r1, [r8]
 80127c4:	2203      	movs	r2, #3
 80127c6:	4628      	mov	r0, r5
 80127c8:	f7ed fd3a 	bl	8000240 <memchr>
 80127cc:	b140      	cbz	r0, 80127e0 <_vfiprintf_r+0x170>
 80127ce:	2340      	movs	r3, #64	; 0x40
 80127d0:	1b40      	subs	r0, r0, r5
 80127d2:	fa03 f000 	lsl.w	r0, r3, r0
 80127d6:	9b04      	ldr	r3, [sp, #16]
 80127d8:	4303      	orrs	r3, r0
 80127da:	f108 0801 	add.w	r8, r8, #1
 80127de:	9304      	str	r3, [sp, #16]
 80127e0:	f898 1000 	ldrb.w	r1, [r8]
 80127e4:	482a      	ldr	r0, [pc, #168]	; (8012890 <_vfiprintf_r+0x220>)
 80127e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127ea:	2206      	movs	r2, #6
 80127ec:	f108 0701 	add.w	r7, r8, #1
 80127f0:	f7ed fd26 	bl	8000240 <memchr>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d037      	beq.n	8012868 <_vfiprintf_r+0x1f8>
 80127f8:	4b26      	ldr	r3, [pc, #152]	; (8012894 <_vfiprintf_r+0x224>)
 80127fa:	bb1b      	cbnz	r3, 8012844 <_vfiprintf_r+0x1d4>
 80127fc:	9b03      	ldr	r3, [sp, #12]
 80127fe:	3307      	adds	r3, #7
 8012800:	f023 0307 	bic.w	r3, r3, #7
 8012804:	3308      	adds	r3, #8
 8012806:	9303      	str	r3, [sp, #12]
 8012808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280a:	444b      	add	r3, r9
 801280c:	9309      	str	r3, [sp, #36]	; 0x24
 801280e:	e750      	b.n	80126b2 <_vfiprintf_r+0x42>
 8012810:	fb05 3202 	mla	r2, r5, r2, r3
 8012814:	2001      	movs	r0, #1
 8012816:	4688      	mov	r8, r1
 8012818:	e78a      	b.n	8012730 <_vfiprintf_r+0xc0>
 801281a:	2300      	movs	r3, #0
 801281c:	f108 0801 	add.w	r8, r8, #1
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	4619      	mov	r1, r3
 8012824:	250a      	movs	r5, #10
 8012826:	4640      	mov	r0, r8
 8012828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801282c:	3a30      	subs	r2, #48	; 0x30
 801282e:	2a09      	cmp	r2, #9
 8012830:	d903      	bls.n	801283a <_vfiprintf_r+0x1ca>
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0c3      	beq.n	80127be <_vfiprintf_r+0x14e>
 8012836:	9105      	str	r1, [sp, #20]
 8012838:	e7c1      	b.n	80127be <_vfiprintf_r+0x14e>
 801283a:	fb05 2101 	mla	r1, r5, r1, r2
 801283e:	2301      	movs	r3, #1
 8012840:	4680      	mov	r8, r0
 8012842:	e7f0      	b.n	8012826 <_vfiprintf_r+0x1b6>
 8012844:	ab03      	add	r3, sp, #12
 8012846:	9300      	str	r3, [sp, #0]
 8012848:	4622      	mov	r2, r4
 801284a:	4b13      	ldr	r3, [pc, #76]	; (8012898 <_vfiprintf_r+0x228>)
 801284c:	a904      	add	r1, sp, #16
 801284e:	4630      	mov	r0, r6
 8012850:	f3af 8000 	nop.w
 8012854:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012858:	4681      	mov	r9, r0
 801285a:	d1d5      	bne.n	8012808 <_vfiprintf_r+0x198>
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	065b      	lsls	r3, r3, #25
 8012860:	f53f af7e 	bmi.w	8012760 <_vfiprintf_r+0xf0>
 8012864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012866:	e77d      	b.n	8012764 <_vfiprintf_r+0xf4>
 8012868:	ab03      	add	r3, sp, #12
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	4622      	mov	r2, r4
 801286e:	4b0a      	ldr	r3, [pc, #40]	; (8012898 <_vfiprintf_r+0x228>)
 8012870:	a904      	add	r1, sp, #16
 8012872:	4630      	mov	r0, r6
 8012874:	f000 f888 	bl	8012988 <_printf_i>
 8012878:	e7ec      	b.n	8012854 <_vfiprintf_r+0x1e4>
 801287a:	bf00      	nop
 801287c:	080162b4 	.word	0x080162b4
 8012880:	08016260 	.word	0x08016260
 8012884:	080162d4 	.word	0x080162d4
 8012888:	08016294 	.word	0x08016294
 801288c:	08016266 	.word	0x08016266
 8012890:	0801626a 	.word	0x0801626a
 8012894:	00000000 	.word	0x00000000
 8012898:	0801264b 	.word	0x0801264b

0801289c <_printf_common>:
 801289c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128a0:	4691      	mov	r9, r2
 80128a2:	461f      	mov	r7, r3
 80128a4:	688a      	ldr	r2, [r1, #8]
 80128a6:	690b      	ldr	r3, [r1, #16]
 80128a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80128ac:	4293      	cmp	r3, r2
 80128ae:	bfb8      	it	lt
 80128b0:	4613      	movlt	r3, r2
 80128b2:	f8c9 3000 	str.w	r3, [r9]
 80128b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80128ba:	4606      	mov	r6, r0
 80128bc:	460c      	mov	r4, r1
 80128be:	b112      	cbz	r2, 80128c6 <_printf_common+0x2a>
 80128c0:	3301      	adds	r3, #1
 80128c2:	f8c9 3000 	str.w	r3, [r9]
 80128c6:	6823      	ldr	r3, [r4, #0]
 80128c8:	0699      	lsls	r1, r3, #26
 80128ca:	bf42      	ittt	mi
 80128cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80128d0:	3302      	addmi	r3, #2
 80128d2:	f8c9 3000 	strmi.w	r3, [r9]
 80128d6:	6825      	ldr	r5, [r4, #0]
 80128d8:	f015 0506 	ands.w	r5, r5, #6
 80128dc:	d107      	bne.n	80128ee <_printf_common+0x52>
 80128de:	f104 0a19 	add.w	sl, r4, #25
 80128e2:	68e3      	ldr	r3, [r4, #12]
 80128e4:	f8d9 2000 	ldr.w	r2, [r9]
 80128e8:	1a9b      	subs	r3, r3, r2
 80128ea:	42ab      	cmp	r3, r5
 80128ec:	dc28      	bgt.n	8012940 <_printf_common+0xa4>
 80128ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80128f2:	6822      	ldr	r2, [r4, #0]
 80128f4:	3300      	adds	r3, #0
 80128f6:	bf18      	it	ne
 80128f8:	2301      	movne	r3, #1
 80128fa:	0692      	lsls	r2, r2, #26
 80128fc:	d42d      	bmi.n	801295a <_printf_common+0xbe>
 80128fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012902:	4639      	mov	r1, r7
 8012904:	4630      	mov	r0, r6
 8012906:	47c0      	blx	r8
 8012908:	3001      	adds	r0, #1
 801290a:	d020      	beq.n	801294e <_printf_common+0xb2>
 801290c:	6823      	ldr	r3, [r4, #0]
 801290e:	68e5      	ldr	r5, [r4, #12]
 8012910:	f8d9 2000 	ldr.w	r2, [r9]
 8012914:	f003 0306 	and.w	r3, r3, #6
 8012918:	2b04      	cmp	r3, #4
 801291a:	bf08      	it	eq
 801291c:	1aad      	subeq	r5, r5, r2
 801291e:	68a3      	ldr	r3, [r4, #8]
 8012920:	6922      	ldr	r2, [r4, #16]
 8012922:	bf0c      	ite	eq
 8012924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012928:	2500      	movne	r5, #0
 801292a:	4293      	cmp	r3, r2
 801292c:	bfc4      	itt	gt
 801292e:	1a9b      	subgt	r3, r3, r2
 8012930:	18ed      	addgt	r5, r5, r3
 8012932:	f04f 0900 	mov.w	r9, #0
 8012936:	341a      	adds	r4, #26
 8012938:	454d      	cmp	r5, r9
 801293a:	d11a      	bne.n	8012972 <_printf_common+0xd6>
 801293c:	2000      	movs	r0, #0
 801293e:	e008      	b.n	8012952 <_printf_common+0xb6>
 8012940:	2301      	movs	r3, #1
 8012942:	4652      	mov	r2, sl
 8012944:	4639      	mov	r1, r7
 8012946:	4630      	mov	r0, r6
 8012948:	47c0      	blx	r8
 801294a:	3001      	adds	r0, #1
 801294c:	d103      	bne.n	8012956 <_printf_common+0xba>
 801294e:	f04f 30ff 	mov.w	r0, #4294967295
 8012952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012956:	3501      	adds	r5, #1
 8012958:	e7c3      	b.n	80128e2 <_printf_common+0x46>
 801295a:	18e1      	adds	r1, r4, r3
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	2030      	movs	r0, #48	; 0x30
 8012960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012964:	4422      	add	r2, r4
 8012966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801296a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801296e:	3302      	adds	r3, #2
 8012970:	e7c5      	b.n	80128fe <_printf_common+0x62>
 8012972:	2301      	movs	r3, #1
 8012974:	4622      	mov	r2, r4
 8012976:	4639      	mov	r1, r7
 8012978:	4630      	mov	r0, r6
 801297a:	47c0      	blx	r8
 801297c:	3001      	adds	r0, #1
 801297e:	d0e6      	beq.n	801294e <_printf_common+0xb2>
 8012980:	f109 0901 	add.w	r9, r9, #1
 8012984:	e7d8      	b.n	8012938 <_printf_common+0x9c>
	...

08012988 <_printf_i>:
 8012988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801298c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012990:	460c      	mov	r4, r1
 8012992:	7e09      	ldrb	r1, [r1, #24]
 8012994:	b085      	sub	sp, #20
 8012996:	296e      	cmp	r1, #110	; 0x6e
 8012998:	4617      	mov	r7, r2
 801299a:	4606      	mov	r6, r0
 801299c:	4698      	mov	r8, r3
 801299e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129a0:	f000 80b3 	beq.w	8012b0a <_printf_i+0x182>
 80129a4:	d822      	bhi.n	80129ec <_printf_i+0x64>
 80129a6:	2963      	cmp	r1, #99	; 0x63
 80129a8:	d036      	beq.n	8012a18 <_printf_i+0x90>
 80129aa:	d80a      	bhi.n	80129c2 <_printf_i+0x3a>
 80129ac:	2900      	cmp	r1, #0
 80129ae:	f000 80b9 	beq.w	8012b24 <_printf_i+0x19c>
 80129b2:	2958      	cmp	r1, #88	; 0x58
 80129b4:	f000 8083 	beq.w	8012abe <_printf_i+0x136>
 80129b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80129c0:	e032      	b.n	8012a28 <_printf_i+0xa0>
 80129c2:	2964      	cmp	r1, #100	; 0x64
 80129c4:	d001      	beq.n	80129ca <_printf_i+0x42>
 80129c6:	2969      	cmp	r1, #105	; 0x69
 80129c8:	d1f6      	bne.n	80129b8 <_printf_i+0x30>
 80129ca:	6820      	ldr	r0, [r4, #0]
 80129cc:	6813      	ldr	r3, [r2, #0]
 80129ce:	0605      	lsls	r5, r0, #24
 80129d0:	f103 0104 	add.w	r1, r3, #4
 80129d4:	d52a      	bpl.n	8012a2c <_printf_i+0xa4>
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6011      	str	r1, [r2, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	da03      	bge.n	80129e6 <_printf_i+0x5e>
 80129de:	222d      	movs	r2, #45	; 0x2d
 80129e0:	425b      	negs	r3, r3
 80129e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80129e6:	486f      	ldr	r0, [pc, #444]	; (8012ba4 <_printf_i+0x21c>)
 80129e8:	220a      	movs	r2, #10
 80129ea:	e039      	b.n	8012a60 <_printf_i+0xd8>
 80129ec:	2973      	cmp	r1, #115	; 0x73
 80129ee:	f000 809d 	beq.w	8012b2c <_printf_i+0x1a4>
 80129f2:	d808      	bhi.n	8012a06 <_printf_i+0x7e>
 80129f4:	296f      	cmp	r1, #111	; 0x6f
 80129f6:	d020      	beq.n	8012a3a <_printf_i+0xb2>
 80129f8:	2970      	cmp	r1, #112	; 0x70
 80129fa:	d1dd      	bne.n	80129b8 <_printf_i+0x30>
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	f043 0320 	orr.w	r3, r3, #32
 8012a02:	6023      	str	r3, [r4, #0]
 8012a04:	e003      	b.n	8012a0e <_printf_i+0x86>
 8012a06:	2975      	cmp	r1, #117	; 0x75
 8012a08:	d017      	beq.n	8012a3a <_printf_i+0xb2>
 8012a0a:	2978      	cmp	r1, #120	; 0x78
 8012a0c:	d1d4      	bne.n	80129b8 <_printf_i+0x30>
 8012a0e:	2378      	movs	r3, #120	; 0x78
 8012a10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a14:	4864      	ldr	r0, [pc, #400]	; (8012ba8 <_printf_i+0x220>)
 8012a16:	e055      	b.n	8012ac4 <_printf_i+0x13c>
 8012a18:	6813      	ldr	r3, [r2, #0]
 8012a1a:	1d19      	adds	r1, r3, #4
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	6011      	str	r1, [r2, #0]
 8012a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a28:	2301      	movs	r3, #1
 8012a2a:	e08c      	b.n	8012b46 <_printf_i+0x1be>
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	6011      	str	r1, [r2, #0]
 8012a30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a34:	bf18      	it	ne
 8012a36:	b21b      	sxthne	r3, r3
 8012a38:	e7cf      	b.n	80129da <_printf_i+0x52>
 8012a3a:	6813      	ldr	r3, [r2, #0]
 8012a3c:	6825      	ldr	r5, [r4, #0]
 8012a3e:	1d18      	adds	r0, r3, #4
 8012a40:	6010      	str	r0, [r2, #0]
 8012a42:	0628      	lsls	r0, r5, #24
 8012a44:	d501      	bpl.n	8012a4a <_printf_i+0xc2>
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	e002      	b.n	8012a50 <_printf_i+0xc8>
 8012a4a:	0668      	lsls	r0, r5, #25
 8012a4c:	d5fb      	bpl.n	8012a46 <_printf_i+0xbe>
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	4854      	ldr	r0, [pc, #336]	; (8012ba4 <_printf_i+0x21c>)
 8012a52:	296f      	cmp	r1, #111	; 0x6f
 8012a54:	bf14      	ite	ne
 8012a56:	220a      	movne	r2, #10
 8012a58:	2208      	moveq	r2, #8
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a60:	6865      	ldr	r5, [r4, #4]
 8012a62:	60a5      	str	r5, [r4, #8]
 8012a64:	2d00      	cmp	r5, #0
 8012a66:	f2c0 8095 	blt.w	8012b94 <_printf_i+0x20c>
 8012a6a:	6821      	ldr	r1, [r4, #0]
 8012a6c:	f021 0104 	bic.w	r1, r1, #4
 8012a70:	6021      	str	r1, [r4, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d13d      	bne.n	8012af2 <_printf_i+0x16a>
 8012a76:	2d00      	cmp	r5, #0
 8012a78:	f040 808e 	bne.w	8012b98 <_printf_i+0x210>
 8012a7c:	4665      	mov	r5, ip
 8012a7e:	2a08      	cmp	r2, #8
 8012a80:	d10b      	bne.n	8012a9a <_printf_i+0x112>
 8012a82:	6823      	ldr	r3, [r4, #0]
 8012a84:	07db      	lsls	r3, r3, #31
 8012a86:	d508      	bpl.n	8012a9a <_printf_i+0x112>
 8012a88:	6923      	ldr	r3, [r4, #16]
 8012a8a:	6862      	ldr	r2, [r4, #4]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	bfde      	ittt	le
 8012a90:	2330      	movle	r3, #48	; 0x30
 8012a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a9a:	ebac 0305 	sub.w	r3, ip, r5
 8012a9e:	6123      	str	r3, [r4, #16]
 8012aa0:	f8cd 8000 	str.w	r8, [sp]
 8012aa4:	463b      	mov	r3, r7
 8012aa6:	aa03      	add	r2, sp, #12
 8012aa8:	4621      	mov	r1, r4
 8012aaa:	4630      	mov	r0, r6
 8012aac:	f7ff fef6 	bl	801289c <_printf_common>
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d14d      	bne.n	8012b50 <_printf_i+0x1c8>
 8012ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab8:	b005      	add	sp, #20
 8012aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012abe:	4839      	ldr	r0, [pc, #228]	; (8012ba4 <_printf_i+0x21c>)
 8012ac0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012ac4:	6813      	ldr	r3, [r2, #0]
 8012ac6:	6821      	ldr	r1, [r4, #0]
 8012ac8:	1d1d      	adds	r5, r3, #4
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6015      	str	r5, [r2, #0]
 8012ace:	060a      	lsls	r2, r1, #24
 8012ad0:	d50b      	bpl.n	8012aea <_printf_i+0x162>
 8012ad2:	07ca      	lsls	r2, r1, #31
 8012ad4:	bf44      	itt	mi
 8012ad6:	f041 0120 	orrmi.w	r1, r1, #32
 8012ada:	6021      	strmi	r1, [r4, #0]
 8012adc:	b91b      	cbnz	r3, 8012ae6 <_printf_i+0x15e>
 8012ade:	6822      	ldr	r2, [r4, #0]
 8012ae0:	f022 0220 	bic.w	r2, r2, #32
 8012ae4:	6022      	str	r2, [r4, #0]
 8012ae6:	2210      	movs	r2, #16
 8012ae8:	e7b7      	b.n	8012a5a <_printf_i+0xd2>
 8012aea:	064d      	lsls	r5, r1, #25
 8012aec:	bf48      	it	mi
 8012aee:	b29b      	uxthmi	r3, r3
 8012af0:	e7ef      	b.n	8012ad2 <_printf_i+0x14a>
 8012af2:	4665      	mov	r5, ip
 8012af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012af8:	fb02 3311 	mls	r3, r2, r1, r3
 8012afc:	5cc3      	ldrb	r3, [r0, r3]
 8012afe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012b02:	460b      	mov	r3, r1
 8012b04:	2900      	cmp	r1, #0
 8012b06:	d1f5      	bne.n	8012af4 <_printf_i+0x16c>
 8012b08:	e7b9      	b.n	8012a7e <_printf_i+0xf6>
 8012b0a:	6813      	ldr	r3, [r2, #0]
 8012b0c:	6825      	ldr	r5, [r4, #0]
 8012b0e:	6961      	ldr	r1, [r4, #20]
 8012b10:	1d18      	adds	r0, r3, #4
 8012b12:	6010      	str	r0, [r2, #0]
 8012b14:	0628      	lsls	r0, r5, #24
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	d501      	bpl.n	8012b1e <_printf_i+0x196>
 8012b1a:	6019      	str	r1, [r3, #0]
 8012b1c:	e002      	b.n	8012b24 <_printf_i+0x19c>
 8012b1e:	066a      	lsls	r2, r5, #25
 8012b20:	d5fb      	bpl.n	8012b1a <_printf_i+0x192>
 8012b22:	8019      	strh	r1, [r3, #0]
 8012b24:	2300      	movs	r3, #0
 8012b26:	6123      	str	r3, [r4, #16]
 8012b28:	4665      	mov	r5, ip
 8012b2a:	e7b9      	b.n	8012aa0 <_printf_i+0x118>
 8012b2c:	6813      	ldr	r3, [r2, #0]
 8012b2e:	1d19      	adds	r1, r3, #4
 8012b30:	6011      	str	r1, [r2, #0]
 8012b32:	681d      	ldr	r5, [r3, #0]
 8012b34:	6862      	ldr	r2, [r4, #4]
 8012b36:	2100      	movs	r1, #0
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f7ed fb81 	bl	8000240 <memchr>
 8012b3e:	b108      	cbz	r0, 8012b44 <_printf_i+0x1bc>
 8012b40:	1b40      	subs	r0, r0, r5
 8012b42:	6060      	str	r0, [r4, #4]
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	6123      	str	r3, [r4, #16]
 8012b48:	2300      	movs	r3, #0
 8012b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b4e:	e7a7      	b.n	8012aa0 <_printf_i+0x118>
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	462a      	mov	r2, r5
 8012b54:	4639      	mov	r1, r7
 8012b56:	4630      	mov	r0, r6
 8012b58:	47c0      	blx	r8
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	d0aa      	beq.n	8012ab4 <_printf_i+0x12c>
 8012b5e:	6823      	ldr	r3, [r4, #0]
 8012b60:	079b      	lsls	r3, r3, #30
 8012b62:	d413      	bmi.n	8012b8c <_printf_i+0x204>
 8012b64:	68e0      	ldr	r0, [r4, #12]
 8012b66:	9b03      	ldr	r3, [sp, #12]
 8012b68:	4298      	cmp	r0, r3
 8012b6a:	bfb8      	it	lt
 8012b6c:	4618      	movlt	r0, r3
 8012b6e:	e7a3      	b.n	8012ab8 <_printf_i+0x130>
 8012b70:	2301      	movs	r3, #1
 8012b72:	464a      	mov	r2, r9
 8012b74:	4639      	mov	r1, r7
 8012b76:	4630      	mov	r0, r6
 8012b78:	47c0      	blx	r8
 8012b7a:	3001      	adds	r0, #1
 8012b7c:	d09a      	beq.n	8012ab4 <_printf_i+0x12c>
 8012b7e:	3501      	adds	r5, #1
 8012b80:	68e3      	ldr	r3, [r4, #12]
 8012b82:	9a03      	ldr	r2, [sp, #12]
 8012b84:	1a9b      	subs	r3, r3, r2
 8012b86:	42ab      	cmp	r3, r5
 8012b88:	dcf2      	bgt.n	8012b70 <_printf_i+0x1e8>
 8012b8a:	e7eb      	b.n	8012b64 <_printf_i+0x1dc>
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	f104 0919 	add.w	r9, r4, #25
 8012b92:	e7f5      	b.n	8012b80 <_printf_i+0x1f8>
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1ac      	bne.n	8012af2 <_printf_i+0x16a>
 8012b98:	7803      	ldrb	r3, [r0, #0]
 8012b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ba2:	e76c      	b.n	8012a7e <_printf_i+0xf6>
 8012ba4:	08016271 	.word	0x08016271
 8012ba8:	08016282 	.word	0x08016282

08012bac <iprintf>:
 8012bac:	b40f      	push	{r0, r1, r2, r3}
 8012bae:	4b0a      	ldr	r3, [pc, #40]	; (8012bd8 <iprintf+0x2c>)
 8012bb0:	b513      	push	{r0, r1, r4, lr}
 8012bb2:	681c      	ldr	r4, [r3, #0]
 8012bb4:	b124      	cbz	r4, 8012bc0 <iprintf+0x14>
 8012bb6:	69a3      	ldr	r3, [r4, #24]
 8012bb8:	b913      	cbnz	r3, 8012bc0 <iprintf+0x14>
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f000 f9fa 	bl	8012fb4 <__sinit>
 8012bc0:	ab05      	add	r3, sp, #20
 8012bc2:	9a04      	ldr	r2, [sp, #16]
 8012bc4:	68a1      	ldr	r1, [r4, #8]
 8012bc6:	9301      	str	r3, [sp, #4]
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f7ff fd51 	bl	8012670 <_vfiprintf_r>
 8012bce:	b002      	add	sp, #8
 8012bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bd4:	b004      	add	sp, #16
 8012bd6:	4770      	bx	lr
 8012bd8:	20000024 	.word	0x20000024

08012bdc <rand>:
 8012bdc:	b538      	push	{r3, r4, r5, lr}
 8012bde:	4b13      	ldr	r3, [pc, #76]	; (8012c2c <rand+0x50>)
 8012be0:	681c      	ldr	r4, [r3, #0]
 8012be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012be4:	b97b      	cbnz	r3, 8012c06 <rand+0x2a>
 8012be6:	2018      	movs	r0, #24
 8012be8:	f000 fad2 	bl	8013190 <malloc>
 8012bec:	4a10      	ldr	r2, [pc, #64]	; (8012c30 <rand+0x54>)
 8012bee:	4b11      	ldr	r3, [pc, #68]	; (8012c34 <rand+0x58>)
 8012bf0:	63a0      	str	r0, [r4, #56]	; 0x38
 8012bf2:	e9c0 2300 	strd	r2, r3, [r0]
 8012bf6:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <rand+0x5c>)
 8012bf8:	6083      	str	r3, [r0, #8]
 8012bfa:	230b      	movs	r3, #11
 8012bfc:	8183      	strh	r3, [r0, #12]
 8012bfe:	2201      	movs	r2, #1
 8012c00:	2300      	movs	r3, #0
 8012c02:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c08:	480c      	ldr	r0, [pc, #48]	; (8012c3c <rand+0x60>)
 8012c0a:	690a      	ldr	r2, [r1, #16]
 8012c0c:	694b      	ldr	r3, [r1, #20]
 8012c0e:	4c0c      	ldr	r4, [pc, #48]	; (8012c40 <rand+0x64>)
 8012c10:	4350      	muls	r0, r2
 8012c12:	fb04 0003 	mla	r0, r4, r3, r0
 8012c16:	fba2 2304 	umull	r2, r3, r2, r4
 8012c1a:	4403      	add	r3, r0
 8012c1c:	1c54      	adds	r4, r2, #1
 8012c1e:	f143 0500 	adc.w	r5, r3, #0
 8012c22:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8012c26:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	20000024 	.word	0x20000024
 8012c30:	abcd330e 	.word	0xabcd330e
 8012c34:	e66d1234 	.word	0xe66d1234
 8012c38:	0005deec 	.word	0x0005deec
 8012c3c:	5851f42d 	.word	0x5851f42d
 8012c40:	4c957f2d 	.word	0x4c957f2d

08012c44 <__swbuf_r>:
 8012c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c46:	460e      	mov	r6, r1
 8012c48:	4614      	mov	r4, r2
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	b118      	cbz	r0, 8012c56 <__swbuf_r+0x12>
 8012c4e:	6983      	ldr	r3, [r0, #24]
 8012c50:	b90b      	cbnz	r3, 8012c56 <__swbuf_r+0x12>
 8012c52:	f000 f9af 	bl	8012fb4 <__sinit>
 8012c56:	4b21      	ldr	r3, [pc, #132]	; (8012cdc <__swbuf_r+0x98>)
 8012c58:	429c      	cmp	r4, r3
 8012c5a:	d12a      	bne.n	8012cb2 <__swbuf_r+0x6e>
 8012c5c:	686c      	ldr	r4, [r5, #4]
 8012c5e:	69a3      	ldr	r3, [r4, #24]
 8012c60:	60a3      	str	r3, [r4, #8]
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	071a      	lsls	r2, r3, #28
 8012c66:	d52e      	bpl.n	8012cc6 <__swbuf_r+0x82>
 8012c68:	6923      	ldr	r3, [r4, #16]
 8012c6a:	b363      	cbz	r3, 8012cc6 <__swbuf_r+0x82>
 8012c6c:	6923      	ldr	r3, [r4, #16]
 8012c6e:	6820      	ldr	r0, [r4, #0]
 8012c70:	1ac0      	subs	r0, r0, r3
 8012c72:	6963      	ldr	r3, [r4, #20]
 8012c74:	b2f6      	uxtb	r6, r6
 8012c76:	4283      	cmp	r3, r0
 8012c78:	4637      	mov	r7, r6
 8012c7a:	dc04      	bgt.n	8012c86 <__swbuf_r+0x42>
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f000 f92e 	bl	8012ee0 <_fflush_r>
 8012c84:	bb28      	cbnz	r0, 8012cd2 <__swbuf_r+0x8e>
 8012c86:	68a3      	ldr	r3, [r4, #8]
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	60a3      	str	r3, [r4, #8]
 8012c8c:	6823      	ldr	r3, [r4, #0]
 8012c8e:	1c5a      	adds	r2, r3, #1
 8012c90:	6022      	str	r2, [r4, #0]
 8012c92:	701e      	strb	r6, [r3, #0]
 8012c94:	6963      	ldr	r3, [r4, #20]
 8012c96:	3001      	adds	r0, #1
 8012c98:	4283      	cmp	r3, r0
 8012c9a:	d004      	beq.n	8012ca6 <__swbuf_r+0x62>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	07db      	lsls	r3, r3, #31
 8012ca0:	d519      	bpl.n	8012cd6 <__swbuf_r+0x92>
 8012ca2:	2e0a      	cmp	r6, #10
 8012ca4:	d117      	bne.n	8012cd6 <__swbuf_r+0x92>
 8012ca6:	4621      	mov	r1, r4
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f000 f919 	bl	8012ee0 <_fflush_r>
 8012cae:	b190      	cbz	r0, 8012cd6 <__swbuf_r+0x92>
 8012cb0:	e00f      	b.n	8012cd2 <__swbuf_r+0x8e>
 8012cb2:	4b0b      	ldr	r3, [pc, #44]	; (8012ce0 <__swbuf_r+0x9c>)
 8012cb4:	429c      	cmp	r4, r3
 8012cb6:	d101      	bne.n	8012cbc <__swbuf_r+0x78>
 8012cb8:	68ac      	ldr	r4, [r5, #8]
 8012cba:	e7d0      	b.n	8012c5e <__swbuf_r+0x1a>
 8012cbc:	4b09      	ldr	r3, [pc, #36]	; (8012ce4 <__swbuf_r+0xa0>)
 8012cbe:	429c      	cmp	r4, r3
 8012cc0:	bf08      	it	eq
 8012cc2:	68ec      	ldreq	r4, [r5, #12]
 8012cc4:	e7cb      	b.n	8012c5e <__swbuf_r+0x1a>
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	4628      	mov	r0, r5
 8012cca:	f000 f80d 	bl	8012ce8 <__swsetup_r>
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	d0cc      	beq.n	8012c6c <__swbuf_r+0x28>
 8012cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	080162b4 	.word	0x080162b4
 8012ce0:	080162d4 	.word	0x080162d4
 8012ce4:	08016294 	.word	0x08016294

08012ce8 <__swsetup_r>:
 8012ce8:	4b32      	ldr	r3, [pc, #200]	; (8012db4 <__swsetup_r+0xcc>)
 8012cea:	b570      	push	{r4, r5, r6, lr}
 8012cec:	681d      	ldr	r5, [r3, #0]
 8012cee:	4606      	mov	r6, r0
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	b125      	cbz	r5, 8012cfe <__swsetup_r+0x16>
 8012cf4:	69ab      	ldr	r3, [r5, #24]
 8012cf6:	b913      	cbnz	r3, 8012cfe <__swsetup_r+0x16>
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f000 f95b 	bl	8012fb4 <__sinit>
 8012cfe:	4b2e      	ldr	r3, [pc, #184]	; (8012db8 <__swsetup_r+0xd0>)
 8012d00:	429c      	cmp	r4, r3
 8012d02:	d10f      	bne.n	8012d24 <__swsetup_r+0x3c>
 8012d04:	686c      	ldr	r4, [r5, #4]
 8012d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	0715      	lsls	r5, r2, #28
 8012d0e:	d42c      	bmi.n	8012d6a <__swsetup_r+0x82>
 8012d10:	06d0      	lsls	r0, r2, #27
 8012d12:	d411      	bmi.n	8012d38 <__swsetup_r+0x50>
 8012d14:	2209      	movs	r2, #9
 8012d16:	6032      	str	r2, [r6, #0]
 8012d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d1c:	81a3      	strh	r3, [r4, #12]
 8012d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d22:	e03e      	b.n	8012da2 <__swsetup_r+0xba>
 8012d24:	4b25      	ldr	r3, [pc, #148]	; (8012dbc <__swsetup_r+0xd4>)
 8012d26:	429c      	cmp	r4, r3
 8012d28:	d101      	bne.n	8012d2e <__swsetup_r+0x46>
 8012d2a:	68ac      	ldr	r4, [r5, #8]
 8012d2c:	e7eb      	b.n	8012d06 <__swsetup_r+0x1e>
 8012d2e:	4b24      	ldr	r3, [pc, #144]	; (8012dc0 <__swsetup_r+0xd8>)
 8012d30:	429c      	cmp	r4, r3
 8012d32:	bf08      	it	eq
 8012d34:	68ec      	ldreq	r4, [r5, #12]
 8012d36:	e7e6      	b.n	8012d06 <__swsetup_r+0x1e>
 8012d38:	0751      	lsls	r1, r2, #29
 8012d3a:	d512      	bpl.n	8012d62 <__swsetup_r+0x7a>
 8012d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d3e:	b141      	cbz	r1, 8012d52 <__swsetup_r+0x6a>
 8012d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d44:	4299      	cmp	r1, r3
 8012d46:	d002      	beq.n	8012d4e <__swsetup_r+0x66>
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f000 fa29 	bl	80131a0 <_free_r>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	6363      	str	r3, [r4, #52]	; 0x34
 8012d52:	89a3      	ldrh	r3, [r4, #12]
 8012d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d58:	81a3      	strh	r3, [r4, #12]
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	6063      	str	r3, [r4, #4]
 8012d5e:	6923      	ldr	r3, [r4, #16]
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	89a3      	ldrh	r3, [r4, #12]
 8012d64:	f043 0308 	orr.w	r3, r3, #8
 8012d68:	81a3      	strh	r3, [r4, #12]
 8012d6a:	6923      	ldr	r3, [r4, #16]
 8012d6c:	b94b      	cbnz	r3, 8012d82 <__swsetup_r+0x9a>
 8012d6e:	89a3      	ldrh	r3, [r4, #12]
 8012d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d78:	d003      	beq.n	8012d82 <__swsetup_r+0x9a>
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f000 f9c7 	bl	8013110 <__smakebuf_r>
 8012d82:	89a2      	ldrh	r2, [r4, #12]
 8012d84:	f012 0301 	ands.w	r3, r2, #1
 8012d88:	d00c      	beq.n	8012da4 <__swsetup_r+0xbc>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	60a3      	str	r3, [r4, #8]
 8012d8e:	6963      	ldr	r3, [r4, #20]
 8012d90:	425b      	negs	r3, r3
 8012d92:	61a3      	str	r3, [r4, #24]
 8012d94:	6923      	ldr	r3, [r4, #16]
 8012d96:	b953      	cbnz	r3, 8012dae <__swsetup_r+0xc6>
 8012d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012da0:	d1ba      	bne.n	8012d18 <__swsetup_r+0x30>
 8012da2:	bd70      	pop	{r4, r5, r6, pc}
 8012da4:	0792      	lsls	r2, r2, #30
 8012da6:	bf58      	it	pl
 8012da8:	6963      	ldrpl	r3, [r4, #20]
 8012daa:	60a3      	str	r3, [r4, #8]
 8012dac:	e7f2      	b.n	8012d94 <__swsetup_r+0xac>
 8012dae:	2000      	movs	r0, #0
 8012db0:	e7f7      	b.n	8012da2 <__swsetup_r+0xba>
 8012db2:	bf00      	nop
 8012db4:	20000024 	.word	0x20000024
 8012db8:	080162b4 	.word	0x080162b4
 8012dbc:	080162d4 	.word	0x080162d4
 8012dc0:	08016294 	.word	0x08016294

08012dc4 <abort>:
 8012dc4:	b508      	push	{r3, lr}
 8012dc6:	2006      	movs	r0, #6
 8012dc8:	f000 faca 	bl	8013360 <raise>
 8012dcc:	2001      	movs	r0, #1
 8012dce:	f7ed fe15 	bl	80009fc <_exit>
	...

08012dd4 <__sflush_r>:
 8012dd4:	898a      	ldrh	r2, [r1, #12]
 8012dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dda:	4605      	mov	r5, r0
 8012ddc:	0710      	lsls	r0, r2, #28
 8012dde:	460c      	mov	r4, r1
 8012de0:	d458      	bmi.n	8012e94 <__sflush_r+0xc0>
 8012de2:	684b      	ldr	r3, [r1, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dc05      	bgt.n	8012df4 <__sflush_r+0x20>
 8012de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	dc02      	bgt.n	8012df4 <__sflush_r+0x20>
 8012dee:	2000      	movs	r0, #0
 8012df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012df6:	2e00      	cmp	r6, #0
 8012df8:	d0f9      	beq.n	8012dee <__sflush_r+0x1a>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e00:	682f      	ldr	r7, [r5, #0]
 8012e02:	6a21      	ldr	r1, [r4, #32]
 8012e04:	602b      	str	r3, [r5, #0]
 8012e06:	d032      	beq.n	8012e6e <__sflush_r+0x9a>
 8012e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	075a      	lsls	r2, r3, #29
 8012e0e:	d505      	bpl.n	8012e1c <__sflush_r+0x48>
 8012e10:	6863      	ldr	r3, [r4, #4]
 8012e12:	1ac0      	subs	r0, r0, r3
 8012e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e16:	b10b      	cbz	r3, 8012e1c <__sflush_r+0x48>
 8012e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e1a:	1ac0      	subs	r0, r0, r3
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4602      	mov	r2, r0
 8012e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e22:	6a21      	ldr	r1, [r4, #32]
 8012e24:	4628      	mov	r0, r5
 8012e26:	47b0      	blx	r6
 8012e28:	1c43      	adds	r3, r0, #1
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	d106      	bne.n	8012e3c <__sflush_r+0x68>
 8012e2e:	6829      	ldr	r1, [r5, #0]
 8012e30:	291d      	cmp	r1, #29
 8012e32:	d848      	bhi.n	8012ec6 <__sflush_r+0xf2>
 8012e34:	4a29      	ldr	r2, [pc, #164]	; (8012edc <__sflush_r+0x108>)
 8012e36:	40ca      	lsrs	r2, r1
 8012e38:	07d6      	lsls	r6, r2, #31
 8012e3a:	d544      	bpl.n	8012ec6 <__sflush_r+0xf2>
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	6062      	str	r2, [r4, #4]
 8012e40:	04d9      	lsls	r1, r3, #19
 8012e42:	6922      	ldr	r2, [r4, #16]
 8012e44:	6022      	str	r2, [r4, #0]
 8012e46:	d504      	bpl.n	8012e52 <__sflush_r+0x7e>
 8012e48:	1c42      	adds	r2, r0, #1
 8012e4a:	d101      	bne.n	8012e50 <__sflush_r+0x7c>
 8012e4c:	682b      	ldr	r3, [r5, #0]
 8012e4e:	b903      	cbnz	r3, 8012e52 <__sflush_r+0x7e>
 8012e50:	6560      	str	r0, [r4, #84]	; 0x54
 8012e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e54:	602f      	str	r7, [r5, #0]
 8012e56:	2900      	cmp	r1, #0
 8012e58:	d0c9      	beq.n	8012dee <__sflush_r+0x1a>
 8012e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e5e:	4299      	cmp	r1, r3
 8012e60:	d002      	beq.n	8012e68 <__sflush_r+0x94>
 8012e62:	4628      	mov	r0, r5
 8012e64:	f000 f99c 	bl	80131a0 <_free_r>
 8012e68:	2000      	movs	r0, #0
 8012e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8012e6c:	e7c0      	b.n	8012df0 <__sflush_r+0x1c>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	4628      	mov	r0, r5
 8012e72:	47b0      	blx	r6
 8012e74:	1c41      	adds	r1, r0, #1
 8012e76:	d1c8      	bne.n	8012e0a <__sflush_r+0x36>
 8012e78:	682b      	ldr	r3, [r5, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d0c5      	beq.n	8012e0a <__sflush_r+0x36>
 8012e7e:	2b1d      	cmp	r3, #29
 8012e80:	d001      	beq.n	8012e86 <__sflush_r+0xb2>
 8012e82:	2b16      	cmp	r3, #22
 8012e84:	d101      	bne.n	8012e8a <__sflush_r+0xb6>
 8012e86:	602f      	str	r7, [r5, #0]
 8012e88:	e7b1      	b.n	8012dee <__sflush_r+0x1a>
 8012e8a:	89a3      	ldrh	r3, [r4, #12]
 8012e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e90:	81a3      	strh	r3, [r4, #12]
 8012e92:	e7ad      	b.n	8012df0 <__sflush_r+0x1c>
 8012e94:	690f      	ldr	r7, [r1, #16]
 8012e96:	2f00      	cmp	r7, #0
 8012e98:	d0a9      	beq.n	8012dee <__sflush_r+0x1a>
 8012e9a:	0793      	lsls	r3, r2, #30
 8012e9c:	680e      	ldr	r6, [r1, #0]
 8012e9e:	bf08      	it	eq
 8012ea0:	694b      	ldreq	r3, [r1, #20]
 8012ea2:	600f      	str	r7, [r1, #0]
 8012ea4:	bf18      	it	ne
 8012ea6:	2300      	movne	r3, #0
 8012ea8:	eba6 0807 	sub.w	r8, r6, r7
 8012eac:	608b      	str	r3, [r1, #8]
 8012eae:	f1b8 0f00 	cmp.w	r8, #0
 8012eb2:	dd9c      	ble.n	8012dee <__sflush_r+0x1a>
 8012eb4:	4643      	mov	r3, r8
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	6a21      	ldr	r1, [r4, #32]
 8012eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	47b0      	blx	r6
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	dc06      	bgt.n	8012ed2 <__sflush_r+0xfe>
 8012ec4:	89a3      	ldrh	r3, [r4, #12]
 8012ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eca:	81a3      	strh	r3, [r4, #12]
 8012ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed0:	e78e      	b.n	8012df0 <__sflush_r+0x1c>
 8012ed2:	4407      	add	r7, r0
 8012ed4:	eba8 0800 	sub.w	r8, r8, r0
 8012ed8:	e7e9      	b.n	8012eae <__sflush_r+0xda>
 8012eda:	bf00      	nop
 8012edc:	20400001 	.word	0x20400001

08012ee0 <_fflush_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	690b      	ldr	r3, [r1, #16]
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	460c      	mov	r4, r1
 8012ee8:	b1db      	cbz	r3, 8012f22 <_fflush_r+0x42>
 8012eea:	b118      	cbz	r0, 8012ef4 <_fflush_r+0x14>
 8012eec:	6983      	ldr	r3, [r0, #24]
 8012eee:	b90b      	cbnz	r3, 8012ef4 <_fflush_r+0x14>
 8012ef0:	f000 f860 	bl	8012fb4 <__sinit>
 8012ef4:	4b0c      	ldr	r3, [pc, #48]	; (8012f28 <_fflush_r+0x48>)
 8012ef6:	429c      	cmp	r4, r3
 8012ef8:	d109      	bne.n	8012f0e <_fflush_r+0x2e>
 8012efa:	686c      	ldr	r4, [r5, #4]
 8012efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f00:	b17b      	cbz	r3, 8012f22 <_fflush_r+0x42>
 8012f02:	4621      	mov	r1, r4
 8012f04:	4628      	mov	r0, r5
 8012f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f0a:	f7ff bf63 	b.w	8012dd4 <__sflush_r>
 8012f0e:	4b07      	ldr	r3, [pc, #28]	; (8012f2c <_fflush_r+0x4c>)
 8012f10:	429c      	cmp	r4, r3
 8012f12:	d101      	bne.n	8012f18 <_fflush_r+0x38>
 8012f14:	68ac      	ldr	r4, [r5, #8]
 8012f16:	e7f1      	b.n	8012efc <_fflush_r+0x1c>
 8012f18:	4b05      	ldr	r3, [pc, #20]	; (8012f30 <_fflush_r+0x50>)
 8012f1a:	429c      	cmp	r4, r3
 8012f1c:	bf08      	it	eq
 8012f1e:	68ec      	ldreq	r4, [r5, #12]
 8012f20:	e7ec      	b.n	8012efc <_fflush_r+0x1c>
 8012f22:	2000      	movs	r0, #0
 8012f24:	bd38      	pop	{r3, r4, r5, pc}
 8012f26:	bf00      	nop
 8012f28:	080162b4 	.word	0x080162b4
 8012f2c:	080162d4 	.word	0x080162d4
 8012f30:	08016294 	.word	0x08016294

08012f34 <std>:
 8012f34:	2300      	movs	r3, #0
 8012f36:	b510      	push	{r4, lr}
 8012f38:	4604      	mov	r4, r0
 8012f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f3e:	6083      	str	r3, [r0, #8]
 8012f40:	8181      	strh	r1, [r0, #12]
 8012f42:	6643      	str	r3, [r0, #100]	; 0x64
 8012f44:	81c2      	strh	r2, [r0, #14]
 8012f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f4a:	6183      	str	r3, [r0, #24]
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	2208      	movs	r2, #8
 8012f50:	305c      	adds	r0, #92	; 0x5c
 8012f52:	f7ff fb5b 	bl	801260c <memset>
 8012f56:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <std+0x38>)
 8012f58:	6263      	str	r3, [r4, #36]	; 0x24
 8012f5a:	4b05      	ldr	r3, [pc, #20]	; (8012f70 <std+0x3c>)
 8012f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f5e:	4b05      	ldr	r3, [pc, #20]	; (8012f74 <std+0x40>)
 8012f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f62:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <std+0x44>)
 8012f64:	6224      	str	r4, [r4, #32]
 8012f66:	6323      	str	r3, [r4, #48]	; 0x30
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	bf00      	nop
 8012f6c:	08013399 	.word	0x08013399
 8012f70:	080133bb 	.word	0x080133bb
 8012f74:	080133f3 	.word	0x080133f3
 8012f78:	08013417 	.word	0x08013417

08012f7c <_cleanup_r>:
 8012f7c:	4901      	ldr	r1, [pc, #4]	; (8012f84 <_cleanup_r+0x8>)
 8012f7e:	f000 b885 	b.w	801308c <_fwalk_reent>
 8012f82:	bf00      	nop
 8012f84:	08012ee1 	.word	0x08012ee1

08012f88 <__sfmoreglue>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	1e4a      	subs	r2, r1, #1
 8012f8c:	2568      	movs	r5, #104	; 0x68
 8012f8e:	4355      	muls	r5, r2
 8012f90:	460e      	mov	r6, r1
 8012f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f96:	f000 f951 	bl	801323c <_malloc_r>
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	b140      	cbz	r0, 8012fb0 <__sfmoreglue+0x28>
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8012fa4:	300c      	adds	r0, #12
 8012fa6:	60a0      	str	r0, [r4, #8]
 8012fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012fac:	f7ff fb2e 	bl	801260c <memset>
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}

08012fb4 <__sinit>:
 8012fb4:	6983      	ldr	r3, [r0, #24]
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	4604      	mov	r4, r0
 8012fba:	bb33      	cbnz	r3, 801300a <__sinit+0x56>
 8012fbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012fc0:	6503      	str	r3, [r0, #80]	; 0x50
 8012fc2:	4b12      	ldr	r3, [pc, #72]	; (801300c <__sinit+0x58>)
 8012fc4:	4a12      	ldr	r2, [pc, #72]	; (8013010 <__sinit+0x5c>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	6282      	str	r2, [r0, #40]	; 0x28
 8012fca:	4298      	cmp	r0, r3
 8012fcc:	bf04      	itt	eq
 8012fce:	2301      	moveq	r3, #1
 8012fd0:	6183      	streq	r3, [r0, #24]
 8012fd2:	f000 f81f 	bl	8013014 <__sfp>
 8012fd6:	6060      	str	r0, [r4, #4]
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 f81b 	bl	8013014 <__sfp>
 8012fde:	60a0      	str	r0, [r4, #8]
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f000 f817 	bl	8013014 <__sfp>
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	60e0      	str	r0, [r4, #12]
 8012fea:	2104      	movs	r1, #4
 8012fec:	6860      	ldr	r0, [r4, #4]
 8012fee:	f7ff ffa1 	bl	8012f34 <std>
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	2109      	movs	r1, #9
 8012ff6:	68a0      	ldr	r0, [r4, #8]
 8012ff8:	f7ff ff9c 	bl	8012f34 <std>
 8012ffc:	2202      	movs	r2, #2
 8012ffe:	2112      	movs	r1, #18
 8013000:	68e0      	ldr	r0, [r4, #12]
 8013002:	f7ff ff97 	bl	8012f34 <std>
 8013006:	2301      	movs	r3, #1
 8013008:	61a3      	str	r3, [r4, #24]
 801300a:	bd10      	pop	{r4, pc}
 801300c:	0801625c 	.word	0x0801625c
 8013010:	08012f7d 	.word	0x08012f7d

08013014 <__sfp>:
 8013014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013016:	4b1b      	ldr	r3, [pc, #108]	; (8013084 <__sfp+0x70>)
 8013018:	681e      	ldr	r6, [r3, #0]
 801301a:	69b3      	ldr	r3, [r6, #24]
 801301c:	4607      	mov	r7, r0
 801301e:	b913      	cbnz	r3, 8013026 <__sfp+0x12>
 8013020:	4630      	mov	r0, r6
 8013022:	f7ff ffc7 	bl	8012fb4 <__sinit>
 8013026:	3648      	adds	r6, #72	; 0x48
 8013028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801302c:	3b01      	subs	r3, #1
 801302e:	d503      	bpl.n	8013038 <__sfp+0x24>
 8013030:	6833      	ldr	r3, [r6, #0]
 8013032:	b133      	cbz	r3, 8013042 <__sfp+0x2e>
 8013034:	6836      	ldr	r6, [r6, #0]
 8013036:	e7f7      	b.n	8013028 <__sfp+0x14>
 8013038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801303c:	b16d      	cbz	r5, 801305a <__sfp+0x46>
 801303e:	3468      	adds	r4, #104	; 0x68
 8013040:	e7f4      	b.n	801302c <__sfp+0x18>
 8013042:	2104      	movs	r1, #4
 8013044:	4638      	mov	r0, r7
 8013046:	f7ff ff9f 	bl	8012f88 <__sfmoreglue>
 801304a:	6030      	str	r0, [r6, #0]
 801304c:	2800      	cmp	r0, #0
 801304e:	d1f1      	bne.n	8013034 <__sfp+0x20>
 8013050:	230c      	movs	r3, #12
 8013052:	603b      	str	r3, [r7, #0]
 8013054:	4604      	mov	r4, r0
 8013056:	4620      	mov	r0, r4
 8013058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801305a:	4b0b      	ldr	r3, [pc, #44]	; (8013088 <__sfp+0x74>)
 801305c:	6665      	str	r5, [r4, #100]	; 0x64
 801305e:	e9c4 5500 	strd	r5, r5, [r4]
 8013062:	60a5      	str	r5, [r4, #8]
 8013064:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013068:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801306c:	2208      	movs	r2, #8
 801306e:	4629      	mov	r1, r5
 8013070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013074:	f7ff faca 	bl	801260c <memset>
 8013078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801307c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013080:	e7e9      	b.n	8013056 <__sfp+0x42>
 8013082:	bf00      	nop
 8013084:	0801625c 	.word	0x0801625c
 8013088:	ffff0001 	.word	0xffff0001

0801308c <_fwalk_reent>:
 801308c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013090:	4680      	mov	r8, r0
 8013092:	4689      	mov	r9, r1
 8013094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013098:	2600      	movs	r6, #0
 801309a:	b914      	cbnz	r4, 80130a2 <_fwalk_reent+0x16>
 801309c:	4630      	mov	r0, r6
 801309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80130a6:	3f01      	subs	r7, #1
 80130a8:	d501      	bpl.n	80130ae <_fwalk_reent+0x22>
 80130aa:	6824      	ldr	r4, [r4, #0]
 80130ac:	e7f5      	b.n	801309a <_fwalk_reent+0xe>
 80130ae:	89ab      	ldrh	r3, [r5, #12]
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d907      	bls.n	80130c4 <_fwalk_reent+0x38>
 80130b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80130b8:	3301      	adds	r3, #1
 80130ba:	d003      	beq.n	80130c4 <_fwalk_reent+0x38>
 80130bc:	4629      	mov	r1, r5
 80130be:	4640      	mov	r0, r8
 80130c0:	47c8      	blx	r9
 80130c2:	4306      	orrs	r6, r0
 80130c4:	3568      	adds	r5, #104	; 0x68
 80130c6:	e7ee      	b.n	80130a6 <_fwalk_reent+0x1a>

080130c8 <__swhatbuf_r>:
 80130c8:	b570      	push	{r4, r5, r6, lr}
 80130ca:	460e      	mov	r6, r1
 80130cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d0:	2900      	cmp	r1, #0
 80130d2:	b096      	sub	sp, #88	; 0x58
 80130d4:	4614      	mov	r4, r2
 80130d6:	461d      	mov	r5, r3
 80130d8:	da07      	bge.n	80130ea <__swhatbuf_r+0x22>
 80130da:	2300      	movs	r3, #0
 80130dc:	602b      	str	r3, [r5, #0]
 80130de:	89b3      	ldrh	r3, [r6, #12]
 80130e0:	061a      	lsls	r2, r3, #24
 80130e2:	d410      	bmi.n	8013106 <__swhatbuf_r+0x3e>
 80130e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130e8:	e00e      	b.n	8013108 <__swhatbuf_r+0x40>
 80130ea:	466a      	mov	r2, sp
 80130ec:	f000 f9ba 	bl	8013464 <_fstat_r>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	dbf2      	blt.n	80130da <__swhatbuf_r+0x12>
 80130f4:	9a01      	ldr	r2, [sp, #4]
 80130f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80130fe:	425a      	negs	r2, r3
 8013100:	415a      	adcs	r2, r3
 8013102:	602a      	str	r2, [r5, #0]
 8013104:	e7ee      	b.n	80130e4 <__swhatbuf_r+0x1c>
 8013106:	2340      	movs	r3, #64	; 0x40
 8013108:	2000      	movs	r0, #0
 801310a:	6023      	str	r3, [r4, #0]
 801310c:	b016      	add	sp, #88	; 0x58
 801310e:	bd70      	pop	{r4, r5, r6, pc}

08013110 <__smakebuf_r>:
 8013110:	898b      	ldrh	r3, [r1, #12]
 8013112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013114:	079d      	lsls	r5, r3, #30
 8013116:	4606      	mov	r6, r0
 8013118:	460c      	mov	r4, r1
 801311a:	d507      	bpl.n	801312c <__smakebuf_r+0x1c>
 801311c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	6123      	str	r3, [r4, #16]
 8013124:	2301      	movs	r3, #1
 8013126:	6163      	str	r3, [r4, #20]
 8013128:	b002      	add	sp, #8
 801312a:	bd70      	pop	{r4, r5, r6, pc}
 801312c:	ab01      	add	r3, sp, #4
 801312e:	466a      	mov	r2, sp
 8013130:	f7ff ffca 	bl	80130c8 <__swhatbuf_r>
 8013134:	9900      	ldr	r1, [sp, #0]
 8013136:	4605      	mov	r5, r0
 8013138:	4630      	mov	r0, r6
 801313a:	f000 f87f 	bl	801323c <_malloc_r>
 801313e:	b948      	cbnz	r0, 8013154 <__smakebuf_r+0x44>
 8013140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013144:	059a      	lsls	r2, r3, #22
 8013146:	d4ef      	bmi.n	8013128 <__smakebuf_r+0x18>
 8013148:	f023 0303 	bic.w	r3, r3, #3
 801314c:	f043 0302 	orr.w	r3, r3, #2
 8013150:	81a3      	strh	r3, [r4, #12]
 8013152:	e7e3      	b.n	801311c <__smakebuf_r+0xc>
 8013154:	4b0d      	ldr	r3, [pc, #52]	; (801318c <__smakebuf_r+0x7c>)
 8013156:	62b3      	str	r3, [r6, #40]	; 0x28
 8013158:	89a3      	ldrh	r3, [r4, #12]
 801315a:	6020      	str	r0, [r4, #0]
 801315c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013160:	81a3      	strh	r3, [r4, #12]
 8013162:	9b00      	ldr	r3, [sp, #0]
 8013164:	6163      	str	r3, [r4, #20]
 8013166:	9b01      	ldr	r3, [sp, #4]
 8013168:	6120      	str	r0, [r4, #16]
 801316a:	b15b      	cbz	r3, 8013184 <__smakebuf_r+0x74>
 801316c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013170:	4630      	mov	r0, r6
 8013172:	f000 f989 	bl	8013488 <_isatty_r>
 8013176:	b128      	cbz	r0, 8013184 <__smakebuf_r+0x74>
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	f023 0303 	bic.w	r3, r3, #3
 801317e:	f043 0301 	orr.w	r3, r3, #1
 8013182:	81a3      	strh	r3, [r4, #12]
 8013184:	89a3      	ldrh	r3, [r4, #12]
 8013186:	431d      	orrs	r5, r3
 8013188:	81a5      	strh	r5, [r4, #12]
 801318a:	e7cd      	b.n	8013128 <__smakebuf_r+0x18>
 801318c:	08012f7d 	.word	0x08012f7d

08013190 <malloc>:
 8013190:	4b02      	ldr	r3, [pc, #8]	; (801319c <malloc+0xc>)
 8013192:	4601      	mov	r1, r0
 8013194:	6818      	ldr	r0, [r3, #0]
 8013196:	f000 b851 	b.w	801323c <_malloc_r>
 801319a:	bf00      	nop
 801319c:	20000024 	.word	0x20000024

080131a0 <_free_r>:
 80131a0:	b538      	push	{r3, r4, r5, lr}
 80131a2:	4605      	mov	r5, r0
 80131a4:	2900      	cmp	r1, #0
 80131a6:	d045      	beq.n	8013234 <_free_r+0x94>
 80131a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131ac:	1f0c      	subs	r4, r1, #4
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bfb8      	it	lt
 80131b2:	18e4      	addlt	r4, r4, r3
 80131b4:	f000 f98a 	bl	80134cc <__malloc_lock>
 80131b8:	4a1f      	ldr	r2, [pc, #124]	; (8013238 <_free_r+0x98>)
 80131ba:	6813      	ldr	r3, [r2, #0]
 80131bc:	4610      	mov	r0, r2
 80131be:	b933      	cbnz	r3, 80131ce <_free_r+0x2e>
 80131c0:	6063      	str	r3, [r4, #4]
 80131c2:	6014      	str	r4, [r2, #0]
 80131c4:	4628      	mov	r0, r5
 80131c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ca:	f000 b980 	b.w	80134ce <__malloc_unlock>
 80131ce:	42a3      	cmp	r3, r4
 80131d0:	d90c      	bls.n	80131ec <_free_r+0x4c>
 80131d2:	6821      	ldr	r1, [r4, #0]
 80131d4:	1862      	adds	r2, r4, r1
 80131d6:	4293      	cmp	r3, r2
 80131d8:	bf04      	itt	eq
 80131da:	681a      	ldreq	r2, [r3, #0]
 80131dc:	685b      	ldreq	r3, [r3, #4]
 80131de:	6063      	str	r3, [r4, #4]
 80131e0:	bf04      	itt	eq
 80131e2:	1852      	addeq	r2, r2, r1
 80131e4:	6022      	streq	r2, [r4, #0]
 80131e6:	6004      	str	r4, [r0, #0]
 80131e8:	e7ec      	b.n	80131c4 <_free_r+0x24>
 80131ea:	4613      	mov	r3, r2
 80131ec:	685a      	ldr	r2, [r3, #4]
 80131ee:	b10a      	cbz	r2, 80131f4 <_free_r+0x54>
 80131f0:	42a2      	cmp	r2, r4
 80131f2:	d9fa      	bls.n	80131ea <_free_r+0x4a>
 80131f4:	6819      	ldr	r1, [r3, #0]
 80131f6:	1858      	adds	r0, r3, r1
 80131f8:	42a0      	cmp	r0, r4
 80131fa:	d10b      	bne.n	8013214 <_free_r+0x74>
 80131fc:	6820      	ldr	r0, [r4, #0]
 80131fe:	4401      	add	r1, r0
 8013200:	1858      	adds	r0, r3, r1
 8013202:	4282      	cmp	r2, r0
 8013204:	6019      	str	r1, [r3, #0]
 8013206:	d1dd      	bne.n	80131c4 <_free_r+0x24>
 8013208:	6810      	ldr	r0, [r2, #0]
 801320a:	6852      	ldr	r2, [r2, #4]
 801320c:	605a      	str	r2, [r3, #4]
 801320e:	4401      	add	r1, r0
 8013210:	6019      	str	r1, [r3, #0]
 8013212:	e7d7      	b.n	80131c4 <_free_r+0x24>
 8013214:	d902      	bls.n	801321c <_free_r+0x7c>
 8013216:	230c      	movs	r3, #12
 8013218:	602b      	str	r3, [r5, #0]
 801321a:	e7d3      	b.n	80131c4 <_free_r+0x24>
 801321c:	6820      	ldr	r0, [r4, #0]
 801321e:	1821      	adds	r1, r4, r0
 8013220:	428a      	cmp	r2, r1
 8013222:	bf04      	itt	eq
 8013224:	6811      	ldreq	r1, [r2, #0]
 8013226:	6852      	ldreq	r2, [r2, #4]
 8013228:	6062      	str	r2, [r4, #4]
 801322a:	bf04      	itt	eq
 801322c:	1809      	addeq	r1, r1, r0
 801322e:	6021      	streq	r1, [r4, #0]
 8013230:	605c      	str	r4, [r3, #4]
 8013232:	e7c7      	b.n	80131c4 <_free_r+0x24>
 8013234:	bd38      	pop	{r3, r4, r5, pc}
 8013236:	bf00      	nop
 8013238:	20008f44 	.word	0x20008f44

0801323c <_malloc_r>:
 801323c:	b570      	push	{r4, r5, r6, lr}
 801323e:	1ccd      	adds	r5, r1, #3
 8013240:	f025 0503 	bic.w	r5, r5, #3
 8013244:	3508      	adds	r5, #8
 8013246:	2d0c      	cmp	r5, #12
 8013248:	bf38      	it	cc
 801324a:	250c      	movcc	r5, #12
 801324c:	2d00      	cmp	r5, #0
 801324e:	4606      	mov	r6, r0
 8013250:	db01      	blt.n	8013256 <_malloc_r+0x1a>
 8013252:	42a9      	cmp	r1, r5
 8013254:	d903      	bls.n	801325e <_malloc_r+0x22>
 8013256:	230c      	movs	r3, #12
 8013258:	6033      	str	r3, [r6, #0]
 801325a:	2000      	movs	r0, #0
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	f000 f935 	bl	80134cc <__malloc_lock>
 8013262:	4a21      	ldr	r2, [pc, #132]	; (80132e8 <_malloc_r+0xac>)
 8013264:	6814      	ldr	r4, [r2, #0]
 8013266:	4621      	mov	r1, r4
 8013268:	b991      	cbnz	r1, 8013290 <_malloc_r+0x54>
 801326a:	4c20      	ldr	r4, [pc, #128]	; (80132ec <_malloc_r+0xb0>)
 801326c:	6823      	ldr	r3, [r4, #0]
 801326e:	b91b      	cbnz	r3, 8013278 <_malloc_r+0x3c>
 8013270:	4630      	mov	r0, r6
 8013272:	f000 f83d 	bl	80132f0 <_sbrk_r>
 8013276:	6020      	str	r0, [r4, #0]
 8013278:	4629      	mov	r1, r5
 801327a:	4630      	mov	r0, r6
 801327c:	f000 f838 	bl	80132f0 <_sbrk_r>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d124      	bne.n	80132ce <_malloc_r+0x92>
 8013284:	230c      	movs	r3, #12
 8013286:	6033      	str	r3, [r6, #0]
 8013288:	4630      	mov	r0, r6
 801328a:	f000 f920 	bl	80134ce <__malloc_unlock>
 801328e:	e7e4      	b.n	801325a <_malloc_r+0x1e>
 8013290:	680b      	ldr	r3, [r1, #0]
 8013292:	1b5b      	subs	r3, r3, r5
 8013294:	d418      	bmi.n	80132c8 <_malloc_r+0x8c>
 8013296:	2b0b      	cmp	r3, #11
 8013298:	d90f      	bls.n	80132ba <_malloc_r+0x7e>
 801329a:	600b      	str	r3, [r1, #0]
 801329c:	50cd      	str	r5, [r1, r3]
 801329e:	18cc      	adds	r4, r1, r3
 80132a0:	4630      	mov	r0, r6
 80132a2:	f000 f914 	bl	80134ce <__malloc_unlock>
 80132a6:	f104 000b 	add.w	r0, r4, #11
 80132aa:	1d23      	adds	r3, r4, #4
 80132ac:	f020 0007 	bic.w	r0, r0, #7
 80132b0:	1ac3      	subs	r3, r0, r3
 80132b2:	d0d3      	beq.n	801325c <_malloc_r+0x20>
 80132b4:	425a      	negs	r2, r3
 80132b6:	50e2      	str	r2, [r4, r3]
 80132b8:	e7d0      	b.n	801325c <_malloc_r+0x20>
 80132ba:	428c      	cmp	r4, r1
 80132bc:	684b      	ldr	r3, [r1, #4]
 80132be:	bf16      	itet	ne
 80132c0:	6063      	strne	r3, [r4, #4]
 80132c2:	6013      	streq	r3, [r2, #0]
 80132c4:	460c      	movne	r4, r1
 80132c6:	e7eb      	b.n	80132a0 <_malloc_r+0x64>
 80132c8:	460c      	mov	r4, r1
 80132ca:	6849      	ldr	r1, [r1, #4]
 80132cc:	e7cc      	b.n	8013268 <_malloc_r+0x2c>
 80132ce:	1cc4      	adds	r4, r0, #3
 80132d0:	f024 0403 	bic.w	r4, r4, #3
 80132d4:	42a0      	cmp	r0, r4
 80132d6:	d005      	beq.n	80132e4 <_malloc_r+0xa8>
 80132d8:	1a21      	subs	r1, r4, r0
 80132da:	4630      	mov	r0, r6
 80132dc:	f000 f808 	bl	80132f0 <_sbrk_r>
 80132e0:	3001      	adds	r0, #1
 80132e2:	d0cf      	beq.n	8013284 <_malloc_r+0x48>
 80132e4:	6025      	str	r5, [r4, #0]
 80132e6:	e7db      	b.n	80132a0 <_malloc_r+0x64>
 80132e8:	20008f44 	.word	0x20008f44
 80132ec:	20008f48 	.word	0x20008f48

080132f0 <_sbrk_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4c06      	ldr	r4, [pc, #24]	; (801330c <_sbrk_r+0x1c>)
 80132f4:	2300      	movs	r3, #0
 80132f6:	4605      	mov	r5, r0
 80132f8:	4608      	mov	r0, r1
 80132fa:	6023      	str	r3, [r4, #0]
 80132fc:	f7ed fbf6 	bl	8000aec <_sbrk>
 8013300:	1c43      	adds	r3, r0, #1
 8013302:	d102      	bne.n	801330a <_sbrk_r+0x1a>
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	b103      	cbz	r3, 801330a <_sbrk_r+0x1a>
 8013308:	602b      	str	r3, [r5, #0]
 801330a:	bd38      	pop	{r3, r4, r5, pc}
 801330c:	2000f824 	.word	0x2000f824

08013310 <_raise_r>:
 8013310:	291f      	cmp	r1, #31
 8013312:	b538      	push	{r3, r4, r5, lr}
 8013314:	4604      	mov	r4, r0
 8013316:	460d      	mov	r5, r1
 8013318:	d904      	bls.n	8013324 <_raise_r+0x14>
 801331a:	2316      	movs	r3, #22
 801331c:	6003      	str	r3, [r0, #0]
 801331e:	f04f 30ff 	mov.w	r0, #4294967295
 8013322:	bd38      	pop	{r3, r4, r5, pc}
 8013324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013326:	b112      	cbz	r2, 801332e <_raise_r+0x1e>
 8013328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801332c:	b94b      	cbnz	r3, 8013342 <_raise_r+0x32>
 801332e:	4620      	mov	r0, r4
 8013330:	f000 f830 	bl	8013394 <_getpid_r>
 8013334:	462a      	mov	r2, r5
 8013336:	4601      	mov	r1, r0
 8013338:	4620      	mov	r0, r4
 801333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801333e:	f000 b817 	b.w	8013370 <_kill_r>
 8013342:	2b01      	cmp	r3, #1
 8013344:	d00a      	beq.n	801335c <_raise_r+0x4c>
 8013346:	1c59      	adds	r1, r3, #1
 8013348:	d103      	bne.n	8013352 <_raise_r+0x42>
 801334a:	2316      	movs	r3, #22
 801334c:	6003      	str	r3, [r0, #0]
 801334e:	2001      	movs	r0, #1
 8013350:	e7e7      	b.n	8013322 <_raise_r+0x12>
 8013352:	2400      	movs	r4, #0
 8013354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013358:	4628      	mov	r0, r5
 801335a:	4798      	blx	r3
 801335c:	2000      	movs	r0, #0
 801335e:	e7e0      	b.n	8013322 <_raise_r+0x12>

08013360 <raise>:
 8013360:	4b02      	ldr	r3, [pc, #8]	; (801336c <raise+0xc>)
 8013362:	4601      	mov	r1, r0
 8013364:	6818      	ldr	r0, [r3, #0]
 8013366:	f7ff bfd3 	b.w	8013310 <_raise_r>
 801336a:	bf00      	nop
 801336c:	20000024 	.word	0x20000024

08013370 <_kill_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4c07      	ldr	r4, [pc, #28]	; (8013390 <_kill_r+0x20>)
 8013374:	2300      	movs	r3, #0
 8013376:	4605      	mov	r5, r0
 8013378:	4608      	mov	r0, r1
 801337a:	4611      	mov	r1, r2
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	f7ed fb2b 	bl	80009d8 <_kill>
 8013382:	1c43      	adds	r3, r0, #1
 8013384:	d102      	bne.n	801338c <_kill_r+0x1c>
 8013386:	6823      	ldr	r3, [r4, #0]
 8013388:	b103      	cbz	r3, 801338c <_kill_r+0x1c>
 801338a:	602b      	str	r3, [r5, #0]
 801338c:	bd38      	pop	{r3, r4, r5, pc}
 801338e:	bf00      	nop
 8013390:	2000f824 	.word	0x2000f824

08013394 <_getpid_r>:
 8013394:	f7ed bb18 	b.w	80009c8 <_getpid>

08013398 <__sread>:
 8013398:	b510      	push	{r4, lr}
 801339a:	460c      	mov	r4, r1
 801339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a0:	f000 f896 	bl	80134d0 <_read_r>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	bfab      	itete	ge
 80133a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133aa:	89a3      	ldrhlt	r3, [r4, #12]
 80133ac:	181b      	addge	r3, r3, r0
 80133ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133b2:	bfac      	ite	ge
 80133b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80133b6:	81a3      	strhlt	r3, [r4, #12]
 80133b8:	bd10      	pop	{r4, pc}

080133ba <__swrite>:
 80133ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133be:	461f      	mov	r7, r3
 80133c0:	898b      	ldrh	r3, [r1, #12]
 80133c2:	05db      	lsls	r3, r3, #23
 80133c4:	4605      	mov	r5, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	4616      	mov	r6, r2
 80133ca:	d505      	bpl.n	80133d8 <__swrite+0x1e>
 80133cc:	2302      	movs	r3, #2
 80133ce:	2200      	movs	r2, #0
 80133d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d4:	f000 f868 	bl	80134a8 <_lseek_r>
 80133d8:	89a3      	ldrh	r3, [r4, #12]
 80133da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133e2:	81a3      	strh	r3, [r4, #12]
 80133e4:	4632      	mov	r2, r6
 80133e6:	463b      	mov	r3, r7
 80133e8:	4628      	mov	r0, r5
 80133ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133ee:	f000 b817 	b.w	8013420 <_write_r>

080133f2 <__sseek>:
 80133f2:	b510      	push	{r4, lr}
 80133f4:	460c      	mov	r4, r1
 80133f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133fa:	f000 f855 	bl	80134a8 <_lseek_r>
 80133fe:	1c43      	adds	r3, r0, #1
 8013400:	89a3      	ldrh	r3, [r4, #12]
 8013402:	bf15      	itete	ne
 8013404:	6560      	strne	r0, [r4, #84]	; 0x54
 8013406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801340a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801340e:	81a3      	strheq	r3, [r4, #12]
 8013410:	bf18      	it	ne
 8013412:	81a3      	strhne	r3, [r4, #12]
 8013414:	bd10      	pop	{r4, pc}

08013416 <__sclose>:
 8013416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801341a:	f000 b813 	b.w	8013444 <_close_r>
	...

08013420 <_write_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4c07      	ldr	r4, [pc, #28]	; (8013440 <_write_r+0x20>)
 8013424:	4605      	mov	r5, r0
 8013426:	4608      	mov	r0, r1
 8013428:	4611      	mov	r1, r2
 801342a:	2200      	movs	r2, #0
 801342c:	6022      	str	r2, [r4, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	f7ed fb0b 	bl	8000a4a <_write>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	d102      	bne.n	801343e <_write_r+0x1e>
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	b103      	cbz	r3, 801343e <_write_r+0x1e>
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	bd38      	pop	{r3, r4, r5, pc}
 8013440:	2000f824 	.word	0x2000f824

08013444 <_close_r>:
 8013444:	b538      	push	{r3, r4, r5, lr}
 8013446:	4c06      	ldr	r4, [pc, #24]	; (8013460 <_close_r+0x1c>)
 8013448:	2300      	movs	r3, #0
 801344a:	4605      	mov	r5, r0
 801344c:	4608      	mov	r0, r1
 801344e:	6023      	str	r3, [r4, #0]
 8013450:	f7ed fb17 	bl	8000a82 <_close>
 8013454:	1c43      	adds	r3, r0, #1
 8013456:	d102      	bne.n	801345e <_close_r+0x1a>
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	b103      	cbz	r3, 801345e <_close_r+0x1a>
 801345c:	602b      	str	r3, [r5, #0]
 801345e:	bd38      	pop	{r3, r4, r5, pc}
 8013460:	2000f824 	.word	0x2000f824

08013464 <_fstat_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4c07      	ldr	r4, [pc, #28]	; (8013484 <_fstat_r+0x20>)
 8013468:	2300      	movs	r3, #0
 801346a:	4605      	mov	r5, r0
 801346c:	4608      	mov	r0, r1
 801346e:	4611      	mov	r1, r2
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	f7ed fb12 	bl	8000a9a <_fstat>
 8013476:	1c43      	adds	r3, r0, #1
 8013478:	d102      	bne.n	8013480 <_fstat_r+0x1c>
 801347a:	6823      	ldr	r3, [r4, #0]
 801347c:	b103      	cbz	r3, 8013480 <_fstat_r+0x1c>
 801347e:	602b      	str	r3, [r5, #0]
 8013480:	bd38      	pop	{r3, r4, r5, pc}
 8013482:	bf00      	nop
 8013484:	2000f824 	.word	0x2000f824

08013488 <_isatty_r>:
 8013488:	b538      	push	{r3, r4, r5, lr}
 801348a:	4c06      	ldr	r4, [pc, #24]	; (80134a4 <_isatty_r+0x1c>)
 801348c:	2300      	movs	r3, #0
 801348e:	4605      	mov	r5, r0
 8013490:	4608      	mov	r0, r1
 8013492:	6023      	str	r3, [r4, #0]
 8013494:	f7ed fb11 	bl	8000aba <_isatty>
 8013498:	1c43      	adds	r3, r0, #1
 801349a:	d102      	bne.n	80134a2 <_isatty_r+0x1a>
 801349c:	6823      	ldr	r3, [r4, #0]
 801349e:	b103      	cbz	r3, 80134a2 <_isatty_r+0x1a>
 80134a0:	602b      	str	r3, [r5, #0]
 80134a2:	bd38      	pop	{r3, r4, r5, pc}
 80134a4:	2000f824 	.word	0x2000f824

080134a8 <_lseek_r>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	4c07      	ldr	r4, [pc, #28]	; (80134c8 <_lseek_r+0x20>)
 80134ac:	4605      	mov	r5, r0
 80134ae:	4608      	mov	r0, r1
 80134b0:	4611      	mov	r1, r2
 80134b2:	2200      	movs	r2, #0
 80134b4:	6022      	str	r2, [r4, #0]
 80134b6:	461a      	mov	r2, r3
 80134b8:	f7ed fb0a 	bl	8000ad0 <_lseek>
 80134bc:	1c43      	adds	r3, r0, #1
 80134be:	d102      	bne.n	80134c6 <_lseek_r+0x1e>
 80134c0:	6823      	ldr	r3, [r4, #0]
 80134c2:	b103      	cbz	r3, 80134c6 <_lseek_r+0x1e>
 80134c4:	602b      	str	r3, [r5, #0]
 80134c6:	bd38      	pop	{r3, r4, r5, pc}
 80134c8:	2000f824 	.word	0x2000f824

080134cc <__malloc_lock>:
 80134cc:	4770      	bx	lr

080134ce <__malloc_unlock>:
 80134ce:	4770      	bx	lr

080134d0 <_read_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	4c07      	ldr	r4, [pc, #28]	; (80134f0 <_read_r+0x20>)
 80134d4:	4605      	mov	r5, r0
 80134d6:	4608      	mov	r0, r1
 80134d8:	4611      	mov	r1, r2
 80134da:	2200      	movs	r2, #0
 80134dc:	6022      	str	r2, [r4, #0]
 80134de:	461a      	mov	r2, r3
 80134e0:	f7ed fa96 	bl	8000a10 <_read>
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	d102      	bne.n	80134ee <_read_r+0x1e>
 80134e8:	6823      	ldr	r3, [r4, #0]
 80134ea:	b103      	cbz	r3, 80134ee <_read_r+0x1e>
 80134ec:	602b      	str	r3, [r5, #0]
 80134ee:	bd38      	pop	{r3, r4, r5, pc}
 80134f0:	2000f824 	.word	0x2000f824

080134f4 <_init>:
 80134f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f6:	bf00      	nop
 80134f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134fa:	bc08      	pop	{r3}
 80134fc:	469e      	mov	lr, r3
 80134fe:	4770      	bx	lr

08013500 <_fini>:
 8013500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013502:	bf00      	nop
 8013504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013506:	bc08      	pop	{r3}
 8013508:	469e      	mov	lr, r3
 801350a:	4770      	bx	lr
